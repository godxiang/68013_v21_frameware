C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE SUB
OBJECT MODULE PLACED IN sub.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sub.c BROWSE DEBUG OBJECTEXTEND CODE

line level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          #include "fx2.h"
   3          #include "fx2regs.h"
   4          #include "fx2sdly.h"       // SYNCDELAY macro
   5          #include "my.h"            
   6          
   7          
   8          void    SetupCommand(void);
   9          
  10          //¶¨Òåº¯Êý****************
  11          
  12          void    EEPROMWrite(WORD addr, BYTE length, BYTE xdata *buf);   //TPM EEPROM Write
  13          //void  EEPROMWriteByte(WORD addr, BYTE value);
  14          void    EEPROMRead(WORD addr, BYTE length, BYTE xdata *buf);    //TPM EEPROM Read
  15          //BYTE  EEPROMReadByte(WORD addr );
  16          
  17          
  18          BOOL    X_MOT_Move( BOOL X_Dir, WORD X_Speed_Time, WORD X_Len ) ;       //X_µç»úÒÆ¶¯³¤¶È
  19          void    X_MOT_Stop( void ) ;                                                                            //X_µç»úÍ£Ö¹
  20          BOOL    X_MOT_Reset( void ) ;                                                                           //X_µç»ú¸´Î»
  21          
  22          BOOL    Y_MOT_Move( BOOL Y_Dir, WORD Y_Len ) ;                                          //Y_µç»úÒÆ¶¯³¤¶È
  23          void    Y_MOT_Stop( void ) ;                                                                            //Y_µç»úÍ£Ö¹
  24          BOOL    Y_MOT_Reset( void ) ;                                                                           //Y_µç»ú¸´Î»
  25          
  26          void    FPGA_Write( BYTE FPGA_Com , BYTE FPGA_data_1 , BYTE FPGA_data_2 ,BYTE FPGA_data_3 ) ;   //FPGA_Write:´
             -®ÐÐÐ´Èë
  27          //void  FPGA_WR_Out( BYTE FPGA_data ) ; //FPGA_´®ÐÐÊä³öÊý¾Ý
  28          //BYTE  FPGA_Read( void ) ;                             //FPGA_Read:´®ÐÐ¶ÁÈë
  29          //BOOL  FPGA_Check(void) ;                              //FPGA_×Ô¼ì
  30          
  31          void    Laser_Plus_Set( WORD lTimer ) ; //lTimer£ºÂö³å¹Ø±ÕÊ±³£Êý£¬ lTimer= 0 £º½áÊøÂö³å²âÊÔ
  32          //void  Laser_Check( void ) ;                   //Laser_×Ô¼ì
  33          
  34          BOOL    Encoder_Check(void) ;                   //Encoder_×Ô¼ì
  35          DWORD   Encoder_Read( void ) ;                  //Encoder¹âÕ¤¶ÁÈ¡
  36          
  37          WORD    Temp_Read( BOOL Temp_Sel ) ;    //TempÎÂ¶È¶ÁÈ¡
  38          BOOL    DS18B20_Reset( void ) ;                 //DS18B20¸´Î»
  39          void    DS18B20_Write( BYTE DS_Data ) ; //DS18B20_Write×Ö½ÚÐ´
  40          BYTE    DS18B20_Read( void ) ;                  //DS18B20_Read×Ö½Ú¶Á
  41          void    DS18B20_Out( BOOL OUT_TP ) ;    //DS18B20¶Ë¿ÚÐ´
  42          BOOL    DS18B20_In( void ) ;                    //DS18B20¶Ë¿Ú¶Á
  43          
  44          void    Delay_us( BYTE T_us ) ;                 //ÑÓÊ±N x us , ×î´ó255us
  45          
  46          void                    ADJ_Write( unsigned int RAM_adr, unsigned char RAM_data ) ;
  47          unsigned char   ADJ_Read( unsigned int RAM_adr ) ;
  48          
  49          //BOOL  Ram_Check(void) ;                               //RAM_×Ô¼ì
  50          
  51          void    System_Check( void ) ;                  //System_×Ô¼ì
  52          void    CPU_FPGA_Int( void ) ;                  //CPU_FPGA³õÊ¼»¯
  53          
  54          void    Exter_Int_0(void) ;                             //Íâ²¿ÖÐ¶Ï0
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 2   

  55          void    Exter_Int_1(void) ;                             //Íâ²¿ÖÐ¶Ï1
  56          void    Timer0_Int_0(void) ;                    //Time0ÖÐ¶Ï´¦Àí, Yµç»ú
  57          void    Timer1_Int_0(void) ;                    //Time1ÖÐ¶Ï´¦Àí,ÓÃÓÚLaser²âÊÔ
  58          void    Timer2_Int_0(void) ;                    //Time2ÖÐ¶Ï´¦Àí, Xµç»ú
  59          
  60          //¶¨Òå±äÁ¿****************
  61          extern BOOL             DB_Addr;                        //TPM Dual Byte Address stat
  62          extern BYTE             I2C_Addr;                       //TPM I2C address
  63          
  64          extern BOOL     GotSUD ;                        //½ÓÊÜµ½¶Ëµã0£¬ÓÐUSBÇëÇó±êÖ¾
  65          extern BOOL     Sleep ;                         //Ë¯Ãß±êÖ¾£¬µ±ÓÐË¯ÃßÖÐ¶Ï£¬½«¸Ã±ê¼ÇÉèÖÃÎªÕæ
  66          extern BOOL     Rwuen ;                         //Ô¶³Ì»½ÐÑ±ê
  67          extern BOOL     Selfpwr ;                       //ÊÇ·ñ×Ô¹©µç
  68          
  69          BYTE Configuration;                     //µ±Ç°µÄÅäÖÃºÅ
  70          BYTE AlternateSetting;                  //¿ÉÑ¡ÉèÖÃºÅ
  71          
  72          
  73          //×Ô¶¨Òå±äÁ¿**************
  74          extern BYTE             GP_State ;                      //CTS×´Ì¬
  75          extern BYTE             GP_Model ;                      //CTS»úÐÍ
  76          
  77          extern BYTE             X_Mot_State ;           //X_µç»ú×´Ì¬
  78          extern WORD             X_Timer_ip ;            //X_µç»úµÄÊ±³£ÊýÖ¸Õë
  79          extern WORD             X_Timer_Add ;           //X_µç»úµÄ¼ÓËÙ²½Êý
  80          extern BYTE             X_Speed_Time_H ;        //X_µç»úÔÈËÙÊ±³£Êý
  81          extern BYTE             X_Speed_Time_L ;        //X_µç»úÔÈËÙÊ±³£Êý
  82          extern WORD             X_Mot_Run_Len ;         //X_µç»úÔÈËÙÔËÐÐ²½Êý
  83          extern WORD             X_Print_speed ;         //X_µç»ú´òÓ¡ËÙ¶È
  84          extern WORD             X_Print_Pos     ;               //X_µç»úÆðÊ¼Î»ÒÆ
  85          extern WORD             X_Print_Len ;           //X_µç»úÊä³öÐÐ³Ì
  86          
  87          extern BYTE             Y_Mot_State ;           //Y_µç»ú×´Ì¬
  88          extern BYTE             Y_Timer_ip ;            //Y_µç»úµÄÊ±³£ÊýÖ¸Õë
  89          extern WORD             Y_Mot_Run_Len ;         //Y_µç»úÔÈËÙÔËÐÐ²½Êý
  90          extern WORD             Y_Print_Feed ;          //Y_µç»úÊä³öÐÐ¾à
  91          
  92          extern BYTE             Laser_Test_Lamp ;       //Laser²âÊÔLaserÖ¸Ê¾
  93          extern WORD             Laser_Plus_Time ;       //Laser²âÊÔÊ±³£Êý,¹Ø±ÕÊ±¼ä
  94          
  95          extern WORD     Manage_Time ;           //CPU¹ÜÀí¼ÆÊýÆ÷
  96          
  97          extern bit              Indic_Flash ;           //¼¤¹â±ê³ßÊÇ·ñÉÁ¶¯
  98          extern bit              Dir_Mode ;                      //·½ÏòÄ£Ê½:0:µ¥,1:Ë«ÏòÊä³ö
  99          extern bit              RAM_OK ;                        //ÐÐÊý¾Ý×¼±¸ºÃ¿ÉÒÔÊä³ö
 100          extern bit              RAM_Null ;                      //¿ÕÊý¾Ý
 101          extern bit              RAM_SELECT ;            //RAMÑ¡Ôñ
 102          extern bit              Print_Dir  ;            //´òÓ¡·½Ïò
 103          extern bit              Print_End  ;            //´òÓ¡½áÊø
 104          extern unsigned int             ADJ_RAM_Addr ;          //ADJ RAM µØÖ·
 105          //extern bit            Warm_State ;            //Ô¤ÈÈ×´Ì¬
 106          //extern bit            Temp_Select ;           //ÎÂ¶È¼ì²âÑ¡Ôñ 0:ÄÚ²¿
 107          
 108          //----------------FPGAÊý¾Ý¿Ú--------------------
 109          xdata volatile BYTE     FPGA_Port       _at_ 0x8000;    //FPGAÊý¾Ý½Ó¿Ú
 110          
 111          //X_MotÑÓÊ±Öµ   ÎÄ¼þ£ºX_Motor-V4.txt
 112          const WORD code X_Mot_Time[ X_Step_Add ] ={
 113                  0x0555, 0x72D0, 0x9CB1, 0xB2A7, 0xC03A, 0xC97F, 0xD02C, 0xD53C, 0xD93B, 0xDC69,  // 10
 114                  0xDF10, 0xE144, 0xE323, 0xE4C0, 0xE629, 0xE765, 0xE87E, 0xE977, 0xEA57, 0xEB22,  // 20
 115                  0xEBDC, 0xEC83, 0xED1E, 0xEDAC, 0xEE2E, 0xEEA7, 0xEF17, 0xEF81, 0xEFE3, 0xF03F,  // 30
 116                  0xF095, 0xF0E7, 0xF133, 0xF17C, 0xF1C1, 0xF201, 0xF23F, 0xF27A, 0xF2B2, 0xF2E8,  // 40
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 3   

 117                  0xF31A, 0xF34B, 0xF37A, 0xF3A6, 0xF3D1, 0xF3FA, 0xF422, 0xF448, 0xF46D, 0xF490,  // 50
 118                  0xF4B2, 0xF4D3, 0xF4F2, 0xF511, 0xF52F, 0xF54C, 0xF568, 0xF583, 0xF59D, 0xF5B7,  // 60
 119                  0xF5CF, 0xF5E7, 0xF5FF, 0xF615, 0xF62C, 0xF641, 0xF656, 0xF66B, 0xF67E, 0xF692,  // 70
 120                  0xF6A5, 0xF6B7, 0xF6CA, 0xF6DB, 0xF6EC, 0xF6FD, 0xF70E, 0xF71E, 0xF72D, 0xF73D,  // 80
 121                  0xF74C, 0xF75B, 0xF769, 0xF778, 0xF786, 0xF793, 0xF7A1, 0xF7AE, 0xF7BB, 0xF7C8,  // 90
 122                  0xF7D4, 0xF7E0, 0xF7EC, 0xF7F8, 0xF804, 0xF80F, 0xF81A, 0xF825, 0xF830, 0xF83A,  // 100
 123                  0xF845, 0xF84F, 0xF85A, 0xF863, 0xF86D, 0xF877, 0xF880, 0xF88A, 0xF893, 0xF89C,  // 110
 124                  0xF8A5, 0xF8AE, 0xF8B7, 0xF8BF, 0xF8C8, 0xF8D0, 0xF8D8, 0xF8E1, 0xF8E9, 0xF8F0,  // 120
 125                  0xF8F8, 0xF900, 0xF908, 0xF90F, 0xF916, 0xF91E, 0xF925, 0xF92C, 0xF933, 0xF93A,  // 130
 126                  0xF941, 0xF948, 0xF94E, 0xF955, 0xF95C, 0xF962, 0xF968, 0xF96F, 0xF975, 0xF97B,  // 140
 127                  0xF981, 0xF987, 0xF98D, 0xF993, 0xF999, 0xF99F, 0xF9A4, 0xF9AA, 0xF9B0, 0xF9B5,  // 150
 128                  0xF9BB, 0xF9C0, 0xF9C6, 0xF9CB, 0xF9D0, 0xF9D6, 0xF9DB, 0xF9E0, 0xF9E5, 0xF9EA,  // 160
 129                  0xF9EF, 0xF9F4, 0xF9F8, 0xF9FD, 0xFA02, 0xFA07, 0xFA0C, 0xFA10, 0xFA15, 0xFA19,  // 170
 130                  0xFA1E, 0xFA22, 0xFA27, 0xFA2B, 0xFA2F, 0xFA34, 0xFA38, 0xFA3C, 0xFA40, 0xFA45,  // 180
 131                  0xFA49, 0xFA4D, 0xFA51, 0xFA55, 0xFA59, 0xFA5D, 0xFA61, 0xFA65, 0xFA69, 0xFA6C,  // 190
 132                  0xFA70, 0xFA74, 0xFA78, 0xFA7C, 0xFA7F, 0xFA83, 0xFA86, 0xFA8A, 0xFA8E, 0xFA91,  // 200
 133                  0xFA95, 0xFA98, 0xFA9C, 0xFA9F, 0xFAA2, 0xFAA6, 0xFAA9, 0xFAAD, 0xFAB0, 0xFAB3,  // 210
 134                  0xFAB6, 0xFABA, 0xFABD, 0xFAC0, 0xFAC3, 0xFAC6, 0xFAC9, 0xFACC, 0xFAD0, 0xFAD3,  // 220
 135                  0xFAD6, 0xFAD9, 0xFADC, 0xFADF, 0xFAE2, 0xFAE4, 0xFAE7, 0xFAEA, 0xFAED, 0xFAF0,  // 230
 136                  0xFAF3, 0xFAF6, 0xFAF8, 0xFAFB, 0xFAFE, 0xFB01, 0xFB03, 0xFB06, 0xFB09, 0xFB0B,  // 240
 137                  0xFB0E, 0xFB11, 0xFB13, 0xFB16, 0xFB19, 0xFB1B, 0xFB1E, 0xFB20, 0xFB23, 0xFB25,  // 250
 138                  0xFB28, 0xFB2A, 0xFB2D, 0xFB2F, 0xFB32, 0xFB34, 0xFB36, 0xFB39, 0xFB3B, 0xFB3D,  // 260
 139                  0xFB40, 0xFB42, 0xFB45, 0xFB47, 0xFB49, 0xFB4B, 0xFB4E, 0xFB50, 0xFB52, 0xFB54,  // 270
 140                  0xFB57, 0xFB59, 0xFB5B, 0xFB5D, 0xFB5F, 0xFB61, 0xFB64, 0xFB66, 0xFB68, 0xFB6A,  // 280
 141                  0xFB6C, 0xFB6E, 0xFB70, 0xFB72, 0xFB74, 0xFB76, 0xFB78, 0xFB7A, 0xFB7C, 0xFB7E,  // 290
 142                  0xFB80, 0xFB82, 0xFB84, 0xFB86, 0xFB88, 0xFB8A, 0xFB8C, 0xFB8E, 0xFB90, 0xFB92,  // 300
 143                  0xFB94, 0xFB95, 0xFB97, 0xFB99, 0xFB9B, 0xFB9D, 0xFB9F, 0xFBA0, 0xFBA2, 0xFBA4,  // 310
 144                  0xFBA6, 0xFBA8, 0xFBA9, 0xFBAB, 0xFBAD, 0xFBAF, 0xFBB0, 0xFBB2, 0xFBB4, 0xFBB5,  // 320
 145                  0xFBB7, 0xFBB9, 0xFBBB, 0xFBBC, 0xFBBE, 0xFBC0, 0xFBC1, 0xFBC3, 0xFBC4, 0xFBC6,  // 330
 146                  0xFBC8, 0xFBC9, 0xFBCB, 0xFBCD, 0xFBCE, 0xFBD0, 0xFBD1, 0xFBD3, 0xFBD5, 0xFBD6,  // 340
 147                  0xFBD8, 0xFBD9, 0xFBDB, 0xFBDC, 0xFBDE, 0xFBDF, 0xFBE1, 0xFBE2, 0xFBE4, 0xFBE5,  // 350
 148                  0xFBE7, 0xFBE8, 0xFBEA, 0xFBEB, 0xFBED, 0xFBEE, 0xFBEF, 0xFBF1, 0xFBF2, 0xFBF4,  // 360
 149                  0xFBF5, 0xFBF7, 0xFBF8, 0xFBF9, 0xFBFB, 0xFBFC, 0xFBFE, 0xFBFF, 0xFC00, 0xFC02,  // 370
 150                  0xFC03, 0xFC04, 0xFC06, 0xFC07, 0xFC08, 0xFC0A, 0xFC0B, 0xFC0C, 0xFC0E, 0xFC0F,  // 380
 151                  0xFC10, 0xFC12, 0xFC13, 0xFC14, 0xFC15, 0xFC17, 0xFC18, 0xFC19, 0xFC1A, 0xFC1C,  // 390
 152                  0xFC1D, 0xFC1E, 0xFC20, 0xFC21, 0xFC22, 0xFC23, 0xFC24, 0xFC26, 0xFC27, 0xFC28,  // 400
 153                  0xFC29, 0xFC2B, 0xFC2C, 0xFC2D, 0xFC2E, 0xFC2F, 0xFC30, 0xFC32, 0xFC33, 0xFC34,  // 410
 154                  0xFC35, 0xFC36, 0xFC37, 0xFC39, 0xFC3A, 0xFC3B, 0xFC3C, 0xFC3D, 0xFC3E, 0xFC3F,  // 420
 155                  0xFC40, 0xFC41, 0xFC43, 0xFC44, 0xFC45, 0xFC46, 0xFC47, 0xFC48, 0xFC49, 0xFC4A,  // 430
 156                  0xFC4B, 0xFC4C, 0xFC4D, 0xFC4F, 0xFC50, 0xFC51, 0xFC52, 0xFC53, 0xFC54, 0xFC55,  // 440
 157                  0xFC56, 0xFC57, 0xFC58, 0xFC59, 0xFC5A, 0xFC5B, 0xFC5C, 0xFC5D, 0xFC5E, 0xFC5F,  // 450
 158                  0xFC60, 0xFC61, 0xFC62, 0xFC63, 0xFC64, 0xFC65, 0xFC66, 0xFC67, 0xFC68, 0xFC69,  // 460
 159                  0xFC6A, 0xFC6B, 0xFC6C, 0xFC6D, 0xFC6E, 0xFC6F, 0xFC70, 0xFC71, 0xFC71, 0xFC72,  // 470
 160                  0xFC73, 0xFC74, 0xFC75, 0xFC76, 0xFC77, 0xFC78, 0xFC79, 0xFC7A, 0xFC7B, 0xFC7C   // 480
 161          
 162          };
 163          
 164          
 165          //Y_MotÑÓÊ±Öµ
 166          const WORD code Y_Mot_Time[ Y_Add_Step ] ={
 167                  0x15B4, 0xD37B, 0xE547, 0xEC04, 0xEF90, 0xF1C4, 0xF345, 0xF45D, 0xF532, 0xF5DB,  // 10
 168                  0xF664, 0xF6D6, 0xF735, 0xF788, 0xF7CF                                                                                   // 15
 169          };
 170          
 171          const BYTE code EEPROM_Register[ 24 ] = {       //×¢²áÐÅÏ¢16×Ö½Ú:
 172                  0x00, 0x00, 0x00, 0x00 ,                                //°²È«×Ö½Ú4byte
 173                  'C', 'T', 'S',                                              //Í·±êÖ¾'CTS'                                        
 174                  0x01, 0x00,                                                             //ÐÍºÅ:word
 175                  0x02, 0x00,                                                             //°æ±¾:word
 176                  15,                                                                             //Äê:byte
 177                  9,                                                                              //ÔÂ:byte
 178                  0x00, 0x00,                                                             //×´Ì¬:word
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 4   

 179                  0x01, 0x00,     0x00, 0x00,                                     //Êä³ö´ÎÊý:Dword
 180                  'E',                                                                    //½áÊø±êÖ¾'E'
 181                  0x00, 0x00, 0x00, 0x00                                  //°²È«×Ö½Ú4byte
 182          };
 183          //*************³õÊ¼»¯´¦Àí£¬ÔÚ³ÌÐò¿ªÊ¼Ê±µ÷ÓÃ****************
 184          void TD_Init(void)            
 185          {
 186   1              CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1) ;     //½«CPUÊ±ÖÓÉèÖÃÎª48MHz
 187   1              SYNCDELAY;
 188   1      
 189   1      //--------------------------
 190   1      //       Í¬²½FIFOÄ£Ê½ 
 191   1      //       µ±IFCFGÉèÖÃÎªFIFOÄ£Ê½Ê±£¬¼´IFCFG1:0 = 11
 192   1      //       PA.2¿Ú±»ÖÃÎª SLOE¹¦ÄÜÒý½Å£¬PA.4±»ÖÃÎªFIFOADR0¹¦ÄÜÒý½Å
 193   1      //       PA.5¿Ú±»ÖÃÎªFIFOADR1¹¦ÄÜÒý½Å£¬PA.6±»ÖÃÎªPKTEND ¹¦ÄÜÒý½Å
 194   1              IFCONFIG =0x43;                 //b7: IFCLKSRC£ºFIFOÊ±ÖÓÄÚ²¿/Íâ²¿Ê±ÖÓÔ´Ñ¡Ôñ£¬0Íâ²¿Ê±ÖÓÔ´£¬1ÄÚ²¿Ê±ÖÓÔ´¡£
 195   1              //       =0100,0011             //b6: 3048MHZ£º ÈçÑ¡ÔñÄÚ²¿Ê±ÖÓ£¬30MHz/48MHzÆµÂÊÑ¡Ôñ£¬0 IFCLKÊ±ÖÓ30M£¬1 IFCLKÊ±ÖÓ48M¡
             -£
 196   1                                                              //b5: IFCLKOE£º IFCLKÊ±ÖÓÊä³öÊ¹ÄÜ£¬0¹Ø±Õ£¬1´ò¿ª¡£
 197   1                                                              //b4: IFCLKPOL£ºIFCLKÊä³ö·´×ªÊ¹ÄÜ£¬0²»·´×ª£¬1·´×ª¡£
 198   1                                                              //b3: ASYNC£º   Slave FIFOÍ¬²½/Òì²½¹¤×÷·½Ê½Ñ¡Ôñ£¬0Í¬²½£¬1Òì²½¡£
 199   1                                                              //b2: GSTATE£º  Ñ¡ÔñÊÇ·ñ½«GSTATE[2:0]ÔÚPORTE[2:0]Êä³ö£¬0¹Ø±Õ£¬1Ê¹ÄÜ¡£
 200   1                                                              //b10:IFCFG1:0£ºFX2 I/O¶Ë¿ÚÄ£Ê½Ñ¡Ôñ£¬Ò²¼ÈÊÇÉÏÃæËùËµµÄFX2ÓëÍâ²¿Âß¼­´«Êä·½Ê½µÄÑ¡Ôñ¡£00£ºI/O·½Ê½, 01£º
             -reserved, 10£ºGPIF·½Ê½, 11£º Slave FIFO·½Ê½¡£
 201   1              SYNCDELAY;
 202   1      
 203   1      //------------USB¹¦ÄÜ³õÊ¼»¯------------- 
 204   1      //      Configuration = 0 ;             //µ±Ç°µÄÅäÖÃÉèÖÃ
 205   1      //      AlternateSetting = 1;   //¿ÉÑ¡ÉèÖÃ
 206   1       
 207   1              EP1OUTCFG = 0xA0;               //¶Ô¸÷¸ö¶Ëµã½øÐÐÉèÖÃ,¼ûTRM section 15.14
 208   1              SYNCDELAY;
 209   1              EP1INCFG  = 0xA0;
 210   1              SYNCDELAY;              // see TRM section 15.14
 211   1      
 212   1      //------------2Endpoint³õÊ¼»¯------------
 213   1              EP2CFG = 0xA0;                  //EP2 OUT=1, bulk size 512, 4x buffered
 214   1              SYNCDELAY; 
 215   1              EP6CFG = 0xE0;          //EP6 in ,      512 bytes, 4x, bulk
 216   1              SYNCDELAY;              
 217   1      
 218   1              EP4CFG = 0x02;          //clear valid bit
 219   1              SYNCDELAY;                     
 220   1              EP8CFG = 0x02;          //clear valid bit
 221   1              SYNCDELAY; 
 222   1      
 223   1      
 224   1      
 225   1      //EPxCFG:Endpoint Configuration
 226   1      //bit7          VALID=1         ,to activate an Endpoint
 227   1      //bit6          DIR=0           ,Endpoint Direction is OUT
 228   1      //bit5,4        TYPE1:0=10      ,Endpoint Type is BULK (default)
 229   1      //bit3          SIZE=0          ,512 bytes ,SIZE=1:1024bytes
 230   1      //bit2          =0
 231   1      //bit1,0        BUF1:0=00       ,4x buffered, 10:2x buffered, 11:3x buffered 
 232   1      //------------FIFO³õÊ¼»¯--------------
 233   1              FIFORESET = 0x80;               // set NAKALL bit to NAK all transfers from host
 234   1              SYNCDELAY;
 235   1              FIFORESET = 0x02;               // reset EP2 FIFO
 236   1              SYNCDELAY;
 237   1              FIFORESET = 0x04;       // reset, FIFO 4
 238   1              SYNCDELAY;              // 
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 5   

 239   1              FIFORESET = 0x06;       // reset, FIFO 6
 240   1              SYNCDELAY;              // 
 241   1              FIFORESET = 0x08;       // reset, FIFO 8
 242   1              SYNCDELAY;              // 
 243   1              FIFORESET = 0x00;               // clear NAKALL bit to resume normal operation
 244   1              SYNCDELAY;
 245   1      
 246   1      
 247   1      //FLAGA£¬FLAGB£¬FLAGC£¬FLAGD·´Ó³FIFO×´Ì¬Ñ¡Ôñ¡£
 248   1      //Ã¿¸ö½ÅÓÐ±àÖ·/¹Ì¶¨Á½ÖÖÄ£Ê½£ºÈçÉèÎª±àÖ·Ä£Ê½£¬ÔòËüÃÇ¶¼·´Ó³FIFOADR[1:0]½Åµ±Ç°ËùÖ¸¶ËµãµÄ×´Ì¬
 249   1      //FLAGA·´Ó³"¿É±à³Ì¼«ÏÞ"£¬FLAGB·´Ó³"Âú"±êÖ¾£¬FLAGC·´Ó³"¿Õ"±êÖ¾£¬FLAGD²»´æÔÚ£»
 250   1      //ÈçÉèÎª¹Ì¶¨Ä£Ê½£¬ËüÃÇ¾ù¿ÉÈÎÒâÉèÖÃ³É·´Ó³ÈÎÒâ¶ËµãµÄÈÎÒâ±êÖ¾£¬¶ø²»ÊÜÏÞÓÚFIFOADR[1:0]½Åµ±Ç°ËùÖ¸¶ËµãµÄ×´Ì¬¡£
 251   1      //Slave fifoÄ£Ê½ÖÐ£¬ÓÃÒý½ÅFLAGA~FLAGDÀ´¶¨ÒåÓÃ¶ËµãFIFOµÄ×´Ì¬£¬²¢¿ÉÁé»î±à³ÌÀ´ÊµÏÖFLAGxÉèÖÃ£¬
 252   1      //Programmable Flag (PF), Empty Flag (EF), Full Flag (FF).
 253   1      //FLAGA=PF, FLAGB=FF, FLAGC=EF,FLAGD=EP2PF (Actual FIFO is selected by FIFOADR[0,1] pins)
 254   1      
 255   1              PINFLAGSAB = 0xc4;      // FLAGA - fixed EP2PF, FLAGB - fixed EP2FF
 256   1      //FLAGB3 FLAGB2 FLAGB1 FLAGB0 FLAGA3 FLAGA2 FLAGA1 FLAGA0
 257   1      //FLAGA±íÊ¾¶Ëµã6            FLAGB ±íÊ¾¶Ëµã2 Âú×´Ì¬ 
 258   1              SYNCDELAY;
 259   1      
 260   1              PINFLAGSCD = 0x18;      // FLAGC - fixed EP2EF, FLAGD - reserved
 261   1      //FLAGD3 FLAGD2 FLAGD1 FLAGD0 FLAGC3 FLAGC2 FLAGC1 FLAGC0
 262   1      //  FLAGC ±íÊ¾¶Ëµã2¿Õ×´Ì¬
 263   1              SYNCDELAY;
 264   1      
 265   1      //Restore FIFOs to Default State
 266   1              EP2FIFOCFG = 0x00;              // allow core to see zero to one transition of auto out bit
 267   1              SYNCDELAY;
 268   1              EP2FIFOCFG = 0x11;              // auto out mode, disable PKTEND zero length send, word ops
 269   1              SYNCDELAY;
 270   1      //Endpoint 2/Slave FIFO Configuration
 271   1      //Bit 7 0
 272   1      //Bit 6 INFM1           ,IN Full Minus One ,FIFO×´Ì¬±êÖ¾ÊÇ·ñÌáÇ°Ò»¸ö×Ö½ÚÓÐÐ§Ñ¡Ôñ£¬IN¶ËµãÂú¼õ£±£¬£±Ê¹ÄÜ
 273   1      //Bit 5 OEP1            ,OUT Empty Plus One,FIFO×´Ì¬±êÖ¾ÊÇ·ñÌáÇ°Ò»¸ö×Ö½ÚÓÐÐ§Ñ¡Ôñ£¬OUT¶Ëµã¿Õ¼Ó1£¬£±Ê¹ÄÜ
 274   1      //Bit 4 AUTOOUT         ,Instantaneous Connection to Endpoint FIFO. £±Ê¹ÄÜ,FX2¹Ì¼þÖ»ÐèÒªÍê³É³õÊ¼»¯,Êý¾Ý´«ÊäÎÞÐè¹Ì
             -¼þ,µ±FX2´ÓÖ÷»úÊÕµ½Ò»°üÊý¾ÝÊ±,Íâ²¿Âß¼­¼´¿É¿´µ½FIFO¶Ëµã»º³åÇø×´Ì¬µÄ¸Ä±ä£¬È»ºó´ÓÖÐÈ¡Êý¡£
 275   1      //Bit 3 AUTOIN          ,Auto Commit to SIE. Auto INºÍAuto OUTÓÐÒ»µã²»Í¬£¬Auto OUTÊ±,°üÖ»ÄÜÊÇ512»ò1024. Auto INÊ±
             -,°üµÄ´óÐ¡ÈÎÒâ,ÉõÖÁ¿ÉÒÔÊÇ0×Ö½Ú£¬Õâ¿ÉÒÔÍ¨¹ýEPxAUTOINLENTH/LÉèÖÃ¡£
 276   1      //Bit 2 ZEROLENIN       ,Enable Zero-length IN Packets, ÊÇ·ñÔÊÐí´«Êä0×Ö½Ú,1Ê¹ÄÜ£¬£°·ÇÊ¹ÄÜ¡£
 277   1      //Bit 1 0
 278   1      //Bit 0 WORDWIDE        ,Select Byte/Word FIFOs on PORTB/D Pins
 279   1      //ÔÚFX2¸´Î»ºó,ÈçOUT¶Ëµã»º³åÇøÄÚÓÐÒ»°üÊý¾ÝÎ´´¦Àí,Õâ°üÊý¾Ý²¢²»»á×Ô¶¯´«¸øÍâ²¿Âß¼­¡£Îª±£Ö¤OUT¶Ëµã»º³åÇøÄÚÃ»ÓÐÎ
             -´´¦ÀíÊý¾Ý,ÒªÇå¿ÕÒ»ÏÂOUT¶Ëµã»º³åÇø,¾ßÌå×ö·¨¾ÍÊÇÏòSKIPÎ»Ð´1£¨OUT¶Ëµã»º³åÇøÓÐ¼¸¸ö»º³åÇø¾ÍÐ´¼¸´Î£©¡£
 280   1      
 281   1               
 282   1      //------------ÉèÖÃGPIFÖÐ¶Ï------------ 
 283   1      // setup INT4 as internal source for GPIF interrupts
 284   1      // using INT4CLR (SFR), automatically enabled
 285   1      // INTSETUP |= 0x03; //Enable INT4 Autovectoring
 286   1      // GPIFIE = 0x03; // Enable GPIFDONE and GPIFWF interrupt(s)
 287   1      // EIE |= 0x04; // Enable INT4 ISR, EIE.2(EIEX4)=1
 288   1      
 289   1      //------------ÆµÂÊ³õÊ¼»¯--------- 
 290   1              CKCON = 0x39 ;                                  //xx11,1001->T0=CLKOUT/4; T1=CLKOUT/4; T2=CLKOUT/4; Ram000Ä£Ê½=83.3ns
 291   1      //------------I/O¶Ë¿Ú³õÊ¼»¯-------------
 292   1              PORTACFG        = Val_P_A_CFG ;         //portA ¹¦ÄÜÉèÖÃ
 293   1              OEA             = Val_P_A_IO ;          //portA  I/OÉèÖÃ
 294   1              IOA             = Val_P_A_Ini ;         //portA   ³õÊ¼»¯ 
 295   1      
 296   1              PORTCCFG        = Val_P_C_CFG ;         //portC 7~0ÉèÖÃÎªI/O¹¦ÄÜ
 297   1              OEC             = Val_P_C_IO ;          //portC  I/OÉèÖÃ
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 6   

 298   1              IOC             = Val_P_C_Ini ;         //portC   ³õÊ¼»¯ 
 299   1      
 300   1              PORTECFG        = Val_P_E_CFG ;
 301   1              OEE             = Val_P_E_IO ;          //portE  I/OÉèÖÃ
 302   1              IOE             = Val_P_E_Ini ;         //portE   ³õÊ¼»¯ 
 303   1      
 304   1      
 305   1      //------------Íâ²¿ÖÐ¶Ï0³õÊ¼»¯-----------                
 306   1      //      IT0 = TRUE ;                    //ÖÐ¶Ï0±ßÑØ´¥·¢
 307   1      //      EX0 = TRUE ;                    //Íâ²¿ÖÐ¶Ï0Ê¹ÄÜ
 308   1      
 309   1      //------------Íâ²¿ÖÐ¶Ï1³õÊ¼»¯-----------
 310   1      
 311   1      
 312   1      //------------Ê±ÖÓ/¼ÆÊýÆ÷³õÊ¼»¯--------- 
 313   1      //±¾ÏµÍ³ÖÐ:CLKOUT1/4=12Mhz->T=250/3ns=£¬¼ÆÊýÊ±¼äºÜ×¼È·,ÏìÓ¦Ê±¼äÓÐ0-4TµÄÑÓÊ±(dTmax=0.333us)
 314   1      //                 T0:CLKOUT/4ÓÃÓÚYµç»úµÄ¿ØÖÆ
 315   1              TMOD = 0x11 ;                   //0001,0001:T1:Ä£Ê½1,16bits;   T0:Ä£Ê½1,16bits
 316   1      
 317   1      //------------Ê±ÖÓ0³õÊ¼»¯---------------
 318   1      //              T0:CLKOUT/4ÓÃÓÚYµç»úµÄ¿ØÖÆ
 319   1              TR0 = FALSE ;                   //²»ÔÊÐíT0¼ÆÊý
 320   1              ET0 = TRUE ;                    //ÔÊÐíT0ÖÐ¶Ï
 321   1      
 322   1      //------------Ê±ÖÓ1³õÊ¼»¯---------------
 323   1      //              T1:CLKOUT/4ÓÃÓÚLaser²âÊÔ
 324   1              TR1 = FALSE ;                   //²»ÔÊÐíT1¼ÆÊý
 325   1              ET1 = TRUE ;                    //ÔÊÐíT1ÖÐ¶Ï
 326   1      
 327   1      //------------Ê±ÖÓ2³õÊ¼»¯,X_Mot---------
 328   1      //              T2:CLKOUT/4ÓÃÓÚXµç»úµÄ¿ØÖÆ
 329   1              T2CON = 0x00;                   //0000,0001:T2:16bits×Ô¶¯,²»ÔÊÐíT2¼ÆÊý 
 330   1              ET2 = TRUE;                             //ÔÊÐíT2ÖÐ¶Ï    
 331   1      
 332   1      //------------´®ÐÐ¶Ë¿Ú³õÊ¼»¯------------ 
 333   1      
 334   1      
 335   1      //------------I2C¶Ë¿Ú³õÊ¼»¯-------------
 336   1      //      EI2C = 0;                               //²»ÔÊÐíI2CÖÐ¶Ï
 337   1      
 338   1              EZUSB_InitI2C();                // Initialize I2C Bus
 339   1      
 340   1              // Determine I2C boot eeprom device address; addr = 0x0 for 8 bit addr eeproms (24LC00)
 341   1              I2C_Addr = SERIAL_ADDR | ((I2CS & 0x10) >> 4);  // addr=0x01 for 16 bit addr eeprom (LC65)
 342   1              // Indicate if it is a dual byte address part
 343   1              DB_Addr = (BOOL)(I2C_Addr & 0x01);                              //TPM: ID1 is 16 bit addr bit - set by rocker sw or jumper
 344   1      
 345   1              I2CTL |= bm400KHZ ;     //eeprom 400khz
 346   1      //      I2CTL &= ~bm400KHZ;             //eeprom 100khz
 347   1      
 348   1      
 349   1      }
 350          
 351          //********ÏÂÃæÎª¶Ëµã0£¬USBÇëÇó´¦Àí
 352          //»ñÈ¡ÃèÊö·û
 353          /*
 354          BOOL DR_GetDescriptor(void)
 355          {
 356             return(TRUE);
 357          }
 358          */
 359          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 7   

 360          //**********ÉèÖÃÅäÖÃ**********
 361          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 362          {
 363   1         Configuration = SETUPDAT[2];
 364   1         return(TRUE);            // Handled by user code
 365   1      }
 366          
 367          //**********¶ÁÈ¡ÅäÖÃ**********
 368          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 369          {
 370   1         EP0BUF[0] = Configuration;
 371   1         EP0BCH = 0;
 372   1         EP0BCL = 1;
 373   1         return(TRUE);            // Handled by user code
 374   1      }
 375          
 376          //**********ÉèÖÃ½Ó¿ÚÅäÖÃ**********
 377          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 378          {
 379   1         AlternateSetting = SETUPDAT[2];
 380   1         return(TRUE);            // Handled by user code
 381   1      }
 382          
 383          //**********¶ÁÈ¡½Ó¿ÚÅäÖÃ**********
 384          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 385          {
 386   1         EP0BUF[0] = AlternateSetting;
 387   1         EP0BCH = 0;
 388   1         EP0BCL = 1;
 389   1         return(TRUE);            // Handled by user code
 390   1      }
 391          
 392          //»ñÈ¡Éè±¸×´Ì¬
 393          /*BOOL DR_GetStatus(void)
 394          {
 395             return(TRUE);
 396          }*/
 397          
 398          //Çå³ýÌØÐÔ
 399          /*BOOL DR_ClearFeature(void)
 400          {
 401             return(TRUE);
 402          }*/
 403          
 404          //ÉèÖÃÌØÐÔ
 405          /*BOOL DR_SetFeature(void)
 406          {
 407             return(TRUE);
 408          }*/
 409          
 410          
 411          //**********ÓÃ»§×Ô¶¨ÒåÃüÁî´¦Àí**********
 412          BOOL DR_VendorCmnd(void)
 413          { 
 414   1              WORD addr, i, len, bc;
 415   1      
 416   1              //--------ÅÐ¶ÏÇëÇóÀàÐÍ--------
 417   1              switch(SETUPDAT[1])
 418   1              { 
 419   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,ÊÇ·ñÃ¦,·µ»ØRAM×´Ì¬³¤¶È=1 BYTE
 420   2                      case GP_GET_Busy:
 421   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 8   

 422   2      
 423   2                              *( EP0BUF+0 ) = 0 ;                                     //ÎÞÓÃ
 424   2      
 425   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 426   2                              EP0BCL = GP_GET_Busy_Len;                       //Arm endpoint with 3 bytes to transfer
 427   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 428   2                              break ;
 429   2      
 430   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»Ø×´Ì¬³¤¶È4BYTE             :1B(×´Ì¬),1B(°´¼ü),1B(USBÄ£Ê½),1B(°æ±¾),1B(»úÐÍ)
 431   2                      case GP_GET_state:
 432   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 433   2      
 434   2                              *( EP0BUF+0 ) = GP_State ;                      //×°ÔØCTS×´Ì¬
 435   2      
 436   2                              *( EP0BUF+1 ) = IOA ;                           //Port_A
 437   2      
 438   2                              *( EP0BUF+2 ) = IOC ;                           //Port_C
 439   2      
 440   2                              *( EP0BUF+3 ) = IOD ;                           //Port_D
 441   2      
 442   2                              *( EP0BUF+4 ) = IOE ;                           //Port_E
 443   2      
 444   2                              if(EZUSB_HIGHSPEED())                           //¼ì²âUSB Speed 1:High Speed 
 445   2                                      *( EP0BUF+5 ) = 1 ;                             //¶ÁÈ¡USB°æ±¾
 446   2                              else
 447   2                                      *( EP0BUF+5 ) = 0 ;
 448   2      
 449   2                              *( EP0BUF+6 ) = CTS_Ver ;                       //°æ±¾
 450   2      
 451   2                              *( EP0BUF+7 ) = GP_Model ;                      //»úÐÍ
 452   2      
 453   2                              *( EP0BUF+8 ) = Serial_No & 0xff ;      //ÐòÁÐºÅÂë
 454   2      
 455   2                              *( EP0BUF+9 ) = ( Serial_No >> 8) & 0xff ;
 456   2                              
 457   2                              *( EP0BUF+10 ) = 0 ;                            //×¢²áÐÅÏ¢0
 458   2                              
 459   2                              *( EP0BUF+11 ) = 0 ;                            //×¢²áÐÅÏ¢1
 460   2      
 461   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 462   2                              EP0BCL = GP_GET_state_Len;                      //Arm endpoint with 3 bytes to transfer
 463   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 464   2                              break;
 465   2      
 466   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»Ø¹âÕ¤¶ÁÊý = 3BYTE
 467   2                      case GP_GET_Encode:
 468   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 469   2      
 470   2                              FPGA_Write( COM_Encode_Read, 0, 0, 0 ) ;        //CPU¶Á¹âÕ¤
 471   2      
 472   2                              *( EP0BUF+2 ) = FPGA_Port ;
 473   2                              *( EP0BUF+1 ) = FPGA_Port ;
 474   2                              *( EP0BUF+0 ) = FPGA_Port ;
 475   2      
 476   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 477   2                              EP0BCL = GP_GET_Encode_Len;             //Arm endpoint with 3 bytes to transfer
 478   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 479   2                              break ;
 480   2      
 481   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»ØRamÖµ = 1BYTE
 482   2                      case GP_GET_Ram:
 483   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 9   

 484   2      
 485   2                              FPGA_Write( COM_Ram_Read, 0, 0, 0 ) ;   //CPU¶ÁRAM
 486   2      
 487   2                              *( EP0BUF+0 ) = FPGA_Port ;
 488   2                              *( EP0BUF+1 ) = FPGA_Port ;
 489   2      
 490   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 491   2                              EP0BCL = GP_GET_Ram_Len;                        //Arm endpoint with 3 bytes to transfer
 492   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 493   2                              break ;
 494   2      
 495   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»ØFPGAÖµ = 1BYTE
 496   2                      case GP_GET_FPGA:
 497   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 498   2      
 499   2                              FPGA_Write( COM_Check_Read, 0, 0, 0 ) ; //¶ÁFPGAµÄLEDÖµ
 500   2      
 501   2                              *( EP0BUF+0 ) = FPGA_Port ;
 502   2      
 503   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 504   2                              EP0BCL = GP_GET_FPGA_Len;                       //Arm endpoint with 3 bytes to transfer
 505   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 506   2                              break ;
 507   2      
 508   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»ØXµç»ú×´Ì¬Öµ = 1BYTE
 509   2                      case GP_GET_XMot:
 510   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 511   2      
 512   2                              *( EP0BUF+0 ) = X_Mot_State ;           //Xµç»ú×´Ì¬Öµ
 513   2      
 514   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 515   2                              EP0BCL = GP_GET_XMot_Len;                       //Arm endpoint with 3 bytes to transfer
 516   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 517   2                              break ;
 518   2      
 519   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»ØYµç»ú×´Ì¬Öµ = 1BYTE
 520   2                      case GP_GET_YMot:
 521   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 522   2      
 523   2                              *( EP0BUF+0 ) = Y_Mot_State ;           //Yµç»ú×´Ì¬Öµ
 524   2      
 525   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 526   2                              EP0BCL = GP_GET_YMot_Len;                       //Arm endpoint with 3 bytes to transfer
 527   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 528   2                              break ;
 529   2      
 530   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,µÈ´ýXYµç»úÍ£Ö¹£¬·µ»Ø×´Ì¬Öµ = 1BYTE
 531   2                      case GP_GET_XYStop:
 532   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 533   2      
 534   2                              while( Y_Mot_State != Mot_State_Hold ) ;        //µÈ´ýYµç»úÍ£Ö¹
 535   2                              while( X_Mot_State != Mot_State_Hold ) ;        //µÈ´ýXµç»úÍ£Ö¹
 536   2      
 537   2                              *( EP0BUF+0 ) = 0 ;                                     //×´Ì¬Öµ
 538   2      
 539   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 540   2                              EP0BCL = GP_GET_XYStop_Len;             //Arm endpoint with 3 bytes to transfer
 541   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 542   2                              break ;
 543   2      
 544   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,»Ø¶Á×¢²áÐÅÏ¢ = 16BYTE
 545   2                      case GP_GET_Regist:
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 10  

 546   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 547   2      
 548   2                              addr = &EEPROM_Register + 20 ;          //Éè¶¨RegisterµØÖ· + codeÓëEEPROMµØÖ·²î16+°²È«×Ö½Ú4
 549   2                              bc   = GP_GET_Regist_Len ;                      //RegisterÊý¾Ý³¤¶È
 550   2      
 551   2                              EEPROMRead( addr , (WORD)bc , (WORD)EP0BUF ) ;          //¶Á×¢²áÐÅÏ¢
 552   2      
 553   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 554   2                              EP0BCL = GP_GET_Regist_Len;             //Arm endpoint with 3 bytes to transfer
 555   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 556   2                              break ;
 557   2      
 558   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»Ø:iBYTE(¼¤¹âºÅ),1WORD(ÁÁ¶È)
 559   2                      case GP_GET_Light:
 560   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 561   2      
 562   2      
 563   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 564   2                              EP0BCL = GP_GET_Light_Len;                      //Arm endpoint with 3 bytes to transfer
 565   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 566   2                              break ;
 567   2      
 568   2      /*
 569   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»ØÄÚ¡¢ÍâÎÂ¶ÈÖµ = 2WORD(ÄÚ¡¢Íâ²¿ÎÂ¶È)
 570   2                      case GP_GET_Temp:
 571   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 572   2      
 573   2                              len = Temp_Read( 0 ) ;                                  //ÄÚ²¿ÎÂ¶È
 574   2                              *( EP0BUF+0 ) = len & 0xff ;                    //ÎÂ¶ÈÖµµÍ8Î»
 575   2                              *( EP0BUF+1 ) = ( len >> 8 ) & 0xff ;   //ÎÂ¶ÈÖµ¸ß8Î»
 576   2      
 577   2                              len = Temp_Read( 1 ) ;                                  //Íâ²¿ÎÂ¶È
 578   2                              *( EP0BUF+2 ) = len & 0xff ;                    //ÎÂ¶ÈÖµµÍ8Î»
 579   2                              *( EP0BUF+3 ) = ( len >> 8 ) & 0xff ;   //ÎÂ¶ÈÖµ¸ß8Î»
 580   2      
 581   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 582   2                              EP0BCL = GP_GET_Temp_Len;                   //Arm endpoint with 3 bytes to transfer
 583   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 584   2                              break ;
 585   2      */
 586   2      
 587   2      /*
 588   2                      //-----ÏìÓ¦->½ÓÊÜÏìÓ¦´¦Àí,·µ»Ø²âÊÔ = 1BYTE
 589   2                      case GP_GET_COM_Test:
 590   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 591   2      
 592   2                              *( EP0BUF+0 ) = 55 ;
 593   2      
 594   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 595   2                              EP0BCL = GP_GET_COM_Test_Len;           //Arm endpoint with 3 bytes to transfer
 596   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 597   2                              break ;
 598   2      */
 599   2      
 600   2      
 601   2                      //-----Ö¸Áî->Ö¸Ê¾Êý¾Ý´«ËÍÍê±Ï1BYTE--------------
 602   2                      case GP_COM_Data_Ok:
 603   2                              EP0BCH = 0 ;
 604   2                              EP0BCL = 0 ;
 605   2                              while( EP0CS & bmEPBUSY ) ;                     //µÈ´ý¶Ëµã0¿ÕÏÐ
 606   2      
 607   2                              RAM_OK = TRUE ;                                         //Êý¾Ý×¼±¸ºÃ
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 11  

 608   2      
 609   2                              if( *( EP0BUF+0 ) == GP_RAM_Null )      //ÊÇ·ñÎª¿ÕÊý¾Ý
 610   2                                      RAM_Null = TRUE ;
 611   2                              else
 612   2                                      RAM_Null = FALSE ;
 613   2      
 614   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 615   2                              EP0BCL = 0 ;
 616   2                              break;
 617   2      
 618   2                      //-----Ö¸Áî->Êä³ö½áÊø-----
 619   2                      case GP_COM_End:
 620   2      
 621   2                              Print_End = TRUE;                                       //Ö¸Ê¾Í£Ö¹
 622   2      
 623   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 624   2                              EP0BCL = 0 ;
 625   2                              break;
 626   2      
 627   2                      //**********************************
 628   2                      //-----Ö¸Áî->Xµç»úÒÆ¶¯--------------
 629   2                      case GP_COM_X_Move:                                             //1BYTE(·½Ïò),1WORD(ËÙ¶È),1WORD(³¤¶È)
 630   2                              EP0BCH = 0 ;
 631   2                              EP0BCL = 0 ;
 632   2                              while( EP0CS & bmEPBUSY ) ;                     //µÈ´ý¶Ëµã0¿ÕÏÐ
 633   2      
 634   2                              i = *( EP0BUF+1 ) ;                                     //Xµç»úËÙ¶È
 635   2                              i |= *( EP0BUF+2 ) << 8 ; 
 636   2      
 637   2                              len  = *( EP0BUF+3 ) ;                          //Éè¶¨Xµç»úÒÆ¶¯³¤¶È
 638   2                              len |= *( EP0BUF+4 ) << 8 ;
 639   2      
 640   2                              X_MOT_Move( *( EP0BUF ), i, len );      //Xµç»úÒÆ¶¯
 641   2      
 642   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 643   2                              EP0BCL = 0 ;
 644   2                              break;
 645   2      
 646   2                      //-----Ö¸Áî->Xµç»úÍ£Ö¹-----
 647   2                      case GP_COM_X_Stop:
 648   2                              X_MOT_Stop() ;
 649   2      
 650   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 651   2                              EP0BCL = 0 ;
 652   2                              break;
 653   2      
 654   2                      //-----Ö¸Áî->Xµç»ú¸´Î»-----
 655   2                      case GP_COM_X_Reset:
 656   2                              GP_State = GP_OK_X_Mot ;
 657   2                              if( X_MOT_Reset() == FALSE )            //X_MOT¸´Î»
 658   2                                      GP_State = GP_Error_X_Mot ;             //X_MOT¹ÊÕÏ     
 659   2      
 660   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 661   2                              EP0BCL = 0 ;
 662   2                              break;
 663   2      
 664   2                      //-----Ö¸Áî->Xµç»úÊÍ·Å  -----
 665   2                      case GP_COM_X_Free:
 666   2      //                      X_Mot_EN = Motor_EN_Free ;                      //X_µç»úÊÍ·Å
 667   2                              X_Mot_State = Mot_State_Free ;          //µç»ú×´Ì¬
 668   2      
 669   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 12  

 670   2                              EP0BCL = 0 ;
 671   2                              break;
 672   2      
 673   2                      //-----Ö¸Áî->Xµç»úËø¶¨  -----
 674   2                      case GP_COM_X_Hold:
 675   2      //                      X_Mot_EN = Motor_EN_Hold ;                      //X_µç»úËø¶¨
 676   2                              X_Mot_State = Mot_State_Hold ;          //µç»ú×´Ì¬
 677   2      
 678   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 679   2                              EP0BCL = 0 ;
 680   2                              break;
 681   2      
 682   2                      //**********************************
 683   2                      //-----Ö¸Áî->Yµç»úÒÆ¶¯--------------
 684   2                      case GP_COM_Y_Move:                                             //1BYTE(·½Ïò),1WORD(³¤¶È)
 685   2                              EP0BCH = 0 ;
 686   2                              EP0BCL = 0 ;
 687   2                              while( EP0CS & bmEPBUSY ) ;                     //µÈ´ý¶Ëµã0¿ÕÏÐ
 688   2      
 689   2                              len  = *( EP0BUF+1 ) ;                          //Éè¶¨Yµç»úÒÆ¶¯³¤¶È
 690   2                              len |= *( EP0BUF+2 ) << 8 ;
 691   2      
 692   2                              Y_MOT_Move( *( EP0BUF ), len ) ;        //Yµç»úÒÆ¶¯
 693   2      
 694   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 695   2                              EP0BCL = 0 ;
 696   2                              break;
 697   2      
 698   2                      //-----Ö¸Áî->Yµç»úÍ£Ö¹-----
 699   2                      case GP_COM_Y_Stop:
 700   2                              Y_MOT_Stop( ) ;
 701   2      
 702   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 703   2                              EP0BCL = 0 ;
 704   2                              break;
 705   2      
 706   2                      //-----Ö¸Áî->Yµç»ú¸´Î»-----
 707   2                      case GP_COM_Y_Reset:
 708   2                              
 709   2                              GP_State = GP_OK_Y_Mot ;
 710   2                              if( Y_MOT_Reset() == FALSE )            //Y_MOT×Ô¼ì
 711   2                                      GP_State = GP_Error_Y_Mot ;             //Y_MOT¹ÊÕÏ     
 712   2      
 713   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 714   2                              EP0BCL = 0 ;
 715   2                              break;
 716   2      
 717   2                      //-----Ö¸Áî->Yµç»úÊÍ·Å  -----
 718   2                      case GP_COM_Y_Free:
 719   2                              Y_Mot_EN = Motor_EN_Free ;                      //Y_µç»úÊÍ·Å
 720   2                              Y_Mot_State = Mot_State_Free ;          //Y_µç»ú×´Ì¬
 721   2      
 722   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 723   2                              EP0BCL = 0 ;
 724   2                              break;
 725   2      
 726   2                      //-----Ö¸Áî->Yµç»úËø¶¨  -----
 727   2                      case GP_COM_Y_Hold:
 728   2                              Y_Mot_EN = Motor_EN_Hold ;                      //Y_µç»úËø¶¨
 729   2                              Y_Mot_State = Mot_State_Hold ;          //Y_µç»ú×´Ì¬
 730   2      
 731   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 13  

 732   2                              EP0BCL = 0 ;
 733   2                              break;
 734   2      
 735   2                 //********FPGA**************************
 736   2                      //-----Ö¸Áî->FPGAÐ´--------
 737   2                      case GP_COM_FPGA_Write:                 //1BYTE(FPGAÖ¸Áî),1BYTE(²ÎÊýH),1BYTE(²ÎÊýM),1BYTE(²ÎÊýL)
 738   2                              EP0BCH = 0 ;
 739   2                              EP0BCL = 0 ;
 740   2                              while( EP0CS & bmEPBUSY ) ;                     //µÈ´ý¶Ëµã0¿ÕÏÐ
 741   2      
 742   2                              FPGA_Write( *( EP0BUF+0 ) , *( EP0BUF+1 ), *( EP0BUF+2 ), *( EP0BUF+3 ) ) ;
 743   2      
 744   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 745   2                              EP0BCL = 0 ;
 746   2                              break;
 747   2      
 748   2                      //**********************************
 749   2                      //-----Ö¸Áî->½ÓÊÜÉèÖÃLaserµã--------
 750   2                      case GP_COM_Laser_On:
 751   2      
 752   2                              Laser_EN = Laser_On ;           //´ò¿ªLaser             
 753   2      
 754   2                              EP0BCH = 0 ;
 755   2                              EP0BCL = 0 ;
 756   2                              break;
 757   2      
 758   2                      //-----Ö¸Áî->¹Ø±ÕLaser-----
 759   2                      case GP_COM_Laser_Off:
 760   2      
 761   2                              Laser_EN = Laser_Off ;          //¹Ø±ÕLaser
 762   2      
 763   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 764   2                              EP0BCL = 0 ;
 765   2                              break;
 766   2      
 767   2                      //-----Ö¸Áî->LaserÂö³å²âÊÔ-----
 768   2                      case GP_COM_Laser_Plus:
 769   2                              EP0BCH = 0 ;
 770   2                              EP0BCL = 0 ;
 771   2                              while( EP0CS & bmEPBUSY ) ;             //µÈ´ý¶Ëµã0¿ÕÏÐ
 772   2      
 773   2                              len  = *( EP0BUF+0 ) ;                  //È¡Laser²âÊÔÊ±³£Êý
 774   2                              len |= *( EP0BUF+1 ) << 8 ;
 775   2      
 776   2                              Laser_Plus_Set( len ) ;                 //Éè¶¨LaserÂö³å
 777   2      
 778   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 779   2                              EP0BCL = 0 ;
 780   2                              break;
 781   2      
 782   2                      //-----Ö¸Áî->LaserÇý¶¯Ä£Ê½ÉèÖÃ-----
 783   2                      case GP_COM_Laser_Mode:
 784   2                              EP0BCH = 0 ;
 785   2                              EP0BCL = 0 ;
 786   2                              while( EP0CS & bmEPBUSY ) ;                     //µÈ´ý¶Ëµã0¿ÕÏÐ
 787   2      
 788   2                              if( *( EP0BUF+0 ) == 0 )                        //ÊÇ·ñÊä³öÄ£Ê½
 789   2                                      PortE_OUT &= ~Laser_Mode ;              //LaserÊä³öÄ£Ê½
 790   2                              else
 791   2                                      PortE_OUT |= Laser_Mode ;               //LaserÐ£Õý²ÎÊýÉèÖÃÄ£Ê½
 792   2      
 793   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 14  

 794   2                              EP0BCL = 0 ;
 795   2                              break;
 796   2      
 797   2                      //-----Ö¸Áî->Ð´×¢²áÐÅÏ¢ = 16BYTE
 798   2                      case GP_COM_Regist:
 799   2                              EP0BCH = 0 ;
 800   2                              EP0BCL = 0 ;
 801   2                              while(EP0CS & bmEPBUSY);                //µÈ´ý¶Ëµã0¿ÕÏÐ
 802   2      
 803   2                              addr = &EEPROM_Register + 20 ;                          //Éè¶¨RegisterµØÖ· + codeÓëEEPROMµØÖ·²î16+°²È«×Ö½Ú4
 804   2                              bc   = GP_GET_Regist_Len ;                                      //RegisterÊý¾Ý³¤¶È
 805   2      
 806   2                              EEPROMWrite( addr, bc, (WORD)EP0BUF );          //Ð´×¢²áÐÅÏ¢
 807   2      
 808   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 809   2                              EP0BCL = 0 ;
 810   2                              break ;
 811   2      
 812   2      /*              //-----Ö¸Áî->¼¤¹â±ê³ßÉèÖÃ-----
 813   2                      case GP_COM_Indic:
 814   2                              EP0BCH = 0 ;
 815   2                              EP0BCL = 0 ;
 816   2                              while( EP0CS & bmEPBUSY ) ;             //µÈ´ý¶Ëµã0¿ÕÏÐ
 817   2      
 818   2                              Indic_Flash = FALSE ;                   //¹Ø±ÕÉÁ¶¯
 819   2      
 820   2                              if( *( EP0BUF+0 ) == 2 )                //ÊÇ·ñ¼¤¹â±ê³ßÉÁ¶¯?
 821   2                                      Indic_Flash = TRUE ;            //ÉÁ¶¯
 822   2                              else if( *( EP0BUF+0 ) == 1 )   //ÊÇ·ñ¼¤¹â±ê³ß´ò¿ª?
 823   2                                      PortE_OUT &= ~Indic_Red ;       //RED¼¤¹âÖ¸Ê¾ÁÁ=0
 824   2                              else
 825   2                                      PortE_OUT |=  Indic_Red ;       //RED¼¤¹âÖ¸Ê¾Ãð=1
 826   2      
 827   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 828   2                              EP0BCL = 0 ;
 829   2                              break;
 830   2      */
 831   2                      //-----Ö¸Áî->ÁÁ¶ÈADÉèÖÃ-----
 832   2                      case GP_COM_Light:
 833   2                              EP0BCH = 0 ;
 834   2                              EP0BCL = 0 ;
 835   2                              while( EP0CS & bmEPBUSY ) ;             //µÈ´ý¶Ëµã0¿ÕÏÐ
 836   2      
 837   2      
 838   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 839   2                              EP0BCL = 0 ;
 840   2                              break;
 841   2      
 842   2                      //-----Ö¸Áî->ÉèÖÃADJ_RAMµØÖ·= 2BYTE
 843   2                      case GP_COM_ADJ_Addr:
 844   2                              EP0BCH = 0 ;
 845   2                              EP0BCL = 0 ;
 846   2                              while(EP0CS & bmEPBUSY);                                //µÈ´ý¶Ëµã0¿ÕÏÐ
 847   2      
 848   2                              ADJ_RAM_Addr  = *( EP0BUF+0 ) ;                 //ADJ_RAMµØÖ·
 849   2                              ADJ_RAM_Addr |= *( EP0BUF+1 ) << 8 ;
 850   2      
 851   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 852   2                              EP0BCL = 0 ;
 853   2                              break ;
 854   2      
 855   2                      //-----Ö¸Áî->ADJÐ´Èë    = 16BYTE
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 15  

 856   2                      case GP_COM_ADJ_Write:
 857   2                              EP0BCH = 0 ;
 858   2                              EP0BCL = 0 ;
 859   2                              while(EP0CS & bmEPBUSY);                                //µÈ´ý¶Ëµã0¿ÕÏÐ
 860   2      
 861   2                              for( i = 0 ; i < 16 ; i++ )
 862   2                              {
 863   3                                      ADJ_Write( ADJ_RAM_Addr , *( EP0BUF + i ) ) ;           //Ð´ADJ_RAM
 864   3                                      ADJ_RAM_Addr++ ;
 865   3                              }
 866   2      
 867   2                              EP0BCH = 0 ;// Clear bytecount to allow new data in; also stops NAKing
 868   2                              EP0BCL = 0 ;
 869   2                              break ;
 870   2                      
 871   2                      //-----ÏìÓ¦->ADJ¶ÁÈ¡ = 16BYTE
 872   2                      case GP_GET_ADJ_Read:
 873   2                              while(EP0CS & bmEPBUSY);                        //µÈ´ý¶Ëµã0¿ÕÏÐ
 874   2      
 875   2                              for( i = 0 ; i < 16 ; i++ )
 876   2                              {
 877   3                                      *( EP0BUF+i ) = ADJ_Read( ADJ_RAM_Addr ) ;
 878   3                                      ADJ_RAM_Addr++ ;
 879   3                              }
 880   2      
 881   2                              EP0BCH = 0;                                                     //Í¨Öª·¢ËÍ
 882   2                              EP0BCL = GP_GET_ADJ_Read_Len;           //Arm endpoint with 3 bytes to transfer
 883   2                              EP0CS |= bmHSNAK;                                       //Acknowledge handshake phase of device request
 884   2                              break ;
 885   2      
 886   2      
 887   2      
 888   2                      //**********************************
 889   2                      //-----EZ-USB Control Panel EEPROM,¶ÁÐ´--------
 890   2                      case VR_DB_FX:
 891   2                              DB_Addr = 0x01;         //TPM: need to assert double byte
 892   2                              I2C_Addr |= 0x01;       //TPM: need to assert double byte
 893   2              // NOTE: This case falls through !
 894   2                      case VR_RAM:
 895   2                      case VR_EEPROM:
 896   2                              addr = SETUPDAT[2];             // Get address and length
 897   2                              addr |= SETUPDAT[3] << 8;
 898   2                              len = SETUPDAT[6];
 899   2                              len |= SETUPDAT[7] << 8;
 900   2                              // Is this an upload command ?
 901   2                              if(SETUPDAT[0] == VR_UPLOAD)
 902   2                              {
 903   3                                      while(len)                                      // Move requested data through EP0IN 
 904   3                                      {                                                       // one packet at a time.
 905   4      
 906   4                              while(EP0CS & bmEPBUSY);
 907   4      
 908   4                                              if(len < EP0BUFF_SIZE)
 909   4                                                      bc = len;
 910   4                                              else
 911   4                                                      bc = EP0BUFF_SIZE;
 912   4      
 913   4                                              // Is this a RAM upload ?
 914   4                                              if(SETUPDAT[1] == VR_RAM)
 915   4                                              {
 916   5                                                      for(i=0; i<bc; i++)
 917   5                                                              *(EP0BUF+i) = *((BYTE xdata *)addr+i);
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 16  

 918   5                                              }
 919   4                                              else
 920   4                                              {
 921   5                                                      for(i=0; i<bc; i++)
 922   5                                                              *(EP0BUF+i) = 0xcd;
 923   5                                                      EEPROMRead(addr,(WORD)bc,(WORD)EP0BUF);
 924   5                                              }
 925   4      
 926   4                                              EP0BCH = 0;
 927   4                                              EP0BCL = (BYTE)bc; // Arm endpoint with # bytes to transfer
 928   4      
 929   4                                              addr += bc;
 930   4                                              len -= bc;
 931   4      
 932   4                                      }
 933   3                              }
 934   2                              // Is this a download command ?
 935   2                              else if(SETUPDAT[0] == VR_DOWNLOAD)
 936   2                              {
 937   3                                      while(len)                                      // Move new data through EP0OUT 
 938   3                                      {                                                       // one packet at a time.
 939   4                                              // Arm endpoint - do it here to clear (after sud avail)
 940   4                                              EP0BCH = 0;
 941   4                                              EP0BCL = 0; // Clear bytecount to allow new data in; also stops NAKing
 942   4      
 943   4                                              while(EP0CS & bmEPBUSY);
 944   4      
 945   4                                              bc = EP0BCL; // Get the new bytecount
 946   4      
 947   4                                              // Is this a RAM download ?
 948   4                                              if(SETUPDAT[1] == VR_RAM)
 949   4                                              {
 950   5                                                      for(i=0; i<bc; i++)
 951   5                                                               *((BYTE xdata *)addr+i) = *(EP0BUF+i);
 952   5                                              }
 953   4                                              else
 954   4                                                      EEPROMWrite(addr,bc,(WORD)EP0BUF);
 955   4      
 956   4                                              addr += bc;
 957   4                                              len -= bc;
 958   4                                      }
 959   3                              }
 960   2                              break;
 961   2      
 962   2                      //-----TEST-----
 963   2                      default:
 964   2                              return (TRUE);
 965   2              }
 966   1      
 967   1              return(FALSE); // no error; command handled OK   
 968   1      
 969   1      }
 970          
 971          /*
 972          //********System_×Ô¼ì*******
 973          void System_Check( void )
 974          {
 975          //1:FPGA¼ì²â
 976                  if( FPGA_Check( ) == FALSE )
 977                  {
 978                          GP_State = GP_Error_FPGA ;              //FPGA¹ÊÕÏ      
 979                          return ;
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 17  

 980                  }
 981                                                                                          //Îª±ÜÃâUSBÁ¬½Ó´íÎó
 982                  if( GotSUD )                                            //ÅÐ¶Ï¶Ëµã0ÊÇ·ñÓÐUSBÇëÇó            
 983                  {
 984                          SetupCommand();                                 //ÈôÓÐÇëÇó£¬½øÈëÇëÇó´¦Àí         
 985                          GotSUD = FALSE;            
 986                  }
 987          
 988          //2:RAM¼ì²â
 989                  if( Ram_Check() == FALSE )                      //RAM_×Ô¼ì
 990                  {
 991                          GP_State = GP_Error_RAM ;               //RAM¹ÊÕÏ       
 992                          return ;
 993                  }
 994          
 995                  if( GotSUD )                                            //ÅÐ¶Ï¶Ëµã0ÊÇ·ñÓÐUSBÇëÇó            
 996                  {
 997                          SetupCommand();                                 //ÈôÓÐÇëÇó£¬½øÈëÇëÇó´¦Àí         
 998                          GotSUD = FALSE;            
 999                  }
1000          
1001          //3:Y_Mot¼ì²â
1002                  if( Y_MOT_Reset() == FALSE )            //Y_MOT×Ô¼ì
1003                  {
1004                          GP_State = GP_Error_Y_Mot ;             //Y_MOT¹ÊÕÏ     
1005                          return ;
1006                  }
1007          
1008                  if( GotSUD )                                            //ÅÐ¶Ï¶Ëµã0ÊÇ·ñÓÐUSBÇëÇó            
1009                  {
1010                          SetupCommand();                                 //ÈôÓÐÇëÇó£¬½øÈëÇëÇó´¦Àí         
1011                          GotSUD = FALSE;            
1012                  }
1013          
1014          //4:X_Mot¼ì²â
1015                  if( X_MOT_Reset() == FALSE )            //X_MOT×Ô¼ì
1016                  {
1017                          GP_State = GP_Error_X_Mot ;             //X_MOT¹ÊÕÏ     
1018                          return ;
1019                  }
1020          
1021                  if( GotSUD )                                            //ÅÐ¶Ï¶Ëµã0ÊÇ·ñÓÐUSBÇëÇó            
1022                  {
1023                          SetupCommand();                                 //ÈôÓÐÇëÇó£¬½øÈëÇëÇó´¦Àí         
1024                          GotSUD = FALSE;            
1025                  }
1026          
1027          /*
1028          //5:Encoider¼ì²â
1029                  if( Encoder_Check() == FALSE )          //Encoder×Ô¼ì
1030                  {
1031                          GP_State = GP_Error_Encoder ;   //Encoder¹ÊÕÏ   
1032                          return ;
1033                  }
1034          
1035                  if( GotSUD )                                            //ÅÐ¶Ï¶Ëµã0ÊÇ·ñÓÐUSBÇëÇó            
1036                  {
1037                          SetupCommand();                                 //ÈôÓÐÇëÇó£¬½øÈëÇëÇó´¦Àí         
1038                          GotSUD = FALSE;            
1039                  }
1040          
1041          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 18  

1042          //6:Laser¼ì²â
1043          //      Laser_Check() ;
1044          
1045          
1046          //7:SYStem_Õý³£
1047                  GP_State        = GP_State_OK ;
1048          } 
1049          */
1050          
1051          //**********Íâ²¿ÖÐ¶Ï0
1052          void Exter_Int_0(void) interrupt 0
1053          {
1054   1      
1055   1      }
1056          
1057          //**********Íâ²¿ÖÐ¶Ï1
1058          void Exter_Int_1(void) interrupt 0
1059          {
1060   1      
1061   1      }
1062          
1063          
1064          //--------Laser-----------------------------------------
1065          //**********Time1ÖÐ¶Ï´¦Àí,ÓÃÓÚLaser²âÊÔ
1066          void Timer1_Int_0(void) interrupt 0             //***T1=CLKOUT/4;  T=250/4ns
1067          {
1068   1              Laser_EN = Laser_On ;                           //´ò¿ªLaser
1069   1      
1070   1              TR1 = FALSE ;                                           //Í£Ö¹T1¼ÆÊý
1071   1      
1072   1              TL1 = LSB( Laser_Plus_Time ) ;          //ÉèÖÃÊ±³£ÊýµÍ8Î»
1073   1          TH1 = MSB( Laser_Plus_Time ) ;              //ÉèÖÃÊ±³£Êý¸ß8Î»
1074   1      
1075   1              TR1 = TRUE ;                                            //Æô¶¯T1¼ÆÊý
1076   1      
1077   1              Laser_EN = Laser_Off ;                          //¹Ø±ÕLaser
1078   1      }
1079          
1080          //*******LaserÂö³åÉèÖÃ********
1081          void Laser_Plus_Set( WORD lTimer )              //lTimer£ºÂö³å¹Ø±ÕÊ±³£Êý£¬ lTimer= 0 £º½áÊøÂö³å²âÊÔ
1082          {
1083   1              TR1 = FALSE ;                                           //Í£Ö¹T1¼ÆÊý
1084   1              Laser_EN = Laser_Off ;                          //¹Ø±ÕLaser
1085   1      
1086   1              Laser_Plus_Time  = lTimer ;                     //±£´æLaser²âÊÔÊ±³£Êý
1087   1      
1088   1              if( Laser_Plus_Time != 0 )
1089   1              {
1090   2                      TL1 = LSB( Laser_Plus_Time ) ;  //ÉèÖÃÊ±³£ÊýµÍ8Î»
1091   2              TH1 = MSB( Laser_Plus_Time ) ;  //ÉèÖÃÊ±³£Êý¸ß8Î»
1092   2      
1093   2                      TR1 = TRUE ;                                    //Æô¶¯T1¼ÆÊý    
1094   2              }
1095   1      }
1096          
1097          
1098          /*
1099          //*******Laser_×Ô¼ì*******
1100          void Laser_Check( void )
1101          {
1102                  BYTE    AAAA , BBBB ;
1103          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 19  

1104                  if( CTS_Model == CTS_330  )                                     //»úÐÍÑ¡Ôñ
1105                          BBBB = 17 ;
1106                  else if( CTS_Model == CTS_500 )
1107                          BBBB = 33 ;
1108                  else
1109                          BBBB = 65 ;
1110          
1111          }
1112          */
1113          
1114          
1115          
1116          
1117          //----------X_µç»ú------------------------------------------------------
1118          //**********Time2ÖÐ¶Ï´¦Àí, Xµç»ú
1119          void Timer2_Int_0(void) interrupt 0     using 3                         //***T2=CLKOUT/4;  T=0.08333us //Êµ²âT_Min=3.24us
1120          {
1121   1              X_Mot_CP = Motor_CP_Plus ;                                                      //µç»úÂö³å
1122   1      
1123   1              TF2 = FALSE ;                                                                           //Timer2ÖÐ¶Ï±êÖ¾Çå³ý
1124   1      
1125   1              switch( X_Mot_State )
1126   1              {
1127   2                      //¼ÓËÙ¶Î
1128   2                      case  Mot_State_Up :                                                    //¼ÓËÙ¶Î
1129   2                              RCAP2L = LSB( X_Mot_Time[ X_Timer_ip ] ) ;      //ÖØÖÃÖµ
1130   2                              RCAP2H = MSB( X_Mot_Time[ X_Timer_ip ] ) ;      //¸ß8Î»
1131   2      
1132   2                              X_Timer_ip++ ;                                                          //Ö¸Õë+1
1133   2      
1134   2                              X_Timer_Add-- ;                                                         //¼ÓËÙ²½Êý-1
1135   2      
1136   2                              if( X_Timer_Add == 0 )                                          //ÊÇ·ñ¼ÓËÙ½áÊø?
1137   2                                      X_Mot_State = Mot_State_Run ;                   //½øÈëÔÈËÙ¶Î
1138   2      
1139   2                              break ;
1140   2      
1141   2                      //ÔÈËÙ¶Î
1142   2                      case  Mot_State_Run :                                                   //ÔÈËÙ¶Î
1143   2                              RCAP2L = X_Speed_Time_L ;                                       //ÖØÖÃÖµ
1144   2                              RCAP2H = X_Speed_Time_H ;                                       //¸ß8Î»
1145   2      
1146   2                              X_Mot_Run_Len-- ;                                                       //²½³¤-1
1147   2      
1148   2                              if ( X_Mot_Run_Len == 0 )                                       //ÊÇ·ñÔÈËÙ½áÊø?
1149   2                              {       
1150   3                                      X_Mot_State = Mot_State_Down ;                  //½øÈë¼õËÙ¶Î
1151   3                                  
1152   3                                      X_Timer_ip-- ;                                                  //Ö¸Õë-1
1153   3                              }
1154   2      
1155   2                              _nop_ ();               //ÑÓÊ±
1156   2                              _nop_ ();               //ÑÓÊ±
1157   2      //                      _nop_ ();               //ÑÓÊ±
1158   2      //                      _nop_ ();               //ÑÓÊ±
1159   2      //                      _nop_ ();               //ÑÓÊ±
1160   2      
1161   2                              break ;
1162   2      
1163   2                      //¼õËÙ¶Î
1164   2                      case  Mot_State_Down :                                                  //¼õËÙ¶Î
1165   2                              RCAP2L = LSB( X_Mot_Time[ X_Timer_ip ] ) ;      //ÖØÖÃÖµ
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 20  

1166   2                              RCAP2H = MSB( X_Mot_Time[ X_Timer_ip ] ) ;      //¸ß8Î»
1167   2      
1168   2                              if( X_Timer_ip == 0 )                                           //ÊÇ·ñ¼õËÙµ½µ×?
1169   2                              {
1170   3                                      TF2 = FALSE ;                                                   //Timer2ÖÐ¶Ï±êÖ¾Çå³ý
1171   3                                      TR2 = FALSE;                                                    //²»ÔÊÐíT2¼ÆÊý,Í£Ö¹²½½ø
1172   3                                      X_Mot_State = Mot_State_Hold ;                  //½øÈëËø¶¨
1173   3      
1174   3                              }
1175   2                              else
1176   2                                      X_Timer_ip-- ;                                                  //Ö¸Õë-1
1177   2      
1178   2                              break ;
1179   2              }
1180   1      
1181   1              X_Mot_CP = Motor_CP_Normal ;                                                                    //µç»úÂö³åÉý¸ß 22~38T
1182   1      }
1183          
1184          //**********Xµç»úÒÆ¶¯³¤¶È,µ±Stop_Bar=X_Bar_LengÊ±Æô¶¯ 
1185          //                      X_MOT_Dir:X_µç»ú·½Ïò, X_Speed_Time:X_µç»úËÙ¶ÈÊ±³£Êý, X_MOT_Len:X_µç»úÔËÐÐ³¤¶Èstep
1186          //X_Speed_Time = 65536-72000/ËÙ¶È
1187          BOOL X_MOT_Move( BOOL X_Dir, WORD X_Speed_Time , WORD X_Len )
1188          {
1189   1      //1£ºÊÇ·ñÍ£Ö¹
1190   1              if( ( X_Mot_State != Mot_State_Free) && ( X_Mot_State != Mot_State_Hold ) )             //ÊÇ·ñÕýÔÚÔËÐÐ£¿
1191   1                      return( FALSE ) ;                                               //Ê§°Ü, ÕýÔÚÔËÐÐ
1192   1      
1193   1      //2£ºÊÇ·ñËø¶¨
1194   1      //      X_Mot_EN = Motor_EN_Hold ;                                      //X_µç»ú¼ÓµçËø¶¨
1195   1      //      X_Mot_State = Mot_State_Hold ;                          //X_µç»ú×´Ì¬Éè¶¨
1196   1      
1197   1      //      EZUSB_Delay( 2 ) ;                                                      //ÑÓÊ±2ms
1198   1      
1199   1      //3£º·Ö²ð¡¢±£´æÊ±³£Êý¹©ÖÐ¶Ï³ÌÐòÓÃ
1200   1              X_Speed_Time_L = LSB( X_Speed_Time ) ;          //X_µç»úËÙ¶ÈÊ±³£Êý
1201   1              X_Speed_Time_H = MSB( X_Speed_Time ) ;
1202   1      
1203   1      //4£º¼ÆËã¼ÓËÙ²½³¤
1204   1              for ( X_Timer_Add = 0 ; X_Timer_Add < X_Step_Add ; X_Timer_Add++ )                              //¼ÆËã¼ÓËÙ²½³¤
1205   1              {
1206   2                      if( X_Mot_Time[ X_Timer_Add ] > X_Speed_Time )          //ÊÇ·ñÒÑ´ïµ½ËÙ¶È£¿      
1207   2                              break ;
1208   2      
1209   2                      if( 2 * X_Timer_Add >= X_Len )                  //ÊÇ·ñÒÑµ½´ï»ò³¬¹ý³¤¶È?
1210   2                          break ;
1211   2              }
1212   1      
1213   1              X_Timer_Add = X_Timer_Add - 1 ;                         //²½³¤-1
1214   1      
1215   1      //5£º¼ÆËãÔÈËÙ²½³¤
1216   1              X_Mot_Run_Len = X_Len - 2 *  X_Timer_Add ;      //¼ÆËãÔÈËÙ²½³¤
1217   1      
1218   1      //6£ºÊÇ·ñ³¬³¤   
1219   1              if( X_Mot_Run_Len > X_Max_Len )
1220   1                      return( FALSE ) ;                                               //³¬³¤£¬Ê§°Ü¡£
1221   1      
1222   1      //7£ºÉè¶¨X_µç»ú·½Ïò
1223   1              X_Mot_Dir = X_Dir ;                                             //Éè¶¨X_µç»ú·½Ïò
1224   1      
1225   1              X_Timer_ip = 0 ;                                                        //Ê±³£ÊýÖ¸Õë
1226   1      
1227   1              TL2 = RCAP2L = LSB( X_Mot_Time[ 0 ] ) ;         //ÉèÖÃÊ±³£ÊýµÍ8Î»
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 21  

1228   1          TH2 = RCAP2H = MSB( X_Mot_Time[ 0 ] ) ;             //ÉèÖÃÊ±³£Êý¸ß8Î»
1229   1      
1230   1              X_Mot_State = Mot_State_Up ;                            //½øÈë¼ÓËÙ¶Î
1231   1      
1232   1              TR2 = TRUE ;                                                            //Æô¶¯T2¼ÆÊý
1233   1      
1234   1              return( TRUE ) ; 
1235   1      }
1236          
1237          //**********Xµç»úÍ£Ö¹
1238          void X_MOT_Stop( void )
1239          {
1240   1              if( ( X_Mot_State == Mot_State_Free) || ( X_Mot_State == Mot_State_Hold ) )             //ÊÇ·ñÃ»ÓÐÔËÐÐ£¿
1241   1                      return ;                                                                //·µ»Ø, Ã»ÓÐÔËÐÐ
1242   1      
1243   1              X_Mot_State = Mot_State_Down ;                          //½øÈë¼õËÙ¶Î
1244   1      }
1245          
1246          //********X_µç»ú¸´Î»
1247          BOOL X_MOT_Reset( void )
1248          {
1249   1      //1:ÊÇ·ñÕýÔÚÔËÐÐ£¿
1250   1              if( ( X_Mot_State != Mot_State_Free) && ( X_Mot_State != Mot_State_Hold ) )             //ÊÇ·ñÕýÔÚÔËÐÐ£¿
1251   1                      return( FALSE ) ;                                                                       //·ÅÆú, ÕýÔÚÔËÐÐ
1252   1      
1253   1      //2:ÊÇ·ñÔÚ¼ì²âÎ»ÖÃÉÏ?
1254   1              if( X_Mot_Pos == X_Pos_On )                                                             //ÊÇ·ñÔÚ¼ì²âÎ»ÖÃÉÏ?
1255   1              {
1256   2                      X_MOT_Move( X_Dir_Lift , X_Low_Speed, X_Step_50mm );//ÔÚ¼ì²âÎ»ÖÃÉÏ,Ïò×óÒÆ¶¯50mm
1257   2      
1258   2                      while( X_Mot_State != Mot_State_Hold ) ;                        //µÈ´ýµç»úÍ£Ö¹
1259   2      
1260   2                      if( X_Mot_Pos == X_Pos_On )                                                     //ÊÇ·ñÈÎÔÚ¼ì²âÎ»ÖÃÉÏ?
1261   2                      {
1262   3                              X_Mot_State = Mot_State_Free ;                                  //µç»ú×´Ì¬
1263   3      
1264   3                              return( FALSE ) ;                                                               //ÈÎÔÚ¼ì²âÎ»ÖÃÉÏ,¸´Î»Ê§°Ü
1265   3                      }
1266   2      
1267   2                      EZUSB_Delay( 100 ) ;                                                            //ÑÓÊ±100ms
1268   2              }
1269   1      
1270   1      //3:Ñ°ÕÒÎ»ÖÃ
1271   1              X_MOT_Move( X_Dir_Right , X_Low_Speed , X_Step_2000mm );//ÏòÓÒÒÆ¶¯1000mm
1272   1              
1273   1              while( X_Mot_Pos != X_Pos_On )                                                  //ÊÇ·ñ²»ÔÚ¼ì²âÎ»ÖÃÉÏ?
1274   1              {
1275   2                      if( X_Mot_State == Mot_State_Hold )                                     //ÊÇ·ñÒÑ¾­ÒÆ¶¯1000mm?
1276   2                      {
1277   3                              X_Mot_State = Mot_State_Free ;                                  //µç»ú×´Ì¬
1278   3      
1279   3                              return( FALSE ) ;                                                               //ÈÎÎ´µ½¼ì²âÎ»ÖÃÉÏ,¸´Î»Ê§°Ü
1280   3                      }
1281   2              }
1282   1              
1283   1              X_Mot_State = Mot_State_Down ;                                                  //½øÈë¼õËÙ¶Î
1284   1      
1285   1              while( X_Mot_State != Mot_State_Hold );                                 //µÈ´ýµç»úÍ£Ö¹
1286   1      
1287   1              EZUSB_Delay( 100 ) ;                                                                    //ÑÓÊ±100ms
1288   1      
1289   1      //4:Ïò×óÒÆ¶¯
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 22  

1290   1              X_MOT_Move( X_Dir_Lift , X_Low_Speed , X_Step_50mm ) ;  //Ïò×óÒÆ¶¯50mm
1291   1              
1292   1              while( X_Mot_State != Mot_State_Hold ) ;                                //µÈ´ýµç»úÍ£Ö¹
1293   1      
1294   1              EZUSB_Delay( 100 ) ;                                                                    //ÑÓÊ±100ms
1295   1      
1296   1      //5:ÔÙ´ÎÑ°ÕÒÎ»ÖÃ
1297   1              X_MOT_Move( X_Dir_Right , X_Low_Speed , X_Step_2000mm );//ÏòÓÒÒÆ¶¯1000mm
1298   1              
1299   1              while( X_Mot_Pos != X_Pos_On )                                                  //ÊÇ·ñ²»ÔÚ¼ì²âÎ»ÖÃÉÏ?
1300   1              {
1301   2                      if( X_Mot_State == Mot_State_Hold )                                     //ÊÇ·ñÒÑ¾­ÒÆ¶¯1000mm?
1302   2                      {
1303   3                              X_Mot_State = Mot_State_Free ;                                  //µç»ú×´Ì¬
1304   3      
1305   3                              return( FALSE ) ;                                                               //ÈÎÎ´µ½¼ì²âÎ»ÖÃÉÏ,¸´Î»Ê§°Ü
1306   3                      }
1307   2              }
1308   1              
1309   1              X_Mot_State = Mot_State_Down ;                                                  //½øÈë¼õËÙ¶Î
1310   1      
1311   1              while( X_Mot_State != Mot_State_Hold );                                 //µÈ´ýµç»úÍ£Ö¹
1312   1      
1313   1              EZUSB_Delay( 100 ) ;                                                                    //ÑÓÊ±100ms
1314   1      
1315   1      //6:Ïò×óÒÆ¶¯µ½ÁãÎ»ÖÃ
1316   1              X_MOT_Move( X_Dir_Lift , X_Low_Speed , X_Step_5mm ) ;   //ÔÚ¼ì²âÎ»ÖÃÉÏ,Ïò×óÒÆ¶¯5mm
1317   1      
1318   1          while( X_Mot_State != Mot_State_Hold );                                     //µÈ´ýµç»úÍ£Ö¹
1319   1      
1320   1              return( TRUE ) ;                                                                                //¸´Î»Íê³É
1321   1      }
1322          
1323          //----------Y_µç»ú------------------------------------------------------
1324          //**********Time0ÖÐ¶Ï´¦Àí, Yµç»ú
1325          void Timer0_Int_0(void) interrupt 0                             //***T0=CLKOUT/4;  T=0.08333us// Êµ²âT_min=4.6us
1326          {
1327   1              Y_Mot_CP = Motor_CP_Plus ;                                      //µç»úÂö³å
1328   1                      
1329   1              TR0 = FALSE ;                                                           //Í£Ö¹¼ÆÊý
1330   1      
1331   1              TL0 = LSB( Y_Mot_Time[ Y_Timer_ip ] ) ;         //ÉèÖÃÊ±³£ÊýµÍ8Î»
1332   1          TH0 = MSB( Y_Mot_Time[ Y_Timer_ip ] ) ;             //ÉèÖÃÊ±³£Êý¸ß8Î»
1333   1              TR0 = TRUE ;                                                            //Æô¶¯T0¼ÆÊý
1334   1      
1335   1              switch( Y_Mot_State )
1336   1              {
1337   2                      case  Mot_State_Up :                                    //¼ÓËÙ¶Î
1338   2                              Y_Timer_ip++ ;                                          //Ö¸Õë+1
1339   2      
1340   2                              if( Y_Timer_ip == Y_Add_Step - 1 )      //ÊÇ·ñ¼ÓËÙµ½¶¥?
1341   2                                      Y_Mot_State = Mot_State_Run ;   //½øÈëÔÈËÙ¶Î
1342   2      
1343   2                              break ;
1344   2      
1345   2                      case  Mot_State_Run :                                   //ÔÈËÙ¶Î
1346   2                              Y_Mot_Run_Len-- ;                                       //²½³¤-1
1347   2      
1348   2                              if ( Y_Mot_Run_Len == 0 )                       //ÊÇ·ñÔÈËÙ½áÊø?
1349   2                                      Y_Mot_State = Mot_State_Down ;  //½øÈë¼õËÙ¶Î
1350   2      
1351   2                              break ;
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 23  

1352   2      
1353   2                      case  Mot_State_Down :                                  //¼õËÙ¶Î
1354   2                              if( Y_Timer_ip == 0 )
1355   2                                      Y_Mot_State = Mot_State_End ;   //½øÈë½áÊø
1356   2                              else
1357   2                              Y_Timer_ip-- ;                                  //Ö¸Õë-1 
1358   2      
1359   2                              break ;
1360   2      
1361   2                 case  Mot_State_End :                                        //½áÊø
1362   2                              Y_Mot_State = Mot_State_Hold ;          //½øÈëËø¶¨
1363   2      
1364   2                              TR0 = FALSE ;                                           //Í£Ö¹¼ÆÊý
1365   2      
1366   2                              break ;
1367   2               }
1368   1      
1369   1              Y_Mot_CP = Motor_CP_Normal ;                            //µç»úÂö³å³£Ì¬
1370   1              
1371   1      }
1372          
1373          //**********Yµç»úÒÆ¶¯³¤¶È,µ±Stop_Bar=X_Bar_LengÊ±Æô¶¯ 
1374          //                      Y_Dir:Y_µç»ú·½Ïò, Y_Len:Y_µç»úÔËÐÐ²½³¤£¬Y_Len>60steps
1375          //                      ·µ»ØTRUEÆô¶¯£»·µ»ØFALSEÊ§°Ü£¬ÕýÔÚÔËÐÐ
1376          BOOL Y_MOT_Move( BOOL Y_Dir, WORD Y_Len )
1377          {
1378   1              if( ( Y_Mot_State != Mot_State_Free) && ( Y_Mot_State != Mot_State_Hold ) )             //ÊÇ·ñÕýÔÚÔËÐÐ£¿
1379   1                      return( FALSE ) ;                                               //Ê§°Ü, ÕýÔÚÔËÐÐ
1380   1      
1381   1              if( Y_Len < 2 * Y_Add_Step - 1 )
1382   1                      return( FALSE ) ;                                               //Ê§°Ü, Ð¡ÓÚ2¸öY_Add_Step
1383   1               
1384   1              Y_Mot_EN = Motor_EN_Hold ;                                      //Y_µç»ú¼ÓµçËø¶¨
1385   1              Y_Mot_State = Mot_State_Hold ;                          //Y_µç»ú×´Ì¬Éè¶¨
1386   1                      
1387   1              EZUSB_Delay( 2 ) ;                                                      //ÑÓÊ±2ms
1388   1      
1389   1              Y_Mot_Dir = Y_Dir ;                                             //Éè¶¨Y_µç»ú·½Ïò
1390   1      
1391   1              Y_Mot_Run_Len = Y_Len - 2 * Y_Add_Step ;        //¼ÆËãÔÈËÙ²½³¤  
1392   1      
1393   1              Y_Timer_ip = 0 ;                                                        //Ê±³£ÊýÖ¸Õë
1394   1              TL0 = LSB( Y_Mot_Time[ 0 ] ) ;                          //ÉèÖÃÊ±³£ÊýµÍ8Î»
1395   1          TH0 = MSB( Y_Mot_Time[ 0 ] ) ;                              //ÉèÖÃÊ±³£Êý¸ß8Î»
1396   1      
1397   1              TR0 = TRUE ;                                                            //Æô¶¯T0¼ÆÊý
1398   1      
1399   1              Y_Mot_State = Mot_State_Up ;                            //½øÈë¼ÓËÙ¶Î
1400   1      
1401   1              return( TRUE ) ;
1402   1      }
1403          
1404          //**********Y_µç»úÍ£Ö¹
1405          void Y_MOT_Stop( void )
1406          {
1407   1              if( ( Y_Mot_State == Mot_State_Free) || ( Y_Mot_State == Mot_State_Hold ) )             //ÊÇ·ñÃ»ÓÐÔËÐÐ£¿
1408   1                      return ;                                                                //·µ»Ø, Ã»ÓÐÔËÐÐ
1409   1      
1410   1              Y_Mot_State = Mot_State_Down ;                          //½øÈë¼õËÙ¶Î
1411   1      }
1412          
1413          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 24  

1414          //**********Y_µç»ú¸´Î»
1415          BOOL Y_MOT_Reset( void )
1416          {
1417   1              BYTE iAAAA ;    
1418   1      
1419   1              Y_MOT_Move( Y_Dir_Forward , Y_1mm ) ;                                   //ÕýÏòÒÆ¶¯1mm
1420   1      
1421   1              while( Y_Mot_State != Mot_State_Hold ) ;                                //µÈ´ýµç»úÍ£Ö¹
1422   1      
1423   1              EZUSB_Delay( 20 ) ;                                                                             //ÑÓÊ±20ms
1424   1      
1425   1              for( iAAAA = 0; iAAAA < 2; iAAAA++ )                                    //Y_MOT_Move×î³¤65535=6.5mm
1426   1              {
1427   2                      Y_MOT_Move( Y_Dir_Back , 10 * Y_1mm ) ;                         //·´ÏòÒÆ¶¯5mm
1428   2      
1429   2                      while( Y_Mot_State != Mot_State_Hold )                          //µÈ´ýµç»úÍ£Ö¹
1430   2                      {
1431   3                              if( Y_Mot_Pos == Y_Pos_On )                                             //ÊÇ·ñµ½Î»ÖÃ?
1432   3                              {
1433   4                                      Y_Mot_State = Mot_State_Down ;                          //½øÈë¼õËÙ¶Î
1434   4      
1435   4                                      while( Y_Mot_State != Mot_State_Hold ) ;        //µÈ´ýµç»úÍ£Ö¹
1436   4      
1437   4                                      EZUSB_Delay( 20 ) ;                                                     //ÑÓÊ±20ms
1438   4      
1439   4                                      Y_MOT_Move( Y_Dir_Forward , Y_1mm ) ;           //ÕýÏòÒÆ¶¯1mm
1440   4      
1441   4                                      while( Y_Mot_State != Mot_State_Hold ) ;        //µÈ´ýµç»úÍ£Ö¹
1442   4      
1443   4                                      return( TRUE ) ;                                                        //¸´Î»Õý³£,·µ»Ø
1444   4                              }
1445   3                      }
1446   2              }
1447   1      
1448   1              Y_Mot_EN = Motor_EN_Free ;                                                              //Y_µç»úÊÍ·Å
1449   1              Y_Mot_State = Mot_State_Free ;                                                  //Y_µç»ú×´Ì¬Éè¶¨
1450   1                      
1451   1              return( FALSE ) ;                                                                               //¸´Î»Ê§°Ü,·µ»Ø
1452   1      }
1453          
1454          
1455          
1456          //--------FPGA------------------------------
1457          //********CPU_FPGA³õÊ¼»¯
1458          void CPU_FPGA_Int( void )
1459          {
1460   1              Laser_EN = Laser_Off ;                                                          //¹Ø±ÕLaser
1461   1      
1462   1              FPGA_Write( COM_Laser_Disable, 0                 , 0, 0 ) ;     //½ûÖ¹Laser´òÓ¡Êä³ö
1463   1              FPGA_Write( COM_Mode_Sel         , Mode_1        , 0, 0 ) ;     //ÉèÖÃÄ£Ê½=1£ºRAM_A¡ûGPIF£¬RAM_B¡úLaser
1464   1              FPGA_Write( COM_Dot_Byte         , Laser_Byte, 0, 0 ) ; //Ã¿¸ö¹âÕ¤µãµÄLaser×Ö½ÚÊý
1465   1              FPGA_Write( COM_LED_Check        , 0xff          , 0, 0 ) ;     //FPGA_LEDÖµ
1466   1      }
1467          
1468          //********FPGA_Write:´®ÐÐÐ´Èë£¬FPGA_Com:Ö¸Áî,FPGA_data:Ö¸ÁîÊý¾Ý£¬FPGA_Com.0ÏÈ³ö
1469          void FPGA_Write( BYTE FPGA_Com , BYTE FPGA_data_1 , BYTE FPGA_data_2 ,BYTE FPGA_data_3 )
1470          {
1471   1              FPGA_Port = FPGA_data_3 ;               //´®ÐÐÊä³öÊý¾Ý3
1472   1              FPGA_Port = FPGA_data_2 ;               //´®ÐÐÊä³öÊý¾Ý2
1473   1              FPGA_Port = FPGA_data_1 ;               //´®ÐÐÊä³öÊý¾Ý1
1474   1              FPGA_Port = FPGA_Com ;                  //´®ÐÐÊä³öÖ¸Áî
1475   1      
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 25  

1476   1              FPGA_Set = TRUE ;                               //CPU´®ÐÐÊý¾ÝÉèÖÃ                                       
1477   1              FPGA_Set = FALSE ;
1478   1      }
1479          
1480          //********FPGA_×Ô¼ì*******
1481          /*
1482          BOOL FPGA_Check(void) 
1483          {
1484                  FPGA_Write( COM_LED_Check, 0x5a, 0, 0, 1 ) ;    //ÉèÖÃFPGAµÄLEDÖµ
1485                  FPGA_Write( COM_Check_Read, 0, 0, 0, 0 ) ;              //¶ÁÈ¡FPGAµÄLEDÖµ
1486          
1487                  if( FPGA_Port == 0x5a )                                                 //ÊÇ·ñLEDÖµÕýÈ·£¿
1488                          return( TRUE ) ;                                                        //FPGA_Õý³£
1489                  else
1490                          return( FALSE ) ;                                                       //FPGA_´íÎó
1491          }
1492          */
1493          
1494          //--------RAM------------------------------------
1495          //********RAM_×Ô¼ì*******
1496          /*
1497          BOOL Ram_Check(void) 
1498          {
1499                  BYTE    AAAA ;
1500          
1501          //1:RAM_AÐ´256¸öÊý¾Ý
1502                  FPGA_Write( COM_Mode_Sel, Mode_3, 0, 0, 1 ) ;   //Mode_3: RAM_A¡ûrRAM_Val,      RAM_B¡úCPU_Read         
1503                  FPGA_Write( COM_Ram_Addr_Clr, 0, 0, 0, 0 ) ;    //RamµØÖ·ÇåÁã
1504          
1505                  for( AAAA = 0 ; AAAA < 250 ; AAAA++ )
1506                          FPGA_Write( COM_Ram_Write, AAAA, 0, 0, 1 ) ;
1507          
1508          //2:RAM_BÐ´256¸öÊý¾Ý    
1509                  FPGA_Write( COM_Mode_Sel, Mode_2, 0, 0, 1 ) ;   //Mode_2: RAM_A¡úCPU_Read,      RAM_B¡ûrRAM_Val,        
1510                  FPGA_Write( COM_Ram_Addr_Clr, 0, 0, 0, 0 ) ;    //RamµØÖ·ÇåÁã   
1511          
1512                  for( AAAA = 0 ; AAAA < 250 ; AAAA++ )
1513                          FPGA_Write( COM_Ram_Write, AAAA, 0, 0, 1 ) ;
1514          
1515          //3:RAM_A¶Á256¸öÊý¾Ý¡¢±È½Ï
1516                  FPGA_Write( COM_Mode_Sel, Mode_2, 0, 0, 1 ) ;   //Mode_2: RAM_A¡ûrRAM_Val,      RAM_B¡úCPU_Read
1517                  FPGA_Write( COM_Ram_Addr_Clr, 0, 0, 0, 0 ) ;    //RamµØÖ·ÇåÁã
1518          
1519                  for( AAAA = 0 ; AAAA < 250 ; AAAA++ )
1520                  {
1521                          FPGA_Write( COM_Ram_Read, 0, 0, 0, 0 ) ;        //CPU¶ÁRAM
1522          
1523                          if( FPGA_Port != AAAA )
1524                                  return( FALSE ) ;                                               //RAM_´íÎó
1525                  }
1526          
1527          //4:RAM_B¶Á256¸öÊý¾Ý¡¢±È½Ï
1528                  FPGA_Write( COM_Mode_Sel, Mode_3, 0, 0, 1 ) ;   //Mode_3: RAM_A¡ûrRAM_Val,      RAM_B¡úCPU_Read
1529                  FPGA_Write( COM_Ram_Addr_Clr, 0, 0, 0, 0 ) ;    //RamµØÖ·ÇåÁã
1530          
1531                  for( AAAA = 0 ; AAAA < 250 ; AAAA++ )
1532                  {
1533                          FPGA_Write( COM_Ram_Read, 0, 0, 0, 0 ) ;        //CPU¶ÁRAM
1534          
1535                          if( FPGA_Port != AAAA )
1536                                  return( FALSE ) ;                                               //RAM_´íÎó
1537                  }
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 26  

1538          
1539          //5:RAM_Õý³£
1540                  return( TRUE ) ;
1541          }
1542          */
1543          
1544          //--------Encoder-----------------------------------
1545          //********Encoder_×Ô¼ì*******
1546          /*
1547          BOOL Encoder_Check(void) 
1548          {
1549          //1:¹âÕ¤Ä£Ê½¡¢ÇåÁã      
1550                  FPGA_Write( COM_Encode_Div , Encode_Div_2540 , 0, 0, 1 ) ;      //¹âÕ¤2540dpi=10u
1551                  FPGA_Write( COM_Encode_Clr, 0, 0, 0, 0 ) ;                                      //¹âÕ¤ÇåÁã
1552          
1553          //2:ÂýËÙ×óÒÆ¶¯50mm¡¢¶Á¹âÕ¤
1554                  X_MOT_Move( X_Dir_Lift , X_Low_Speed , X_50mm ) ;                       //****ÔÚ¼ì²âÎ»ÖÃÉÏ,Ïò×óÒÆ¶¯90
1555          
1556                  while( X_Mot_State != Mot_State_Hold ) ;                                        //µÈ´ýXµç»úÍ£Ö¹ 
1557                  EZUSB_Delay( 200 ) ;                                                                            //ÑÓÊ±200ms
1558          
1559                  if( ( Encoder_Read() - Encode_50mm + 200 ) > Encode_Check )     //¼ì²âÂýËÙ90mm Encoder Öµ
1560                          return( FALSE ) ;
1561          
1562          //3:ÂýËÙÓÒÒÆ¶¯50mm»ØÎ»¡¢¶Á¹âÕ¤
1563                  X_MOT_Move( X_Dir_Right , X_Low_Speed , X_50mm ) ;                      //****ÏòÓÒÒÆ¶¯90£¬»ØÎ»
1564          
1565                  while( X_Mot_State != Mot_State_Hold ) ;                                        //µÈ´ýXµç»úÍ£Ö¹ 
1566                  EZUSB_Delay( 200 ) ;                                                                            //ÑÓÊ±200ms
1567          
1568                  if( ( Encoder_Read() - Encode_Reset_Val + 200 ) > Encode_Check )                //¼ì²âÂýËÙ»ØÎ» Encoder Öµ
1569                          return( FALSE ) ;
1570          
1571          //4:¸ßËÙ×óÒÆ¶¯500mm¡¢¶Á¹âÕ¤
1572                  X_MOT_Move( X_Dir_Lift , X_High_Speed , X_500mm ) ;                     //****¸ßËÙÏò×óÒÆ¶¯500mm
1573          
1574                  while( X_Mot_State != Mot_State_Hold ) ;                                        //µÈ´ýXµç»úÍ£Ö¹ 
1575                  EZUSB_Delay( 200 ) ;                                                                            //ÑÓÊ±200ms
1576          
1577                  if( ( Encoder_Read() - Encode_500mm + 200 ) > Encode_Check )    //¼ì²âÂýËÙ90mm Encoder Öµ
1578                          return( FALSE ) ;
1579          
1580          //5:¸ßËÙÓÒÒÆ¶¯500mm»ØÎ»¡¢¶Á¹âÕ¤
1581                  X_MOT_Move( X_Dir_Right , X_High_Speed , X_500mm ) ;            //****¸ßËÙÏò×óÒÆ¶¯500mm
1582          
1583                  while( X_Mot_State != Mot_State_Hold ) ;                                        //µÈ´ýXµç»úÍ£Ö¹ 
1584                  EZUSB_Delay( 200 ) ;                                                                            //ÑÓÊ±200ms
1585          
1586                  if( ( Encoder_Read() - Encode_Reset_Val + 200 ) > Encode_Check )        //¼ì²âÂýËÙ90mm Encoder Öµ
1587                          return( FALSE ) ;
1588          
1589          //6:Encoder_Õý³£
1590                  X_MOT_Reset() ;                 //¸´Î»
1591          
1592                  return( TRUE ) ;
1593          }
1594          */
1595          
1596          
1597          //********ÑÓÊ±0.5us ×î´ó255us*******
1598          void Delay_us( BYTE T_us )
1599          {
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 27  

1600   1              while( T_us-- ) ;                                       //ÑÓÊ±:1¸öT_us Ô¼0.5us  
1601   1      }
1602          
1603          //**********ADJ RAM*************
1604                  #define  ADJ_ADR_WR  0xa0           // slave address + write_bit 
1605                  #define  ADJ_ADR_RD  0xa1           // slave address +  read_bit 
1606          
1607          //Æô¶¯×ÜÏß
1608          void ADJ_Start(void)  
1609          { 
1610   1              //SCL´¦ÓÚ¸ßµçÆ½Ê±,SDA´Ó¸ßµçÆ½×ªÏòµÍµçÆ½,±íÊ¾Ò»¸ö"¿ªÊ¼"×´Ì¬,¸Ã×´Ì¬±ØÐëÔÚÆäËûÃüÁîÖ®Ç°Ö´ÐÐ
1611   1              PortE_OUT |= ADJ_SDA ;                          // initial state of the I2C bus 
1612   1              PortE_OUT |= ADJ_SCL ; 
1613   1              Delay_us( 14 ) ;
1614   1      
1615   1              PortE_OUT &= ~ADJ_SDA ;                                 // SCL=1 , SDA=0 after 7 usecs 
1616   1              Delay_us( 10 ) ;  
1617   1      
1618   1              PortE_OUT &= ~ADJ_SCL ;                         // SCL=0 , SDA=0 after other 5 usecs
1619   1      }  
1620          
1621          //Í£Ö¹×ÜÏß 
1622          void ADJ_Stop( void )  
1623          { 
1624   1              //SCL´¦ÓÚ¸ßµçÆ½Ê±,SDA´ÓµÍµçÆ½×ªÏò¸ßµçÆ½,±íÊ¾Ò»¸ö"Í£Ö¹"×´Ì¬,¸Ã×´Ì¬ÖÕÖ¹ËùÓÐÍ¨Ñ¶
1625   1              PortE_OUT &= ~ADJ_SCL ;                                 // SDA=0,SCL=0, initial state of I2C  
1626   1              PortE_OUT &= ~ADJ_SDA ;                                   
1627   1              Delay_us( 4 ) ;
1628   1      
1629   1              PortE_OUT |= ADJ_SCL ;                                  // SDA=0,SCL=1, after 2 usecs 
1630   1              Delay_us( 12 ) ;
1631   1      
1632   1              PortE_OUT |= ADJ_SDA ;                          // SDA=1,SCL=1, after other 5 usecs
1633   1      }  
1634            
1635          //¶ÔIIC×ÜÏß²úÉúÓ¦´ð
1636          void ADJ_Ack(void)  
1637          { 
1638   1              //EEPROMÍ¨¹ýÔÚÊÕµ½Ã¿¸öµØÖ·»òÊý¾ÝÖ®ºó,ÖÃSDAµÍµçÆ½µÄ·½Ê½È·ÈÏ±íÊ¾ÊÕµ½¶ÁSDA¿Ú×´Ì¬
1639   1              PortE_OUT &= ~ADJ_SDA ;                         // SDA=0,SCL=0 for 3 usec
1640   1              PortE_OUT &= ~ADJ_SCL ;
1641   1              Delay_us( 6 ) ;     
1642   1      
1643   1              PortE_OUT |= ADJ_SCL ;                                  // +pulse SCL  for 6 usec
1644   1              Delay_us( 12 ) ;  
1645   1        
1646   1              PortE_OUT &= ~ADJ_SCL ;                                 // 2 usec stabilization for SCL
1647   1              Delay_us( 4 ) ;  
1648   1        
1649   1              PortE_OUT |= ADJ_SDA ;                                  // prepare SDA for reception 
1650   1              Delay_us( 4 ) ;  
1651   1         
1652   1      } 
1653          
1654          //²»¶ÔIIC×ÜÏß²úÉúÓ¦´ð
1655          void ADJ_NoAck(void)  
1656          { 
1657   1              PortE_OUT |= ADJ_SDA ;                          // SDA=1,SCL=0 for 3 usecs
1658   1              PortE_OUT &= ~ADJ_SCL ;
1659   1              Delay_us( 6 ) ;
1660   1               
1661   1              PortE_OUT |= ADJ_SCL ;                          // SDA=1,SCL=1 for 6 usecs ; +pulse SCL
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 28  

1662   1              Delay_us( 12 ) ;  
1663   1        
1664   1              PortE_OUT &= ~ADJ_SCL ;                                 // SDA=1,SCL=0,SCL stabilization 2us
1665   1              Delay_us( 4 ) ;  
1666   1      }  
1667           
1668          
1669          //ÏòIIC×ÜÏßÐ´Êý¾Ý 
1670          void ADJ_Send( BYTE Sendbyte )  // write an 8b streamin 
1671          { 
1672   1              BYTE iAAAA ; 
1673   1        
1674   1              for( iAAAA = 8 ; iAAAA > 0 ; iAAAA-- )  
1675   1              { 
1676   2                      Delay_us( 6 ) ;                 // SDA = bit_n of eeprom's data buffer 
1677   2              Sendbyte <<= 1;                 //Ê¹CY=sendbyte^7       
1678   2                      
1679   2                      if( CY )
1680   2                              PortE_OUT |= ADJ_SDA ;                  //CY ½øÎ»±êÖ¾Î»
1681   2                      else
1682   2                          PortE_OUT &= ~ADJ_SDA ;
1683   2                      
1684   2                      Delay_us( 4 ) ;                 
1685   2      
1686   2                      PortE_OUT |= ADJ_SCL ;                          //pulse high SCL 
1687   2                      Delay_us( 10 ) ;                //for 5 microseconds 
1688   2      
1689   2                      PortE_OUT &= ~ADJ_SCL ; 
1690   2                      Delay_us( 4 ) ;
1691   2              }  
1692   1      
1693   1              PortE_OUT |= ADJ_SDA ;                          //rise-up SDA and program it as input to read the ACK from the memory
1694   1              OEC = PC_ADJ_RD ;                       //portC I/OÉèÖÃ 
1695   1              Delay_us( 6 ) ;
1696   1        
1697   1              PortE_OUT |= ADJ_SCL ;                                  // pulse high SCL for 5 useconds
1698   1              Delay_us( 10 ) ; 
1699   1              
1700   1              PortE_OUT &= ~ADJ_SCL ;                             // 
1701   1              OEC = PC_ADJ_WR ;                       //portC  I/OÉèÖÃ,program again SDA as open-drain out 
1702   1      }
1703          
1704          //´ÓIIC×ÜÏßÉÏ¶ÁÊý¾Ý×Ó³ÌÐò * * * * */  
1705          BYTE ADJ_Rec( void )  
1706          { 
1707   1              BYTE R_Data , iAAAA ;
1708   1                
1709   1              PortE_OUT |= ADJ_SDA ;
1710   1              OEC = PC_ADJ_RD ;                       //portC I/OÉèÖÃ ,prepare SDA as input (=1)
1711   1      
1712   1              iAAAA = 8 ;  
1713   1              while( iAAAA-- )  
1714   1              { 
1715   2                      Delay_us( 8 ) ; 
1716   2                      PortE_OUT |= ADJ_SCL ;  
1717   2              R_Data = ( R_Data << 1 ) | ADJ_SDA ;
1718   2       
1719   2              Delay_us( 8 ) ; 
1720   2                       
1721   2              PortE_OUT &= ~ADJ_SCL ;  
1722   2              Delay_us( 8 ) ;  
1723   2              }
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 29  

1724   1      
1725   1              OEC = PC_ADJ_WR ;                       //portC  I/OÉèÖÃ,program again SDA as open-drain out   
1726   1              return( R_Data ) ;  
1727   1      }   
1728          
1729          //Ëæ»úÐ´
1730          void ADJ_Write( unsigned int RAM_adr, unsigned char RAM_data ) 
1731          {
1732   1              ADJ_Start()                             ;    // START command 
1733   1      
1734   1              ADJ_Send( ADJ_ADR_WR )          ;    // write first slave adr + write_bit 
1735   1      
1736   1              ADJ_Send( RAM_adr >> 8 )        ;    // write the high_byte of the adr 
1737   1      
1738   1              ADJ_Send( RAM_adr & 0xff )      ;    // write the  low_byte of the adr
1739   1      
1740   1              ADJ_Send( RAM_data )            ;    // write the data_character 
1741   1      
1742   1              ADJ_Stop()                      ;    // finally , STOP command 
1743   1      
1744   1              EZUSB_Delay( 5 )                        ;       //5ms  write cycle time after each byte  
1745   1      }
1746          
1747          unsigned char ADJ_Read( unsigned int RAM_adr ) 
1748          {  
1749   1              unsigned char RAM_data          ;
1750   1      
1751   1              ADJ_Start()                     ;  // START command
1752   1          
1753   1              ADJ_Send( ADJ_ADR_WR )          ;  // write slave address + write_bit
1754   1               
1755   1              ADJ_Send( RAM_adr >> 8 )        ;  // write the high_byte of the adr
1756   1                     
1757   1              ADJ_Send( RAM_adr & 0xff )      ;  // write the  low_byte of the adr
1758   1               
1759   1              ADJ_Start()                     ;  // REPEATED START condition
1760   1           
1761   1              ADJ_Send( ADJ_ADR_RD )          ;  // change the direction of the trsf
1762   1               
1763   1              RAM_data = ADJ_Rec()        ;  // store the result in "dst"(<-eep_buf)
1764   1      
1765   1              ADJ_NoAck()                     ;  // send a NACK from MCU to the memory
1766   1               
1767   1              ADJ_Stop()                      ;  // finally , STOP command
1768   1              
1769   1              return( RAM_data )                      ;              
1770   1      } 
1771          
1772          
1773          
1774          
1775          /*
1776          //24C256 µÄ¶ÁÐ´³ÌÐò
1777          BOOL   ADJ_RW(unsigned char *DataBuff,unsigned char Length,unsigned int Addr,  
1778                               unsigned char Control,enum eepromtype enumer)  
1779          {   
1780            
1781            unsigned char data j,i=ERROR;  
1782            bit errorflag=1;                                              //³ö´í±êÖ¾  
1783            while(i--)  
1784            { Start();                                                            //Æô¶¯×ÜÏß  
1785              Send(Control & 0xfe);                                       //ÏòIIC×ÜÏßÐ´Êý¾Ý£¬Æ÷¼þµØÖ·  
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 30  

1786              if(RecAck()) continue;                                      //ÈçÐ´²»ÕýÈ·½áÊø±¾´ÎÑ­»·  
1787              if(enumer > AT2416)  
1788              { Send((unsigned char)(Addr >> 8));         //°ÑÕûÐÍÊý¾Ý×ª»»Îª×Ö·ûÐÍÊý¾Ý£ºÆú¸ßÈ¡µÍ£¬Ö»È¡µÍ8Î».Èç¹ûÈÝÁ¿´óÓÚ32K
             -Î»£¬Ê¹ÓÃ16Î»µØÖ·Ñ°Ö·£¬Ð´Èë¸ß°ËÎ»µØÖ·  
1789                if(RecAck())  continue;  
1790              }  
1791              Send((unsigned char)Addr);                          //ÏòIIC×ÜÏßÐ´Êý¾Ý  
1792              if(RecAck())  continue;                             //ÈçÐ´ÕýÈ·½áÊø±¾´ÎÑ­»·  
1793              if(!(Control & 0x01))                               //ÅÐ¶ÏÊÇ¶ÁÆ÷¼þ»¹ÊÇÐ´Æ÷¼þ  
1794              { j=Length;  
1795                errorflag=0;                                              //Çå´íÎóÌØÕ÷Î»  
1796                while(j--)  
1797                { Send(*DataBuff++);                                      //ÏòIIC×ÜÏßÐ´Êý¾Ý 
1798                  if(!RecAck()) continue;                         //ÈçÐ´ÕýÈ·½áÊø±¾´ÎÑ­»· 
1799                  errorflag=1;  
1800                  break;  
1801                }  
1802                if(errorflag==1) continue;  
1803                break;  
1804              }  
1805              else  
1806              { Start();                                                  //Æô¶¯×ÜÏß  
1807                Send(Control);                                    //ÏòIIC×ÜÏßÐ´Êý¾Ý 
1808                if(RecAck()) continue;                    //Æ÷¼þÃ»Ó¦´ð½áÊø±¾´Î±¾²ãÑ­»·  
1809                while(--Length)                                   //×Ö½Ú³¤Îª0½áÊø
1810                { *DataBuff ++= Receive();  
1811                  Ack();                                                  //¶ÔIIC×ÜÏß²úÉúÓ¦´ð 
1812                }  
1813                *DataBuff=Receive();                              //¶Á×îºóÒ»¸ö×Ö½Ú  
1814                NoAck();                                                  //²»¶ÔIIC×ÜÏß²úÉúÓ¦´ð  
1815                errorflag=0;  
1816                break;  
1817              }  
1818            }  
1819            Stop();                                                               //Í£Ö¹IIC×ÜÏß  
1820            if(!(Control & 0x01))  
1821            {   
1822            Delay(255);   
1823            Delay(255);   
1824            Delay(255);  
1825            }  
1826            return(errorflag);  
1827          }  
1828          
1829          */
1830          
1831          //************EEPROM************
1832          void EEPROMWriteByte(WORD addr, BYTE value)
1833          {
1834   1              BYTE            i = 0;
1835   1              BYTE xdata      ee_str[3];
1836   1      
1837   1              if(DB_Addr)
1838   1                      ee_str[i++] = MSB(addr);
1839   1      
1840   1              ee_str[i++] = LSB(addr);
1841   1              ee_str[i++] = value;
1842   1      
1843   1              EZUSB_WriteI2C(I2C_Addr, i, ee_str);
1844   1          EZUSB_WaitForEEPROMWrite(I2C_Addr);
1845   1      }
1846          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 31  

1847          void EEPROMWrite(WORD addr, BYTE length, BYTE xdata *buf)
1848          {
1849   1              BYTE    i;
1850   1      
1851   1              EZUSB_Delay( 1 ) ;      //1ms
1852   1              
1853   1              for(i=0;i<length;++i)
1854   1                      EEPROMWriteByte(addr++,buf[i]);
1855   1      
1856   1      }
1857          
1858          /*
1859          BYTE EEPROMReadByte(WORD addr )
1860          {
1861                  BYTE xdata dddd[1];
1862                  EEPROMRead( addr, 1, (BYTE)dddd );
1863                  
1864                  return( dddd[0] );
1865          }
1866          */
1867          
1868          void EEPROMRead(WORD addr, BYTE length, BYTE xdata *buf)
1869          {
1870   1              BYTE            i = 0;
1871   1              BYTE            j = 0;
1872   1              BYTE xdata      ee_str[2];
1873   1      
1874   1              if(DB_Addr)
1875   1                      ee_str[i++] = MSB(addr);
1876   1      
1877   1              ee_str[i++] = LSB(addr);
1878   1      
1879   1              EZUSB_WriteI2C(I2C_Addr, i, ee_str);
1880   1      
1881   1      //      for(j=0; j < length; j++)
1882   1      //              *(buf+j) = 0xcd;
1883   1      
1884   1              EZUSB_ReadI2C(I2C_Addr, length, buf);
1885   1      }
1886           
1887          //**************************************
1888          /*
1889          BOOL TD_Suspend(void)       // Called before the device goes into suspend mode
1890          {                                                       //½øÈë¹ÒÆðÄ£Ê½
1891             return(TRUE);
1892          }
1893          
1894          BOOL TD_Resume(void)        // Called after the device resumes
1895          {                                                       //ÍË³ö¹ÒÆðÄ£Ê½
1896             return(TRUE);
1897          }
1898          */
1899          
1900          //-----------------------------------------------------------------------------
1901          //USBÖÐ¶Ï´¦Àí, ÏÂÃæµÄº¯ÊýÍ¨¹ýÖÐ¶ÏÈë¿Ú±íÀ´µ÷ÓÃ
1902          // **********¶Ëµã0 USBÇëÇóµ½´ïÖÐ¶Ï
1903          void ISR_Sudav(void) interrupt 0
1904          {
1905   1         GotSUD = TRUE;            // Set flag
1906   1         EZUSB_IRQ_CLEAR();
1907   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
1908   1      }
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 32  

1909          
1910          //**********Setup Token Interrupt Handler
1911          void ISR_Sutok(void) interrupt 0
1912          {
1913   1         EZUSB_IRQ_CLEAR();
1914   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
1915   1      }
1916          
1917          void ISR_Sof(void) interrupt 0
1918          {
1919   1         EZUSB_IRQ_CLEAR();
1920   1         USBIRQ = bmSOF;            // Clear SOF IRQ
1921   1      }
1922          
1923          void ISR_Ures(void) interrupt 0
1924          {
1925   1         if (EZUSB_HIGHSPEED())       //¼ì²âUSB Speed 1:High Speed
1926   1         {
1927   2            pConfigDscr = pHighSpeedConfigDscr;
1928   2            pOtherConfigDscr = pFullSpeedConfigDscr;
1929   2         }
1930   1         else
1931   1         {
1932   2            pConfigDscr = pFullSpeedConfigDscr;
1933   2            pOtherConfigDscr = pHighSpeedConfigDscr;
1934   2         }
1935   1         
1936   1         EZUSB_IRQ_CLEAR();
1937   1         USBIRQ = bmURES;         // Clear URES IRQ
1938   1      }
1939          
1940          void ISR_Susp(void) interrupt 0
1941          {
1942   1         Sleep = TRUE;
1943   1         EZUSB_IRQ_CLEAR();
1944   1         USBIRQ = bmSUSP;
1945   1      }
1946          
1947          void ISR_Highspeed(void) interrupt 0
1948          {
1949   1         if (EZUSB_HIGHSPEED())       //¼ì²âUSB Speed 1:High Speed
1950   1         {
1951   2            pConfigDscr = pHighSpeedConfigDscr;
1952   2            pOtherConfigDscr = pFullSpeedConfigDscr;
1953   2         }
1954   1         else
1955   1         {
1956   2            pConfigDscr = pFullSpeedConfigDscr;
1957   2            pOtherConfigDscr = pHighSpeedConfigDscr;
1958   2         }
1959   1      
1960   1         EZUSB_IRQ_CLEAR();
1961   1         USBIRQ = bmHSGRANT;
1962   1      }
1963          
1964          
1965          void ISR_Ep0ack(void) interrupt 0
1966          {
1967   1      }
1968          void ISR_Stub(void) interrupt 0
1969          {
1970   1      }
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 33  

1971          void ISR_Ep0in(void) interrupt 0
1972          {
1973   1      }
1974          void ISR_Ep0out(void) interrupt 0
1975          {
1976   1      }
1977          void ISR_Ep1in(void) interrupt 0
1978          {
1979   1      }
1980          void ISR_Ep1out(void) interrupt 0
1981          {
1982   1      }
1983          void ISR_Ep2inout(void) interrupt 0
1984          {
1985   1      }
1986          void ISR_Ep4inout(void) interrupt 0
1987          {
1988   1      }
1989          void ISR_Ep6inout(void) interrupt 0
1990          {
1991   1      }
1992          void ISR_Ep8inout(void) interrupt 0
1993          {
1994   1      }
1995          void ISR_Ibn(void) interrupt 0
1996          {
1997   1      }
1998          void ISR_Ep0pingnak(void) interrupt 0
1999          {
2000   1      }
2001          void ISR_Ep1pingnak(void) interrupt 0
2002          {
2003   1      }
2004          void ISR_Ep2pingnak(void) interrupt 0
2005          {
2006   1      }
2007          void ISR_Ep4pingnak(void) interrupt 0
2008          {
2009   1      }
2010          void ISR_Ep6pingnak(void) interrupt 0
2011          {
2012   1      }
2013          void ISR_Ep8pingnak(void) interrupt 0
2014          {
2015   1      }
2016          void ISR_Errorlimit(void) interrupt 0
2017          {
2018   1      }
2019          void ISR_Ep2piderror(void) interrupt 0
2020          {
2021   1      }
2022          void ISR_Ep4piderror(void) interrupt 0
2023          {
2024   1      }
2025          void ISR_Ep6piderror(void) interrupt 0
2026          {
2027   1      }
2028          void ISR_Ep8piderror(void) interrupt 0
2029          {
2030   1      }
2031          void ISR_Ep2pflag(void) interrupt 0
2032          {
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 34  

2033   1      }
2034          void ISR_Ep4pflag(void) interrupt 0
2035          {
2036   1      }
2037          void ISR_Ep6pflag(void) interrupt 0
2038          {
2039   1      }
2040          void ISR_Ep8pflag(void) interrupt 0
2041          {
2042   1      }
2043          void ISR_Ep2eflag(void) interrupt 0
2044          {
2045   1      }
2046          void ISR_Ep4eflag(void) interrupt 0
2047          {
2048   1      }
2049          void ISR_Ep6eflag(void) interrupt 0
2050          {
2051   1      }
2052          void ISR_Ep8eflag(void) interrupt 0
2053          {
2054   1      }
2055          void ISR_Ep2fflag(void) interrupt 0
2056          {
2057   1      }
2058          void ISR_Ep4fflag(void) interrupt 0
2059          {
2060   1      }
2061          void ISR_Ep6fflag(void) interrupt 0
2062          {
2063   1      }
2064          void ISR_Ep8fflag(void) interrupt 0
2065          {
2066   1      }
2067          //GPIF done Êý¾Ý½ÓÊÕ½áÊøÖÐ¶Ï
2068          void ISR_GpifComplete(void) interrupt 0
2069          {
2070   1      }
2071          void ISR_GpifWaveform(void) interrupt 0
2072          {
2073   1      }
2074          
2075          
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 35  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION TD_Init (BEGIN)
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
0000 900000      E     MOV     DPTR,#CPUCS
0003 E0                MOVX    A,@DPTR
0004 54E7              ANL     A,#0E7H
0006 4410              ORL     A,#010H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
0009 00                NOP     
000A 00                NOP     
000B 00                NOP     
                                           ; SOURCE LINE # 194
000C 900000      E     MOV     DPTR,#IFCONFIG
000F 7443              MOV     A,#043H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0012 00                NOP     
0013 00                NOP     
0014 00                NOP     
                                           ; SOURCE LINE # 207
0015 900000      E     MOV     DPTR,#EP1OUTCFG
0018 74A0              MOV     A,#0A0H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
001B 00                NOP     
001C 00                NOP     
001D 00                NOP     
                                           ; SOURCE LINE # 209
001E 900000      E     MOV     DPTR,#EP1INCFG
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0022 00                NOP     
0023 00                NOP     
0024 00                NOP     
                                           ; SOURCE LINE # 213
0025 900000      E     MOV     DPTR,#EP2CFG
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0029 00                NOP     
002A 00                NOP     
002B 00                NOP     
                                           ; SOURCE LINE # 215
002C 900000      E     MOV     DPTR,#EP6CFG
002F 74E0              MOV     A,#0E0H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0032 00                NOP     
0033 00                NOP     
0034 00                NOP     
                                           ; SOURCE LINE # 218
0035 900000      E     MOV     DPTR,#EP4CFG
0038 7402              MOV     A,#02H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
003B 00                NOP     
003C 00                NOP     
003D 00                NOP     
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 36  

                                           ; SOURCE LINE # 220
003E 900000      E     MOV     DPTR,#EP8CFG
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0042 00                NOP     
0043 00                NOP     
0044 00                NOP     
                                           ; SOURCE LINE # 233
0045 900000      E     MOV     DPTR,#FIFORESET
0048 7480              MOV     A,#080H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
004B 00                NOP     
004C 00                NOP     
004D 00                NOP     
                                           ; SOURCE LINE # 235
004E 7402              MOV     A,#02H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0051 00                NOP     
0052 00                NOP     
0053 00                NOP     
                                           ; SOURCE LINE # 237
0054 7404              MOV     A,#04H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0057 00                NOP     
0058 00                NOP     
0059 00                NOP     
                                           ; SOURCE LINE # 239
005A 7406              MOV     A,#06H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
005D 00                NOP     
005E 00                NOP     
005F 00                NOP     
                                           ; SOURCE LINE # 241
0060 7408              MOV     A,#08H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0063 00                NOP     
0064 00                NOP     
0065 00                NOP     
                                           ; SOURCE LINE # 243
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0068 00                NOP     
0069 00                NOP     
006A 00                NOP     
                                           ; SOURCE LINE # 255
006B 900000      E     MOV     DPTR,#PINFLAGSAB
006E 74C4              MOV     A,#0C4H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0071 00                NOP     
0072 00                NOP     
0073 00                NOP     
                                           ; SOURCE LINE # 260
0074 900000      E     MOV     DPTR,#PINFLAGSCD
0077 7418              MOV     A,#018H
0079 F0                MOVX    @DPTR,A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 37  

                                           ; SOURCE LINE # 263
007A 00                NOP     
007B 00                NOP     
007C 00                NOP     
                                           ; SOURCE LINE # 266
007D E4                CLR     A
007E 900000      E     MOV     DPTR,#EP2FIFOCFG
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0082 00                NOP     
0083 00                NOP     
0084 00                NOP     
                                           ; SOURCE LINE # 268
0085 7411              MOV     A,#011H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0088 00                NOP     
0089 00                NOP     
008A 00                NOP     
                                           ; SOURCE LINE # 290
008B 758E39            MOV     CKCON,#039H
                                           ; SOURCE LINE # 292
008E 900000      E     MOV     DPTR,#PORTACFG
0091 7440              MOV     A,#040H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0094 75B2FB            MOV     OEA,#0FBH
                                           ; SOURCE LINE # 294
0097 758003            MOV     IOA,#03H
                                           ; SOURCE LINE # 296
009A E4                CLR     A
009B 900000      E     MOV     DPTR,#PORTCCFG
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
009F 75B49F            MOV     OEC,#09FH
                                           ; SOURCE LINE # 298
00A2 75A00E            MOV     IOC,#0EH
                                           ; SOURCE LINE # 300
00A5 900000      E     MOV     DPTR,#PORTECFG
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
00A9 75B6BD            MOV     OEE,#0BDH
                                           ; SOURCE LINE # 302
00AC 75B10C            MOV     IOE,#0CH
                                           ; SOURCE LINE # 315
00AF 758911            MOV     TMOD,#011H
                                           ; SOURCE LINE # 319
00B2 C28C              CLR     TR0
                                           ; SOURCE LINE # 320
00B4 D2A9              SETB    ET0
                                           ; SOURCE LINE # 324
00B6 C28E              CLR     TR1
                                           ; SOURCE LINE # 325
00B8 D2AB              SETB    ET1
                                           ; SOURCE LINE # 329
00BA F5C8              MOV     T2CON,A
                                           ; SOURCE LINE # 330
00BC D2AD              SETB    ET2
                                           ; SOURCE LINE # 338
00BE 120000      E     LCALL   EZUSB_InitI2C
                                           ; SOURCE LINE # 341
00C1 900000      E     MOV     DPTR,#I2CS
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 38  

00C4 E0                MOVX    A,@DPTR
00C5 5410              ANL     A,#010H
00C7 C4                SWAP    A
00C8 540F              ANL     A,#0FH
00CA 4450              ORL     A,#050H
00CC F500        E     MOV     I2C_Addr,A
                                           ; SOURCE LINE # 343
00CE 13                RRC     A
00CF 9200        E     MOV     DB_Addr,C
                                           ; SOURCE LINE # 345
00D1 900000      E     MOV     DPTR,#I2CTL
00D4 E0                MOVX    A,@DPTR
00D5 4401              ORL     A,#01H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
00D8 22                RET     
             ; FUNCTION TD_Init (END)

             ; FUNCTION DR_SetConfiguration (BEGIN)
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0000 900000      E     MOV     DPTR,#SETUPDAT+02H
0003 E0                MOVX    A,@DPTR
0004 F500        R     MOV     Configuration,A
                                           ; SOURCE LINE # 364
0006 D3                SETB    C
                                           ; SOURCE LINE # 365
0007         ?C0002:
0007 22                RET     
             ; FUNCTION DR_SetConfiguration (END)

             ; FUNCTION DR_GetConfiguration (BEGIN)
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0000 900000      E     MOV     DPTR,#EP0BUF
0003 E500        R     MOV     A,Configuration
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0006 E4                CLR     A
0007 900000      E     MOV     DPTR,#EP0BCH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
000B 900000      E     MOV     DPTR,#EP0BCL
000E 04                INC     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0010 D3                SETB    C
                                           ; SOURCE LINE # 374
0011         ?C0003:
0011 22                RET     
             ; FUNCTION DR_GetConfiguration (END)

             ; FUNCTION DR_SetInterface (BEGIN)
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0000 900000      E     MOV     DPTR,#SETUPDAT+02H
0003 E0                MOVX    A,@DPTR
0004 F500        R     MOV     AlternateSetting,A
                                           ; SOURCE LINE # 380
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 39  

0006 D3                SETB    C
                                           ; SOURCE LINE # 381
0007         ?C0004:
0007 22                RET     
             ; FUNCTION DR_SetInterface (END)

             ; FUNCTION DR_GetInterface (BEGIN)
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
0000 900000      E     MOV     DPTR,#EP0BUF
0003 E500        R     MOV     A,AlternateSetting
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
0006 E4                CLR     A
0007 900000      E     MOV     DPTR,#EP0BCH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
000B 900000      E     MOV     DPTR,#EP0BCL
000E 04                INC     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0010 D3                SETB    C
                                           ; SOURCE LINE # 390
0011         ?C0005:
0011 22                RET     
             ; FUNCTION DR_GetInterface (END)

             ; FUNCTION DR_VendorCmnd (BEGIN)
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 417
0000 900000      E     MOV     DPTR,#SETUPDAT+01H
0003 E0                MOVX    A,@DPTR
0004 120000      E     LCALL   ?C?CCASE
0007 0000        R     DW      ?C0101
0009 A2                DB      0A2H
000A 0000        R     DW      ?C0101
000C A3                DB      0A3H
000D 0000        R     DW      ?C0099
000F A9                DB      0A9H
0010 0000        R     DW      ?C0049
0012 B0                DB      0B0H
0013 0000        R     DW      ?C0052
0015 B1                DB      0B1H
0016 0000        R     DW      ?C0053
0018 B2                DB      0B2H
0019 0000        R     DW      ?C0055
001B B3                DB      0B3H
001C 0000        R     DW      ?C0056
001E B4                DB      0B4H
001F 0000        R     DW      ?C0057
0021 B5                DB      0B5H
0022 0000        R     DW      ?C0060
0024 B6                DB      0B6H
0025 0000        R     DW      ?C0061
0027 B7                DB      0B7H
0028 0000        R     DW      ?C0063
002A B8                DB      0B8H
002B 0000        R     DW      ?C0064
002D B9                DB      0B9H
002E 0000        R     DW      ?C0068
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 40  

0030 BA                DB      0BAH
0031 0000        R     DW      ?C0069
0033 BB                DB      0BBH
0034 0000        R     DW      ?C0070
0036 BC                DB      0BCH
0037 0000        R     DW      ?C0073
0039 BD                DB      0BDH
003A 0000        R     DW      ?C0065
003C BE                DB      0BEH
003D 0000        R     DW      ?C0081
003F BF                DB      0BFH
0040 0000        R     DW      ?C0043
0042 C1                DB      0C1H
0043 0000        R     DW      ?C0048
0045 C2                DB      0C2H
0046 0000        R     DW      ?C0078
0048 C4                DB      0C4H
0049 0000        R     DW      ?C0084
004B C9                DB      0C9H
004C 0000        R     DW      ?C0087
004E CA                DB      0CAH
004F 0000        R     DW      ?C0011
0051 D1                DB      0D1H
0052 0000        R     DW      ?C0008
0054 D2                DB      0D2H
0055 0000        R     DW      ?C0016
0057 D3                DB      0D3H
0058 0000        R     DW      ?C0019
005A D4                DB      0D4H
005B 0000        R     DW      ?C0022
005D D5                DB      0D5H
005E 0000        R     DW      ?C0025
0060 D6                DB      0D6H
0061 0000        R     DW      ?C0028
0063 D7                DB      0D7H
0064 0000        R     DW      ?C0031
0066 D8                DB      0D8H
0067 0000        R     DW      ?C0038
0069 DB                DB      0DBH
006A 0000        R     DW      ?C0041
006C DC                DB      0DCH
006D 0000        R     DW      ?C0094
006F DF                DB      0DFH
0070 0000              DW      00H
0072 0000        R     DW      ?C0128
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 420
0074         ?C0008:
                                           ; SOURCE LINE # 421
0074 900000      E     MOV     DPTR,#EP0CS
0077 E0                MOVX    A,@DPTR
0078 20E1F9            JB      ACC.1,?C0008
007B         ?C0009:
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
007B 020000      R     LJMP    ?C0295
                                           ; SOURCE LINE # 431
007E         ?C0011:
                                           ; SOURCE LINE # 432
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 41  

007E 900000      E     MOV     DPTR,#EP0CS
0081 E0                MOVX    A,@DPTR
0082 20E1F9            JB      ACC.1,?C0011
0085         ?C0012:
                                           ; SOURCE LINE # 434
0085 900000      E     MOV     DPTR,#EP0BUF
0088 E500        E     MOV     A,GP_State
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
008B A3                INC     DPTR
008C E580              MOV     A,IOA
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
008F A3                INC     DPTR
0090 E5A0              MOV     A,IOC
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0093 A3                INC     DPTR
0094 E5B0              MOV     A,IOD
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0097 A3                INC     DPTR
0098 E5B1              MOV     A,IOE
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
009B 900000      E     MOV     DPTR,#USBCS
009E E0                MOVX    A,@DPTR
009F 30E708            JNB     ACC.7,?C0013
                                           ; SOURCE LINE # 445
00A2 900000      E     MOV     DPTR,#EP0BUF+05H
00A5 7401              MOV     A,#01H
00A7 F0                MOVX    @DPTR,A
00A8 8005              SJMP    ?C0014
00AA         ?C0013:
                                           ; SOURCE LINE # 447
00AA E4                CLR     A
00AB 900000      E     MOV     DPTR,#EP0BUF+05H
00AE F0                MOVX    @DPTR,A
00AF         ?C0014:
                                           ; SOURCE LINE # 449
00AF 900000      E     MOV     DPTR,#EP0BUF+06H
00B2 7415              MOV     A,#015H
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
00B5 A3                INC     DPTR
00B6 E500        E     MOV     A,GP_Model
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
00B9 A3                INC     DPTR
00BA 7409              MOV     A,#09H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
00BD A3                INC     DPTR
00BE 7452              MOV     A,#052H
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
00C1 E4                CLR     A
00C2 A3                INC     DPTR
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
00C4 A3                INC     DPTR
00C5 F0                MOVX    @DPTR,A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 42  

                                           ; SOURCE LINE # 461
00C6 900000      E     MOV     DPTR,#EP0BCH
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
00CA 900000      E     MOV     DPTR,#EP0BCL
00CD 740C              MOV     A,#0CH
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
00CF 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 467
00D2         ?C0016:
                                           ; SOURCE LINE # 468
00D2 900000      E     MOV     DPTR,#EP0CS
00D5 E0                MOVX    A,@DPTR
00D6 20E1F9            JB      ACC.1,?C0016
00D9         ?C0017:
                                           ; SOURCE LINE # 470
00D9 E4                CLR     A
00DA F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
00DC FB                MOV     R3,A
00DD FD                MOV     R5,A
00DE 7F06              MOV     R7,#06H
00E0 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 472
00E3 908000            MOV     DPTR,#FPGA_Port
00E6 E0                MOVX    A,@DPTR
00E7 900000      E     MOV     DPTR,#EP0BUF+02H
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
00EB 908000            MOV     DPTR,#FPGA_Port
00EE E0                MOVX    A,@DPTR
00EF 900000      E     MOV     DPTR,#EP0BUF+01H
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
00F3 908000            MOV     DPTR,#FPGA_Port
00F6 E0                MOVX    A,@DPTR
00F7 900000      E     MOV     DPTR,#EP0BUF
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
00FB E4                CLR     A
00FC 900000      E     MOV     DPTR,#EP0BCH
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0100 900000      E     MOV     DPTR,#EP0BCL
0103 7403              MOV     A,#03H
0105         ?C0296:
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0105 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 482
0108         ?C0019:
                                           ; SOURCE LINE # 483
0108 900000      E     MOV     DPTR,#EP0CS
010B E0                MOVX    A,@DPTR
010C 20E1F9            JB      ACC.1,?C0019
010F         ?C0020:
                                           ; SOURCE LINE # 485
010F E4                CLR     A
0110 F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
0112 FB                MOV     R3,A
0113 FD                MOV     R5,A
0114 7F0C              MOV     R7,#0CH
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 43  

0116 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 487
0119 908000            MOV     DPTR,#FPGA_Port
011C E0                MOVX    A,@DPTR
011D 900000      E     MOV     DPTR,#EP0BUF
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
0121 908000            MOV     DPTR,#FPGA_Port
0124 E0                MOVX    A,@DPTR
0125 900000      E     MOV     DPTR,#EP0BUF+01H
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0129 E4                CLR     A
012A 900000      E     MOV     DPTR,#EP0BCH
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
012E 900000      E     MOV     DPTR,#EP0BCL
0131 7402              MOV     A,#02H
0133         ?C0297:
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
0133 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 496
0136         ?C0022:
                                           ; SOURCE LINE # 497
0136 900000      E     MOV     DPTR,#EP0CS
0139 E0                MOVX    A,@DPTR
013A 20E1F9            JB      ACC.1,?C0022
013D         ?C0023:
                                           ; SOURCE LINE # 499
013D E4                CLR     A
013E F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
0140 FB                MOV     R3,A
0141 FD                MOV     R5,A
0142 7F10              MOV     R7,#010H
0144 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 501
0147 908000            MOV     DPTR,#FPGA_Port
014A E0                MOVX    A,@DPTR
014B 900000      E     MOV     DPTR,#EP0BUF
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
014F E4                CLR     A
0150 900000      E     MOV     DPTR,#EP0BCH
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
0154 900000      E     MOV     DPTR,#EP0BCL
0157 04                INC     A
0158         ?C0298:
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0158 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 509
015B         ?C0025:
                                           ; SOURCE LINE # 510
015B 900000      E     MOV     DPTR,#EP0CS
015E E0                MOVX    A,@DPTR
015F 20E1F9            JB      ACC.1,?C0025
0162         ?C0026:
                                           ; SOURCE LINE # 512
0162 900000      E     MOV     DPTR,#EP0BUF
0165 E500        E     MOV     A,X_Mot_State
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 44  

0167 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0168 E4                CLR     A
0169 900000      E     MOV     DPTR,#EP0BCH
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
016D 900000      E     MOV     DPTR,#EP0BCL
0170 04                INC     A
0171         ?C0299:
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0171 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 520
0174         ?C0028:
                                           ; SOURCE LINE # 521
0174 900000      E     MOV     DPTR,#EP0CS
0177 E0                MOVX    A,@DPTR
0178 20E1F9            JB      ACC.1,?C0028
017B         ?C0029:
                                           ; SOURCE LINE # 523
017B 900000      E     MOV     DPTR,#EP0BUF
017E E500        E     MOV     A,Y_Mot_State
0180 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0181 E4                CLR     A
0182 900000      E     MOV     DPTR,#EP0BCH
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0186 900000      E     MOV     DPTR,#EP0BCL
0189 04                INC     A
018A         ?C0300:
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
018A 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 531
018D         ?C0031:
                                           ; SOURCE LINE # 532
018D 900000      E     MOV     DPTR,#EP0CS
0190 E0                MOVX    A,@DPTR
0191 20E1F9            JB      ACC.1,?C0031
0194         ?C0032:
0194         ?C0033:
                                           ; SOURCE LINE # 534
0194 E500        E     MOV     A,Y_Mot_State
0196 B401FB            CJNE    A,#01H,?C0033
0199         ?C0034:
0199         ?C0035:
                                           ; SOURCE LINE # 535
0199 E500        E     MOV     A,X_Mot_State
019B B401FB            CJNE    A,#01H,?C0035
019E         ?C0036:
                                           ; SOURCE LINE # 537
019E         ?C0295:
019E E4                CLR     A
019F 900000      E     MOV     DPTR,#EP0BUF
01A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
01A3 900000      E     MOV     DPTR,#EP0BCH
01A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
01A7 900000      E     MOV     DPTR,#EP0BCL
01AA 04                INC     A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 45  

01AB         ?C0301:
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
01AB 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 545
01AE         ?C0038:
                                           ; SOURCE LINE # 546
01AE 900000      E     MOV     DPTR,#EP0CS
01B1 E0                MOVX    A,@DPTR
01B2 20E1F9            JB      ACC.1,?C0038
01B5         ?C0039:
                                           ; SOURCE LINE # 548
01B5 750000      R     MOV     addr,#HIGH EEPROM_Register+014H
01B8 750000      R     MOV     addr+01H,#LOW EEPROM_Register+014H
                                           ; SOURCE LINE # 549
01BB 750000      R     MOV     bc,#00H
01BE 750010      R     MOV     bc+01H,#010H
                                           ; SOURCE LINE # 551
01C1 AD00        R     MOV     R5,bc+01H
01C3 7A00        E     MOV     R2,#HIGH EP0BUF
01C5 7900        E     MOV     R1,#LOW EP0BUF
01C7 7F00        E     MOV     R7,#LOW EP0BUF
01C9 AB07              MOV     R3,AR7
01CB AF00        R     MOV     R7,addr+01H
01CD AE00        R     MOV     R6,addr
01CF 120000      R     LCALL   _EEPROMRead
                                           ; SOURCE LINE # 553
01D2 E4                CLR     A
01D3 900000      E     MOV     DPTR,#EP0BCH
01D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
01D7 900000      E     MOV     DPTR,#EP0BCL
01DA 7410              MOV     A,#010H
01DC         ?C0302:
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
01DC 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 559
01DF         ?C0041:
                                           ; SOURCE LINE # 560
01DF 900000      E     MOV     DPTR,#EP0CS
01E2 E0                MOVX    A,@DPTR
01E3 20E1F9            JB      ACC.1,?C0041
01E6         ?C0042:
                                           ; SOURCE LINE # 563
01E6 E4                CLR     A
01E7 900000      E     MOV     DPTR,#EP0BCH
01EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
01EB 900000      E     MOV     DPTR,#EP0BCL
01EE 7403              MOV     A,#03H
01F0         ?C0303:
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
01F0 020000      R     LJMP    ?C0304
                                           ; SOURCE LINE # 602
01F3         ?C0043:
                                           ; SOURCE LINE # 603
01F3 E4                CLR     A
01F4 900000      E     MOV     DPTR,#EP0BCH
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 46  

01F8 900000      E     MOV     DPTR,#EP0BCL
01FB F0                MOVX    @DPTR,A
01FC         ?C0044:
                                           ; SOURCE LINE # 605
01FC 900000      E     MOV     DPTR,#EP0CS
01FF E0                MOVX    A,@DPTR
0200 20E1F9            JB      ACC.1,?C0044
0203         ?C0045:
                                           ; SOURCE LINE # 607
0203 D200        E     SETB    RAM_OK
                                           ; SOURCE LINE # 609
0205 900000      E     MOV     DPTR,#EP0BUF
0208 E0                MOVX    A,@DPTR
0209 B40104            CJNE    A,#01H,?C0046
                                           ; SOURCE LINE # 610
020C D200        E     SETB    RAM_Null
020E 805D              SJMP    ?C0305
0210         ?C0046:
                                           ; SOURCE LINE # 612
0210 C200        E     CLR     RAM_Null
0212         ?C0047:
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
0212 8059              SJMP    ?C0305
                                           ; SOURCE LINE # 619
0214         ?C0048:
                                           ; SOURCE LINE # 621
0214 D200        E     SETB    Print_End
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
0216 8055              SJMP    ?C0307
                                           ; SOURCE LINE # 629
0218         ?C0049:
                                           ; SOURCE LINE # 630
0218 E4                CLR     A
0219 900000      E     MOV     DPTR,#EP0BCH
021C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
021D 900000      E     MOV     DPTR,#EP0BCL
0220 F0                MOVX    @DPTR,A
0221         ?C0050:
                                           ; SOURCE LINE # 632
0221 900000      E     MOV     DPTR,#EP0CS
0224 E0                MOVX    A,@DPTR
0225 20E1F9            JB      ACC.1,?C0050
0228         ?C0051:
                                           ; SOURCE LINE # 634
0228 900000      E     MOV     DPTR,#EP0BUF+01H
022B E0                MOVX    A,@DPTR
022C 750000      R     MOV     i,#00H
022F F500        R     MOV     i+01H,A
                                           ; SOURCE LINE # 635
0231 A3                INC     DPTR
0232 E0                MOVX    A,@DPTR
0233 FE                MOV     R6,A
0234 EE                MOV     A,R6
0235 4200        R     ORL     i,A
                                           ; SOURCE LINE # 637
0237 A3                INC     DPTR
0238 E0                MOVX    A,@DPTR
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 47  

0239 750000      R     MOV     len,#00H
023C F500        R     MOV     len+01H,A
                                           ; SOURCE LINE # 638
023E A3                INC     DPTR
023F E0                MOVX    A,@DPTR
0240 FE                MOV     R6,A
0241 EE                MOV     A,R6
0242 4200        R     ORL     len,A
                                           ; SOURCE LINE # 640
0244 900000      E     MOV     DPTR,#EP0BUF
0247 E0                MOVX    A,@DPTR
0248 24FF              ADD     A,#0FFH
024A 9200        R     MOV     ?X_MOT_Move?BIT,C
024C 850000      R     MOV     ?X_MOT_Move?BYTE,i
024F 850000      R     MOV     ?X_MOT_Move?BYTE+01H,i+01H
0252 850000      R     MOV     ?X_MOT_Move?BYTE+02H,len
0255 850000      R     MOV     ?X_MOT_Move?BYTE+03H,len+01H
0258 120000      R     LCALL   X_MOT_Move
                                           ; SOURCE LINE # 642
025B         ?C0306:
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
025B 8010              SJMP    ?C0307
                                           ; SOURCE LINE # 647
025D         ?C0052:
                                           ; SOURCE LINE # 648
025D 120000      R     LCALL   X_MOT_Stop
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
0260 8060              SJMP    ?C0309
                                           ; SOURCE LINE # 655
0262         ?C0053:
                                           ; SOURCE LINE # 656
0262 75000E      E     MOV     GP_State,#0EH
                                           ; SOURCE LINE # 657
0265 120000      R     LCALL   X_MOT_Reset
0268 4003              JC      ?C0054
                                           ; SOURCE LINE # 658
026A 750004      E     MOV     GP_State,#04H
026D         ?C0054:
                                           ; SOURCE LINE # 660
026D         ?C0305:
026D         ?C0307:
026D         ?C0308:
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
026D 8053              SJMP    ?C0309
                                           ; SOURCE LINE # 665
026F         ?C0055:
                                           ; SOURCE LINE # 667
026F E4                CLR     A
0270 F500        E     MOV     X_Mot_State,A
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0272 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 674
0275         ?C0056:
                                           ; SOURCE LINE # 676
0275 750001      E     MOV     X_Mot_State,#01H
                                           ; SOURCE LINE # 678
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 48  

0278 E4                CLR     A
0279         ?C0310:
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
0279 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 684
027C         ?C0057:
                                           ; SOURCE LINE # 685
027C E4                CLR     A
027D 900000      E     MOV     DPTR,#EP0BCH
0280 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
0281 900000      E     MOV     DPTR,#EP0BCL
0284 F0                MOVX    @DPTR,A
0285         ?C0058:
                                           ; SOURCE LINE # 687
0285 900000      E     MOV     DPTR,#EP0CS
0288 E0                MOVX    A,@DPTR
0289 20E1F9            JB      ACC.1,?C0058
028C         ?C0059:
                                           ; SOURCE LINE # 689
028C 900000      E     MOV     DPTR,#EP0BUF+01H
028F E0                MOVX    A,@DPTR
0290 750000      R     MOV     len,#00H
0293 F500        R     MOV     len+01H,A
                                           ; SOURCE LINE # 690
0295 A3                INC     DPTR
0296 E0                MOVX    A,@DPTR
0297 FE                MOV     R6,A
0298 EE                MOV     A,R6
0299 4200        R     ORL     len,A
                                           ; SOURCE LINE # 692
029B 900000      E     MOV     DPTR,#EP0BUF
029E E0                MOVX    A,@DPTR
029F 24FF              ADD     A,#0FFH
02A1 9200        R     MOV     ?Y_MOT_Move?BIT,C
02A3 850000      R     MOV     ?Y_MOT_Move?BYTE,len
02A6 850000      R     MOV     ?Y_MOT_Move?BYTE+01H,len+01H
02A9 120000      R     LCALL   Y_MOT_Move
                                           ; SOURCE LINE # 694
02AC E4                CLR     A
02AD         ?C0311:
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
02AD 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 699
02B0         ?C0060:
                                           ; SOURCE LINE # 700
02B0 120000      R     LCALL   Y_MOT_Stop
                                           ; SOURCE LINE # 702
02B3 E4                CLR     A
02B4         ?C0312:
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
02B4 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 707
02B7         ?C0061:
                                           ; SOURCE LINE # 709
02B7 75000F      E     MOV     GP_State,#0FH
                                           ; SOURCE LINE # 710
02BA 120000      R     LCALL   Y_MOT_Reset
02BD 4003              JC      ?C0062
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 49  

                                           ; SOURCE LINE # 711
02BF 750005      E     MOV     GP_State,#05H
02C2         ?C0062:
                                           ; SOURCE LINE # 713
02C2         ?C0309:
02C2 E4                CLR     A
02C3         ?C0313:
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
02C3 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 718
02C6         ?C0063:
                                           ; SOURCE LINE # 719
02C6 C2A7              CLR     Y_Mot_EN
                                           ; SOURCE LINE # 720
02C8 E4                CLR     A
02C9 F500        E     MOV     Y_Mot_State,A
                                           ; SOURCE LINE # 722
02CB         ?C0314:
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
02CB 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 727
02CE         ?C0064:
                                           ; SOURCE LINE # 728
02CE D2A7              SETB    Y_Mot_EN
                                           ; SOURCE LINE # 729
02D0 750001      E     MOV     Y_Mot_State,#01H
                                           ; SOURCE LINE # 731
02D3 E4                CLR     A
02D4         ?C0315:
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
02D4 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 737
02D7         ?C0065:
                                           ; SOURCE LINE # 738
02D7 E4                CLR     A
02D8 900000      E     MOV     DPTR,#EP0BCH
02DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
02DC 900000      E     MOV     DPTR,#EP0BCL
02DF F0                MOVX    @DPTR,A
02E0         ?C0066:
                                           ; SOURCE LINE # 740
02E0 900000      E     MOV     DPTR,#EP0CS
02E3 E0                MOVX    A,@DPTR
02E4 20E1F9            JB      ACC.1,?C0066
02E7         ?C0067:
                                           ; SOURCE LINE # 742
02E7 900000      E     MOV     DPTR,#EP0BUF
02EA E0                MOVX    A,@DPTR
02EB FF                MOV     R7,A
02EC A3                INC     DPTR
02ED E0                MOVX    A,@DPTR
02EE FD                MOV     R5,A
02EF A3                INC     DPTR
02F0 E0                MOVX    A,@DPTR
02F1 FB                MOV     R3,A
02F2 A3                INC     DPTR
02F3 E0                MOVX    A,@DPTR
02F4 F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 50  

02F6 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 744
02F9 E4                CLR     A
02FA         ?C0316:
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
02FA 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 750
02FD         ?C0068:
                                           ; SOURCE LINE # 752
02FD C2A1              CLR     Laser_EN
                                           ; SOURCE LINE # 754
02FF E4                CLR     A
0300         ?C0317:
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
0300 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 759
0303         ?C0069:
                                           ; SOURCE LINE # 761
0303 D2A1              SETB    Laser_EN
                                           ; SOURCE LINE # 763
0305 E4                CLR     A
0306         ?C0318:
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
0306 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 768
0309         ?C0070:
                                           ; SOURCE LINE # 769
0309 E4                CLR     A
030A 900000      E     MOV     DPTR,#EP0BCH
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
030E 900000      E     MOV     DPTR,#EP0BCL
0311 F0                MOVX    @DPTR,A
0312         ?C0071:
                                           ; SOURCE LINE # 771
0312 900000      E     MOV     DPTR,#EP0CS
0315 E0                MOVX    A,@DPTR
0316 20E1F9            JB      ACC.1,?C0071
0319         ?C0072:
                                           ; SOURCE LINE # 773
0319 900000      E     MOV     DPTR,#EP0BUF
031C E0                MOVX    A,@DPTR
031D 750000      R     MOV     len,#00H
0320 F500        R     MOV     len+01H,A
                                           ; SOURCE LINE # 774
0322 A3                INC     DPTR
0323 E0                MOVX    A,@DPTR
0324 FE                MOV     R6,A
0325 EE                MOV     A,R6
0326 4200        R     ORL     len,A
                                           ; SOURCE LINE # 776
0328 AF00        R     MOV     R7,len+01H
032A AE00        R     MOV     R6,len
032C 120000      R     LCALL   _Laser_Plus_Set
                                           ; SOURCE LINE # 778
032F E4                CLR     A
0330         ?C0319:
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 51  

0330 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 783
0333         ?C0073:
                                           ; SOURCE LINE # 784
0333 E4                CLR     A
0334 900000      E     MOV     DPTR,#EP0BCH
0337 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
0338 900000      E     MOV     DPTR,#EP0BCL
033B F0                MOVX    @DPTR,A
033C         ?C0074:
                                           ; SOURCE LINE # 786
033C 900000      E     MOV     DPTR,#EP0CS
033F E0                MOVX    A,@DPTR
0340 20E1F9            JB      ACC.1,?C0074
0343         ?C0075:
                                           ; SOURCE LINE # 788
0343 900000      E     MOV     DPTR,#EP0BUF
0346 E0                MOVX    A,@DPTR
0347 7005              JNZ     ?C0076
                                           ; SOURCE LINE # 789
0349 53B1EF            ANL     IOE,#0EFH
034C 8003              SJMP    ?C0077
034E         ?C0076:
                                           ; SOURCE LINE # 791
034E 43B110            ORL     IOE,#010H
0351         ?C0077:
                                           ; SOURCE LINE # 793
0351 E4                CLR     A
0352         ?C0320:
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
0352 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 798
0355         ?C0078:
                                           ; SOURCE LINE # 799
0355 E4                CLR     A
0356 900000      E     MOV     DPTR,#EP0BCH
0359 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
035A 900000      E     MOV     DPTR,#EP0BCL
035D F0                MOVX    @DPTR,A
035E         ?C0079:
                                           ; SOURCE LINE # 801
035E 900000      E     MOV     DPTR,#EP0CS
0361 E0                MOVX    A,@DPTR
0362 20E1F9            JB      ACC.1,?C0079
0365         ?C0080:
                                           ; SOURCE LINE # 803
0365 750000      R     MOV     addr,#HIGH EEPROM_Register+014H
0368 750000      R     MOV     addr+01H,#LOW EEPROM_Register+014H
                                           ; SOURCE LINE # 804
036B 750000      R     MOV     bc,#00H
036E 750010      R     MOV     bc+01H,#010H
                                           ; SOURCE LINE # 806
0371 AD00        R     MOV     R5,bc+01H
0373 7A00        E     MOV     R2,#HIGH EP0BUF
0375 7900        E     MOV     R1,#LOW EP0BUF
0377 7F00        E     MOV     R7,#LOW EP0BUF
0379 AB07              MOV     R3,AR7
037B AF00        R     MOV     R7,addr+01H
037D AE00        R     MOV     R6,addr
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 52  

037F 120000      R     LCALL   _EEPROMWrite
                                           ; SOURCE LINE # 808
0382 E4                CLR     A
0383         ?C0321:
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
0383 8078              SJMP    ?C0324
                                           ; SOURCE LINE # 832
0385         ?C0081:
                                           ; SOURCE LINE # 833
0385 E4                CLR     A
0386 900000      E     MOV     DPTR,#EP0BCH
0389 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 834
038A 900000      E     MOV     DPTR,#EP0BCL
038D F0                MOVX    @DPTR,A
038E         ?C0082:
                                           ; SOURCE LINE # 835
038E 900000      E     MOV     DPTR,#EP0CS
0391 E0                MOVX    A,@DPTR
0392 20E1F9            JB      ACC.1,?C0082
0395         ?C0083:
                                           ; SOURCE LINE # 838
0395 E4                CLR     A
0396         ?C0322:
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0396 8065              SJMP    ?C0324
                                           ; SOURCE LINE # 843
0398         ?C0084:
                                           ; SOURCE LINE # 844
0398 E4                CLR     A
0399 900000      E     MOV     DPTR,#EP0BCH
039C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
039D 900000      E     MOV     DPTR,#EP0BCL
03A0 F0                MOVX    @DPTR,A
03A1         ?C0085:
                                           ; SOURCE LINE # 846
03A1 900000      E     MOV     DPTR,#EP0CS
03A4 E0                MOVX    A,@DPTR
03A5 20E1F9            JB      ACC.1,?C0085
03A8         ?C0086:
                                           ; SOURCE LINE # 848
03A8 900000      E     MOV     DPTR,#EP0BUF
03AB E0                MOVX    A,@DPTR
03AC 750000      E     MOV     ADJ_RAM_Addr,#00H
03AF F500        E     MOV     ADJ_RAM_Addr+01H,A
                                           ; SOURCE LINE # 849
03B1 A3                INC     DPTR
03B2 E0                MOVX    A,@DPTR
03B3 FE                MOV     R6,A
03B4 EE                MOV     A,R6
03B5 4200        E     ORL     ADJ_RAM_Addr,A
                                           ; SOURCE LINE # 851
03B7 E4                CLR     A
03B8         ?C0323:
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
03B8 8043              SJMP    ?C0324
                                           ; SOURCE LINE # 856
03BA         ?C0087:
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 53  

                                           ; SOURCE LINE # 857
03BA E4                CLR     A
03BB 900000      E     MOV     DPTR,#EP0BCH
03BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
03BF 900000      E     MOV     DPTR,#EP0BCL
03C2 F0                MOVX    @DPTR,A
03C3         ?C0088:
                                           ; SOURCE LINE # 859
03C3 900000      E     MOV     DPTR,#EP0CS
03C6 E0                MOVX    A,@DPTR
03C7 20E1F9            JB      ACC.1,?C0088
03CA         ?C0089:
                                           ; SOURCE LINE # 861
03CA E4                CLR     A
03CB F500        R     MOV     i,A
03CD F500        R     MOV     i+01H,A
03CF         ?C0090:
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
03CF 7400        E     MOV     A,#LOW EP0BUF
03D1 2500        R     ADD     A,i+01H
03D3 F582              MOV     DPL,A
03D5 E4                CLR     A
03D6 3400        E     ADDC    A,#HIGH EP0BUF
03D8 F583              MOV     DPH,A
03DA E0                MOVX    A,@DPTR
03DB FD                MOV     R5,A
03DC AF00        E     MOV     R7,ADJ_RAM_Addr+01H
03DE AE00        E     MOV     R6,ADJ_RAM_Addr
03E0 120000      R     LCALL   _ADJ_Write
                                           ; SOURCE LINE # 864
03E3 0500        E     INC     ADJ_RAM_Addr+01H
03E5 E500        E     MOV     A,ADJ_RAM_Addr+01H
03E7 7002              JNZ     ?C0278
03E9 0500        E     INC     ADJ_RAM_Addr
03EB         ?C0278:
                                           ; SOURCE LINE # 865
03EB 0500        R     INC     i+01H
03ED E500        R     MOV     A,i+01H
03EF 7002              JNZ     ?C0279
03F1 0500        R     INC     i
03F3         ?C0279:
03F3 C3                CLR     C
03F4 9410              SUBB    A,#010H
03F6 E500        R     MOV     A,i
03F8 9400              SUBB    A,#00H
03FA 40D3              JC      ?C0090
03FC         ?C0091:
                                           ; SOURCE LINE # 867
03FC E4                CLR     A
03FD         ?C0324:
03FD 900000      E     MOV     DPTR,#EP0BCH
0400 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 868
0401 900000      E     MOV     DPTR,#EP0BCL
0404 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
0405 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 872
0408         ?C0094:
                                           ; SOURCE LINE # 873
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 54  

0408 900000      E     MOV     DPTR,#EP0CS
040B E0                MOVX    A,@DPTR
040C 20E1F9            JB      ACC.1,?C0094
040F         ?C0095:
                                           ; SOURCE LINE # 875
040F E4                CLR     A
0410 F500        R     MOV     i,A
0412 F500        R     MOV     i+01H,A
0414         ?C0096:
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
0414 AF00        E     MOV     R7,ADJ_RAM_Addr+01H
0416 AE00        E     MOV     R6,ADJ_RAM_Addr
0418 120000      R     LCALL   _ADJ_Read
041B 7400        E     MOV     A,#LOW EP0BUF
041D 2500        R     ADD     A,i+01H
041F F582              MOV     DPL,A
0421 E4                CLR     A
0422 3400        E     ADDC    A,#HIGH EP0BUF
0424 F583              MOV     DPH,A
0426 EF                MOV     A,R7
0427 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 878
0428 0500        E     INC     ADJ_RAM_Addr+01H
042A E500        E     MOV     A,ADJ_RAM_Addr+01H
042C 7002              JNZ     ?C0280
042E 0500        E     INC     ADJ_RAM_Addr
0430         ?C0280:
                                           ; SOURCE LINE # 879
0430 0500        R     INC     i+01H
0432 E500        R     MOV     A,i+01H
0434 7002              JNZ     ?C0281
0436 0500        R     INC     i
0438         ?C0281:
0438 C3                CLR     C
0439 9410              SUBB    A,#010H
043B E500        R     MOV     A,i
043D 9400              SUBB    A,#00H
043F 40D3              JC      ?C0096
0441         ?C0097:
                                           ; SOURCE LINE # 881
0441 E4                CLR     A
0442 900000      E     MOV     DPTR,#EP0BCH
0445 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 882
0446 900000      E     MOV     DPTR,#EP0BCL
0449 7410              MOV     A,#010H
044B         ?C0304:
044B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
044C 900000      E     MOV     DPTR,#EP0CS
044F E0                MOVX    A,@DPTR
0450 4480              ORL     A,#080H
0452 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
0453 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 890
0456         ?C0099:
                                           ; SOURCE LINE # 891
0456 D200        E     SETB    DB_Addr
                                           ; SOURCE LINE # 892
0458 430001      E     ORL     I2C_Addr,#01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 55  

                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
045B         ?C0101:
                                           ; SOURCE LINE # 896
045B 900000      E     MOV     DPTR,#SETUPDAT+02H
045E E0                MOVX    A,@DPTR
045F 750000      R     MOV     addr,#00H
0462 F500        R     MOV     addr+01H,A
                                           ; SOURCE LINE # 897
0464 A3                INC     DPTR
0465 E0                MOVX    A,@DPTR
0466 FE                MOV     R6,A
0467 EE                MOV     A,R6
0468 4200        R     ORL     addr,A
                                           ; SOURCE LINE # 898
046A 900000      E     MOV     DPTR,#SETUPDAT+06H
046D E0                MOVX    A,@DPTR
046E 750000      R     MOV     len,#00H
0471 F500        R     MOV     len+01H,A
                                           ; SOURCE LINE # 899
0473 A3                INC     DPTR
0474 E0                MOVX    A,@DPTR
0475 FE                MOV     R6,A
0476 EE                MOV     A,R6
0477 4200        R     ORL     len,A
                                           ; SOURCE LINE # 901
0479 900000      E     MOV     DPTR,#SETUPDAT
047C E0                MOVX    A,@DPTR
047D 64C0              XRL     A,#0C0H
047F 6003              JZ      $ + 5H
0481 020000      R     LJMP    ?C0102
                                           ; SOURCE LINE # 902
0484         ?C0103:
                                           ; SOURCE LINE # 903
0484 E500        R     MOV     A,len+01H
0486 4500        R     ORL     A,len
0488 7003              JNZ     $ + 5H
048A 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 904
048D         ?C0105:
                                           ; SOURCE LINE # 906
048D 900000      E     MOV     DPTR,#EP0CS
0490 E0                MOVX    A,@DPTR
0491 20E1F9            JB      ACC.1,?C0105
0494         ?C0106:
                                           ; SOURCE LINE # 908
0494 C3                CLR     C
0495 E500        R     MOV     A,len+01H
0497 9440              SUBB    A,#040H
0499 E500        R     MOV     A,len
049B 9400              SUBB    A,#00H
049D 5008              JNC     ?C0107
                                           ; SOURCE LINE # 909
049F 850000      R     MOV     bc,len
04A2 850000      R     MOV     bc+01H,len+01H
04A5 8006              SJMP    ?C0108
04A7         ?C0107:
                                           ; SOURCE LINE # 911
04A7 750000      R     MOV     bc,#00H
04AA 750040      R     MOV     bc+01H,#040H
04AD         ?C0108:
                                           ; SOURCE LINE # 914
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 56  

04AD 900000      E     MOV     DPTR,#SETUPDAT+01H
04B0 E0                MOVX    A,@DPTR
04B1 B4A335            CJNE    A,#0A3H,?C0109
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
04B4 E4                CLR     A
04B5 F500        R     MOV     i,A
04B7 F500        R     MOV     i+01H,A
04B9         ?C0110:
04B9 C3                CLR     C
04BA E500        R     MOV     A,i+01H
04BC 9500        R     SUBB    A,bc+01H
04BE E500        R     MOV     A,i
04C0 9500        R     SUBB    A,bc
04C2 505E              JNC     ?C0113
                                           ; SOURCE LINE # 917
04C4 E500        R     MOV     A,addr+01H
04C6 2500        R     ADD     A,i+01H
04C8 F582              MOV     DPL,A
04CA E500        R     MOV     A,addr
04CC 3500        R     ADDC    A,i
04CE F583              MOV     DPH,A
04D0 E0                MOVX    A,@DPTR
04D1 FF                MOV     R7,A
04D2 7400        E     MOV     A,#LOW EP0BUF
04D4 2500        R     ADD     A,i+01H
04D6 F582              MOV     DPL,A
04D8 E4                CLR     A
04D9 3400        E     ADDC    A,#HIGH EP0BUF
04DB F583              MOV     DPH,A
04DD EF                MOV     A,R7
04DE F0                MOVX    @DPTR,A
04DF 0500        R     INC     i+01H
04E1 E500        R     MOV     A,i+01H
04E3 70D4              JNZ     ?C0110
04E5 0500        R     INC     i
04E7         ?C0282:
04E7 80D0              SJMP    ?C0110
                                           ; SOURCE LINE # 918
04E9         ?C0109:
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
04E9 E4                CLR     A
04EA F500        R     MOV     i,A
04EC F500        R     MOV     i+01H,A
04EE         ?C0114:
04EE C3                CLR     C
04EF E500        R     MOV     A,i+01H
04F1 9500        R     SUBB    A,bc+01H
04F3 E500        R     MOV     A,i
04F5 9500        R     SUBB    A,bc
04F7 5018              JNC     ?C0115
                                           ; SOURCE LINE # 922
04F9 7400        E     MOV     A,#LOW EP0BUF
04FB 2500        R     ADD     A,i+01H
04FD F582              MOV     DPL,A
04FF E4                CLR     A
0500 3400        E     ADDC    A,#HIGH EP0BUF
0502 F583              MOV     DPH,A
0504 74CD              MOV     A,#0CDH
0506 F0                MOVX    @DPTR,A
0507 0500        R     INC     i+01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 57  

0509 E500        R     MOV     A,i+01H
050B 70E1              JNZ     ?C0114
050D 0500        R     INC     i
050F         ?C0283:
050F 80DD              SJMP    ?C0114
0511         ?C0115:
                                           ; SOURCE LINE # 923
0511 AD00        R     MOV     R5,bc+01H
0513 7A00        E     MOV     R2,#HIGH EP0BUF
0515 7900        E     MOV     R1,#LOW EP0BUF
0517 7F00        E     MOV     R7,#LOW EP0BUF
0519 AB07              MOV     R3,AR7
051B AF00        R     MOV     R7,addr+01H
051D AE00        R     MOV     R6,addr
051F 120000      R     LCALL   _EEPROMRead
                                           ; SOURCE LINE # 924
0522         ?C0113:
                                           ; SOURCE LINE # 926
0522 E4                CLR     A
0523 900000      E     MOV     DPTR,#EP0BCH
0526 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
0527 900000      E     MOV     DPTR,#EP0BCL
052A E500        R     MOV     A,bc+01H
052C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 929
052D 2500        R     ADD     A,addr+01H
052F F500        R     MOV     addr+01H,A
0531 E500        R     MOV     A,bc
0533 3500        R     ADDC    A,addr
0535 F500        R     MOV     addr,A
                                           ; SOURCE LINE # 930
0537 C3                CLR     C
0538 E500        R     MOV     A,len+01H
053A 9500        R     SUBB    A,bc+01H
053C F500        R     MOV     len+01H,A
053E E500        R     MOV     A,len
0540 9500        R     SUBB    A,bc
0542 F500        R     MOV     len,A
                                           ; SOURCE LINE # 932
0544 020000      R     LJMP    ?C0103
                                           ; SOURCE LINE # 933
0547         ?C0102:
                                           ; SOURCE LINE # 935
0547 900000      E     MOV     DPTR,#SETUPDAT
054A E0                MOVX    A,@DPTR
054B 6440              XRL     A,#040H
054D 6003              JZ      $ + 5H
054F 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 936
0552         ?C0119:
                                           ; SOURCE LINE # 937
0552 E500        R     MOV     A,len+01H
0554 4500        R     ORL     A,len
0556 7003              JNZ     $ + 5H
0558 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 940
055B E4                CLR     A
055C 900000      E     MOV     DPTR,#EP0BCH
055F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 58  

0560 900000      E     MOV     DPTR,#EP0BCL
0563 F0                MOVX    @DPTR,A
0564         ?C0121:
                                           ; SOURCE LINE # 943
0564 900000      E     MOV     DPTR,#EP0CS
0567 E0                MOVX    A,@DPTR
0568 20E1F9            JB      ACC.1,?C0121
056B         ?C0122:
                                           ; SOURCE LINE # 945
056B 900000      E     MOV     DPTR,#EP0BCL
056E E0                MOVX    A,@DPTR
056F 750000      R     MOV     bc,#00H
0572 F500        R     MOV     bc+01H,A
                                           ; SOURCE LINE # 948
0574 900000      E     MOV     DPTR,#SETUPDAT+01H
0577 E0                MOVX    A,@DPTR
0578 B4A335            CJNE    A,#0A3H,?C0123
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
057B E4                CLR     A
057C F500        R     MOV     i,A
057E F500        R     MOV     i+01H,A
0580         ?C0124:
0580 C3                CLR     C
0581 E500        R     MOV     A,i+01H
0583 9500        R     SUBB    A,bc+01H
0585 E500        R     MOV     A,i
0587 9500        R     SUBB    A,bc
0589 5036              JNC     ?C0127
                                           ; SOURCE LINE # 951
058B 7400        E     MOV     A,#LOW EP0BUF
058D 2500        R     ADD     A,i+01H
058F F582              MOV     DPL,A
0591 E4                CLR     A
0592 3400        E     ADDC    A,#HIGH EP0BUF
0594 F583              MOV     DPH,A
0596 E0                MOVX    A,@DPTR
0597 FF                MOV     R7,A
0598 E500        R     MOV     A,addr+01H
059A 2500        R     ADD     A,i+01H
059C F582              MOV     DPL,A
059E E500        R     MOV     A,addr
05A0 3500        R     ADDC    A,i
05A2 F583              MOV     DPH,A
05A4 EF                MOV     A,R7
05A5 F0                MOVX    @DPTR,A
05A6 0500        R     INC     i+01H
05A8 E500        R     MOV     A,i+01H
05AA 70D4              JNZ     ?C0124
05AC 0500        R     INC     i
05AE         ?C0284:
05AE 80D0              SJMP    ?C0124
                                           ; SOURCE LINE # 952
05B0         ?C0123:
                                           ; SOURCE LINE # 954
05B0 AD00        R     MOV     R5,bc+01H
05B2 7A00        E     MOV     R2,#HIGH EP0BUF
05B4 7900        E     MOV     R1,#LOW EP0BUF
05B6 7F00        E     MOV     R7,#LOW EP0BUF
05B8 AB07              MOV     R3,AR7
05BA AF00        R     MOV     R7,addr+01H
05BC AE00        R     MOV     R6,addr
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 59  

05BE 120000      R     LCALL   _EEPROMWrite
05C1         ?C0127:
                                           ; SOURCE LINE # 956
05C1 E500        R     MOV     A,bc+01H
05C3 2500        R     ADD     A,addr+01H
05C5 F500        R     MOV     addr+01H,A
05C7 E500        R     MOV     A,bc
05C9 3500        R     ADDC    A,addr
05CB F500        R     MOV     addr,A
                                           ; SOURCE LINE # 957
05CD C3                CLR     C
05CE E500        R     MOV     A,len+01H
05D0 9500        R     SUBB    A,bc+01H
05D2 F500        R     MOV     len+01H,A
05D4 E500        R     MOV     A,len
05D6 9500        R     SUBB    A,bc
05D8 F500        R     MOV     len,A
                                           ; SOURCE LINE # 958
05DA 020000      R     LJMP    ?C0119
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 963
05DD         ?C0128:
                                           ; SOURCE LINE # 964
05DD D3                SETB    C
05DE 22                RET     
                                           ; SOURCE LINE # 965
05DF         ?C0006:
                                           ; SOURCE LINE # 967
05DF C3                CLR     C
                                           ; SOURCE LINE # 969
05E0         ?C0129:
05E0 22                RET     
             ; FUNCTION DR_VendorCmnd (END)

             ; FUNCTION Exter_Int_0 (BEGIN)
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1055
0000 32                RETI    
             ; FUNCTION Exter_Int_0 (END)

             ; FUNCTION Exter_Int_1 (BEGIN)
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1061
0000 32                RETI    
             ; FUNCTION Exter_Int_1 (END)

             ; FUNCTION Timer1_Int_0 (BEGIN)
0000 C0E0              PUSH    ACC
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0002 C2A1              CLR     Laser_EN
                                           ; SOURCE LINE # 1070
0004 C28E              CLR     TR1
                                           ; SOURCE LINE # 1072
0006 E500        E     MOV     A,Laser_Plus_Time+01H
0008 F58B              MOV     TL1,A
                                           ; SOURCE LINE # 1073
000A E500        E     MOV     A,Laser_Plus_Time
000C F58D              MOV     TH1,A
                                           ; SOURCE LINE # 1075
000E D28E              SETB    TR1
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 60  

                                           ; SOURCE LINE # 1077
0010 D2A1              SETB    Laser_EN
                                           ; SOURCE LINE # 1078
0012 D0E0              POP     ACC
0014 32                RETI    
             ; FUNCTION Timer1_Int_0 (END)

             ; FUNCTION _Laser_Plus_Set (BEGIN)
                                           ; SOURCE LINE # 1081
;---- Variable 'lTimer' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
0000 C28E              CLR     TR1
                                           ; SOURCE LINE # 1084
0002 D2A1              SETB    Laser_EN
                                           ; SOURCE LINE # 1086
0004 8E00        E     MOV     Laser_Plus_Time,R6
0006 8F00        E     MOV     Laser_Plus_Time+01H,R7
                                           ; SOURCE LINE # 1088
0008 E500        E     MOV     A,Laser_Plus_Time+01H
000A 4500        E     ORL     A,Laser_Plus_Time
000C 6009              JZ      ?C0134
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
000E EF                MOV     A,R7
000F F58B              MOV     TL1,A
                                           ; SOURCE LINE # 1091
0011 E500        E     MOV     A,Laser_Plus_Time
0013 F58D              MOV     TH1,A
                                           ; SOURCE LINE # 1093
0015 D28E              SETB    TR1
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
0017         ?C0134:
0017 22                RET     
             ; FUNCTION _Laser_Plus_Set (END)

             ; FUNCTION Timer2_Int_0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D018            MOV     PSW,#018H
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1121
000B C2A4              CLR     X_Mot_CP
                                           ; SOURCE LINE # 1123
000D C2CF              CLR     TF2
                                           ; SOURCE LINE # 1125
000F E500        E     MOV     A,X_Mot_State
0011 24FD              ADD     A,#0FDH
0013 6043              JZ      ?C0138
0015 14                DEC     A
0016 6063              JZ      ?C0140
0018 2402              ADD     A,#02H
001A 6003              JZ      $ + 5H
001C 020000      R     LJMP    ?C0135
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1128
001F         ?C0136:
                                           ; SOURCE LINE # 1129
001F E500        E     MOV     A,X_Timer_ip+01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 61  

0021 25E0              ADD     A,ACC
0023 FF                MOV     R7,A
0024 E500        E     MOV     A,X_Timer_ip
0026 33                RLC     A
0027 FE                MOV     R6,A
0028 7400        R     MOV     A,#LOW X_Mot_Time
002A 2F                ADD     A,R7
002B F582              MOV     DPL,A
002D 7400        R     MOV     A,#HIGH X_Mot_Time
002F 3E                ADDC    A,R6
0030 F583              MOV     DPH,A
0032 E4                CLR     A
0033 93                MOVC    A,@A+DPTR
0034 FE                MOV     R6,A
0035 7401              MOV     A,#01H
0037 93                MOVC    A,@A+DPTR
0038 F5CA              MOV     RCAP2L,A
                                           ; SOURCE LINE # 1130
003A EE                MOV     A,R6
003B F5CB              MOV     RCAP2H,A
                                           ; SOURCE LINE # 1132
003D 0500        E     INC     X_Timer_ip+01H
003F E500        E     MOV     A,X_Timer_ip+01H
0041 7002              JNZ     ?C0285
0043 0500        E     INC     X_Timer_ip
0045         ?C0285:
                                           ; SOURCE LINE # 1134
0045 E500        E     MOV     A,X_Timer_Add+01H
0047 1500        E     DEC     X_Timer_Add+01H
0049 7002              JNZ     ?C0286
004B 1500        E     DEC     X_Timer_Add
004D         ?C0286:
                                           ; SOURCE LINE # 1136
004D E500        E     MOV     A,X_Timer_Add+01H
004F 4500        E     ORL     A,X_Timer_Add
0051 705D              JNZ     ?C0135
                                           ; SOURCE LINE # 1137
0053 750003      E     MOV     X_Mot_State,#03H
                                           ; SOURCE LINE # 1139
0056 8058              SJMP    ?C0135
                                           ; SOURCE LINE # 1142
0058         ?C0138:
                                           ; SOURCE LINE # 1143
0058 8500CA      E     MOV     RCAP2L,X_Speed_Time_L
                                           ; SOURCE LINE # 1144
005B 8500CB      E     MOV     RCAP2H,X_Speed_Time_H
                                           ; SOURCE LINE # 1146
005E E500        E     MOV     A,X_Mot_Run_Len+01H
0060 1500        E     DEC     X_Mot_Run_Len+01H
0062 7002              JNZ     ?C0287
0064 1500        E     DEC     X_Mot_Run_Len
0066         ?C0287:
                                           ; SOURCE LINE # 1148
0066 E500        E     MOV     A,X_Mot_Run_Len+01H
0068 4500        E     ORL     A,X_Mot_Run_Len
006A 700B              JNZ     ?C0139
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
006C 750004      E     MOV     X_Mot_State,#04H
                                           ; SOURCE LINE # 1152
006F E500        E     MOV     A,X_Timer_ip+01H
0071 1500        E     DEC     X_Timer_ip+01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 62  

0073 7002              JNZ     ?C0288
0075 1500        E     DEC     X_Timer_ip
0077         ?C0288:
                                           ; SOURCE LINE # 1153
0077         ?C0139:
                                           ; SOURCE LINE # 1155
0077 00                NOP     
                                           ; SOURCE LINE # 1156
0078 00                NOP     
                                           ; SOURCE LINE # 1161
0079 8035              SJMP    ?C0135
                                           ; SOURCE LINE # 1164
007B         ?C0140:
                                           ; SOURCE LINE # 1165
007B E500        E     MOV     A,X_Timer_ip+01H
007D 25E0              ADD     A,ACC
007F FF                MOV     R7,A
0080 E500        E     MOV     A,X_Timer_ip
0082 33                RLC     A
0083 FE                MOV     R6,A
0084 7400        R     MOV     A,#LOW X_Mot_Time
0086 2F                ADD     A,R7
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH X_Mot_Time
008B 3E                ADDC    A,R6
008C F583              MOV     DPH,A
008E E4                CLR     A
008F 93                MOVC    A,@A+DPTR
0090 FE                MOV     R6,A
0091 7401              MOV     A,#01H
0093 93                MOVC    A,@A+DPTR
0094 F5CA              MOV     RCAP2L,A
                                           ; SOURCE LINE # 1166
0096 EE                MOV     A,R6
0097 F5CB              MOV     RCAP2H,A
                                           ; SOURCE LINE # 1168
0099 E500        E     MOV     A,X_Timer_ip+01H
009B 4500        E     ORL     A,X_Timer_ip
009D 7009              JNZ     ?C0141
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
009F C2CF              CLR     TF2
                                           ; SOURCE LINE # 1171
00A1 C2CA              CLR     TR2
                                           ; SOURCE LINE # 1172
00A3 750001      E     MOV     X_Mot_State,#01H
                                           ; SOURCE LINE # 1174
00A6 8008              SJMP    ?C0135
00A8         ?C0141:
                                           ; SOURCE LINE # 1176
00A8 E500        E     MOV     A,X_Timer_ip+01H
00AA 1500        E     DEC     X_Timer_ip+01H
00AC 7002              JNZ     ?C0289
00AE 1500        E     DEC     X_Timer_ip
00B0         ?C0289:
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
00B0         ?C0135:
                                           ; SOURCE LINE # 1181
00B0 D2A4              SETB    X_Mot_CP
                                           ; SOURCE LINE # 1182
00B2 D0D0              POP     PSW
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 63  

00B4 D082              POP     DPL
00B6 D083              POP     DPH
00B8 D0E0              POP     ACC
00BA 32                RETI    
             ; FUNCTION Timer2_Int_0 (END)

             ; FUNCTION L?0330 (BEGIN)
0000 D200        R     SETB    ?X_MOT_Move?BIT
0002 750096      R     MOV     ?X_MOT_Move?BYTE,#096H
0005 750088      R     MOV     ?X_MOT_Move?BYTE+01H,#088H
0008 750000      R     MOV     ?X_MOT_Move?BYTE+02H,#00H
000B 7500DE      R     MOV     ?X_MOT_Move?BYTE+03H,#0DEH
             ; FUNCTION X_MOT_Move (BEGIN)
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1190
000E E500        E     MOV     A,X_Mot_State
0010 6006              JZ      ?C0144
0012 6401              XRL     A,#01H
0014 6002              JZ      ?C0144
                                           ; SOURCE LINE # 1191
0016 C3                CLR     C
0017 22                RET     
0018         ?C0144:
                                           ; SOURCE LINE # 1200
0018 E500        R     MOV     A,X_Speed_Time+01H
001A F500        E     MOV     X_Speed_Time_L,A
                                           ; SOURCE LINE # 1201
001C E500        R     MOV     A,X_Speed_Time
001E F500        E     MOV     X_Speed_Time_H,A
                                           ; SOURCE LINE # 1204
0020 E4                CLR     A
0021 F500        E     MOV     X_Timer_Add,A
0023 F500        E     MOV     X_Timer_Add+01H,A
0025         ?C0146:
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0025 E500        E     MOV     A,X_Timer_Add+01H
0027 25E0              ADD     A,ACC
0029 FF                MOV     R7,A
002A E500        E     MOV     A,X_Timer_Add
002C 33                RLC     A
002D FE                MOV     R6,A
002E 7400        R     MOV     A,#LOW X_Mot_Time
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 7400        R     MOV     A,#HIGH X_Mot_Time
0035 3E                ADDC    A,R6
0036 F583              MOV     DPH,A
0038 D3                SETB    C
0039 7401              MOV     A,#01H
003B 93                MOVC    A,@A+DPTR
003C 9500        R     SUBB    A,X_Speed_Time+01H
003E E4                CLR     A
003F 93                MOVC    A,@A+DPTR
0040 9500        R     SUBB    A,X_Speed_Time
0042 5019              JNC     ?C0147
                                           ; SOURCE LINE # 1207
0044         ?C0149:
                                           ; SOURCE LINE # 1209
0044 C3                CLR     C
0045 EF                MOV     A,R7
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 64  

0046 9500        R     SUBB    A,X_Len+01H
0048 EE                MOV     A,R6
0049 9500        R     SUBB    A,X_Len
004B 5010              JNC     ?C0147
                                           ; SOURCE LINE # 1210
004D         ?C0150:
                                           ; SOURCE LINE # 1211
004D         ?C0148:
004D 0500        E     INC     X_Timer_Add+01H
004F E500        E     MOV     A,X_Timer_Add+01H
0051 7002              JNZ     ?C0290
0053 0500        E     INC     X_Timer_Add
0055         ?C0290:
0055 B4E0CD            CJNE    A,#0E0H,?C0146
0058 E500        E     MOV     A,X_Timer_Add
005A B401C8            CJNE    A,#01H,?C0146
005D         ?C0147:
                                           ; SOURCE LINE # 1213
005D E500        E     MOV     A,X_Timer_Add+01H
005F 1500        E     DEC     X_Timer_Add+01H
0061 7002              JNZ     ?C0292
0063 1500        E     DEC     X_Timer_Add
0065         ?C0292:
                                           ; SOURCE LINE # 1216
0065 E500        E     MOV     A,X_Timer_Add+01H
0067 25E0              ADD     A,ACC
0069 FF                MOV     R7,A
006A E500        E     MOV     A,X_Timer_Add
006C 33                RLC     A
006D FE                MOV     R6,A
006E C3                CLR     C
006F E500        R     MOV     A,X_Len+01H
0071 9F                SUBB    A,R7
0072 F500        E     MOV     X_Mot_Run_Len+01H,A
0074 E500        R     MOV     A,X_Len
0076 9E                SUBB    A,R6
0077 F500        E     MOV     X_Mot_Run_Len,A
                                           ; SOURCE LINE # 1219
0079 D3                SETB    C
007A E500        E     MOV     A,X_Mot_Run_Len+01H
007C 9472              SUBB    A,#072H
007E E500        E     MOV     A,X_Mot_Run_Len
0080 9445              SUBB    A,#045H
0082 4001              JC      ?C0151
                                           ; SOURCE LINE # 1220
0084 22                RET     
0085         ?C0151:
                                           ; SOURCE LINE # 1223
0085 A200        R     MOV     C,X_Dir
0087 92A3              MOV     X_Mot_Dir,C
                                           ; SOURCE LINE # 1225
0089 E4                CLR     A
008A F500        E     MOV     X_Timer_ip,A
008C F500        E     MOV     X_Timer_ip+01H,A
                                           ; SOURCE LINE # 1227
008E 900000      R     MOV     DPTR,#X_Mot_Time
0091 93                MOVC    A,@A+DPTR
0092 FE                MOV     R6,A
0093 7401              MOV     A,#01H
0095 93                MOVC    A,@A+DPTR
0096 FD                MOV     R5,A
0097 F5CA              MOV     RCAP2L,A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 65  

0099 8DCC              MOV     TL2,R5
                                           ; SOURCE LINE # 1228
009B EE                MOV     A,R6
009C F5CB              MOV     RCAP2H,A
009E F5CD              MOV     TH2,A
                                           ; SOURCE LINE # 1230
00A0 750002      E     MOV     X_Mot_State,#02H
                                           ; SOURCE LINE # 1232
00A3 D2CA              SETB    TR2
                                           ; SOURCE LINE # 1234
00A5 D3                SETB    C
                                           ; SOURCE LINE # 1235
00A6         ?C0145:
00A6 22                RET     
             ; FUNCTION X_MOT_Move (END)

             ; FUNCTION X_MOT_Stop (BEGIN)
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1240
0000 E500        E     MOV     A,X_Mot_State
0002 6007              JZ      ?C0154
0004 6401              XRL     A,#01H
0006 6003              JZ      ?C0154
0008         ?C0152:
                                           ; SOURCE LINE # 1243
0008 750004      E     MOV     X_Mot_State,#04H
                                           ; SOURCE LINE # 1244
000B         ?C0154:
000B 22                RET     
             ; FUNCTION X_MOT_Stop (END)

             ; FUNCTION X_MOT_Reset (BEGIN)
                                           ; SOURCE LINE # 1247
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1250
0000 E500        E     MOV     A,X_Mot_State
0002 6006              JZ      ?C0155
0004 6401              XRL     A,#01H
0006 6002              JZ      ?C0155
                                           ; SOURCE LINE # 1251
0008 C3                CLR     C
0009 22                RET     
000A         ?C0155:
                                           ; SOURCE LINE # 1254
000A 30A514            JNB     X_Mot_Pos,?C0157
                                           ; SOURCE LINE # 1255
                                           ; SOURCE LINE # 1256
000D 120000      R     LCALL   L?0330
0010         ?C0158:
                                           ; SOURCE LINE # 1258
0010 E500        E     MOV     A,X_Mot_State
0012 B401FB            CJNE    A,#01H,?C0158
0015         ?C0159:
                                           ; SOURCE LINE # 1260
0015 30A502            JNB     X_Mot_Pos,?C0160
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1264
0018 8059              SJMP    ?C0326
                                           ; SOURCE LINE # 1265
001A         ?C0160:
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 66  

                                           ; SOURCE LINE # 1267
001A 7F64              MOV     R7,#064H
001C 7E00              MOV     R6,#00H
001E 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1268
0021         ?C0157:
                                           ; SOURCE LINE # 1271
0021 C200        R     CLR     ?X_MOT_Move?BIT
0023 750096      R     MOV     ?X_MOT_Move?BYTE,#096H
0026 750088      R     MOV     ?X_MOT_Move?BYTE+01H,#088H
0029 750022      R     MOV     ?X_MOT_Move?BYTE+02H,#022H
002C 7500B9      R     MOV     ?X_MOT_Move?BYTE+03H,#0B9H
002F 120000      R     LCALL   X_MOT_Move
0032         ?C0161:
                                           ; SOURCE LINE # 1273
0032 20A507            JB      X_Mot_Pos,?C0162
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1275
0035 E500        E     MOV     A,X_Mot_State
0037 B401F8            CJNE    A,#01H,?C0161
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
003A         ?C0325:
                                           ; SOURCE LINE # 1279
003A 8037              SJMP    ?C0326
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
003C         ?C0162:
                                           ; SOURCE LINE # 1283
003C 750004      E     MOV     X_Mot_State,#04H
003F         ?C0164:
                                           ; SOURCE LINE # 1285
003F E500        E     MOV     A,X_Mot_State
0041 B401FB            CJNE    A,#01H,?C0164
0044         ?C0165:
                                           ; SOURCE LINE # 1287
0044 7F64              MOV     R7,#064H
0046 7E00              MOV     R6,#00H
0048 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1290
004B 120000      R     LCALL   L?0330
004E         ?C0166:
                                           ; SOURCE LINE # 1292
004E E500        E     MOV     A,X_Mot_State
0050 B401FB            CJNE    A,#01H,?C0166
0053         ?C0167:
                                           ; SOURCE LINE # 1294
0053 7F64              MOV     R7,#064H
0055 7E00              MOV     R6,#00H
0057 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1297
005A C200        R     CLR     ?X_MOT_Move?BIT
005C 750096      R     MOV     ?X_MOT_Move?BYTE,#096H
005F 750088      R     MOV     ?X_MOT_Move?BYTE+01H,#088H
0062 750022      R     MOV     ?X_MOT_Move?BYTE+02H,#022H
0065 7500B9      R     MOV     ?X_MOT_Move?BYTE+03H,#0B9H
0068 120000      R     LCALL   X_MOT_Move
006B         ?C0168:
                                           ; SOURCE LINE # 1299
006B 20A50A            JB      X_Mot_Pos,?C0169
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 67  

006E E500        E     MOV     A,X_Mot_State
0070 B401F8            CJNE    A,#01H,?C0168
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
0073         ?C0326:
0073 E4                CLR     A
0074 F500        E     MOV     X_Mot_State,A
                                           ; SOURCE LINE # 1305
0076 C3                CLR     C
0077 22                RET     
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1307
0078         ?C0169:
                                           ; SOURCE LINE # 1309
0078 750004      E     MOV     X_Mot_State,#04H
007B         ?C0171:
                                           ; SOURCE LINE # 1311
007B E500        E     MOV     A,X_Mot_State
007D B401FB            CJNE    A,#01H,?C0171
0080         ?C0172:
                                           ; SOURCE LINE # 1313
0080 7F64              MOV     R7,#064H
0082 7E00              MOV     R6,#00H
0084 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1316
0087 D200        R     SETB    ?X_MOT_Move?BIT
0089 750096      R     MOV     ?X_MOT_Move?BYTE,#096H
008C 750088      R     MOV     ?X_MOT_Move?BYTE+01H,#088H
008F 750000      R     MOV     ?X_MOT_Move?BYTE+02H,#00H
0092 750016      R     MOV     ?X_MOT_Move?BYTE+03H,#016H
0095 120000      R     LCALL   X_MOT_Move
0098         ?C0173:
                                           ; SOURCE LINE # 1318
0098 E500        E     MOV     A,X_Mot_State
009A B401FB            CJNE    A,#01H,?C0173
009D         ?C0174:
                                           ; SOURCE LINE # 1320
009D D3                SETB    C
                                           ; SOURCE LINE # 1321
009E         ?C0156:
009E 22                RET     
             ; FUNCTION X_MOT_Reset (END)

             ; FUNCTION Timer0_Int_0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D000            MOV     PSW,#00H
000B C006              PUSH    AR6
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1327
000D C280              CLR     Y_Mot_CP
                                           ; SOURCE LINE # 1329
000F C28C              CLR     TR0
                                           ; SOURCE LINE # 1331
0011 E500        E     MOV     A,Y_Timer_ip
0013 25E0              ADD     A,ACC
0015 2400        R     ADD     A,#LOW Y_Mot_Time
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        R     ADDC    A,#HIGH Y_Mot_Time
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 68  

001C F583              MOV     DPH,A
001E E4                CLR     A
001F 93                MOVC    A,@A+DPTR
0020 FE                MOV     R6,A
0021 7401              MOV     A,#01H
0023 93                MOVC    A,@A+DPTR
0024 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 1332
0026 EE                MOV     A,R6
0027 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 1333
0029 D28C              SETB    TR0
                                           ; SOURCE LINE # 1335
002B E500        E     MOV     A,Y_Mot_State
002D 24FD              ADD     A,#0FDH
002F 6017              JZ      ?C0178
0031 14                DEC     A
0032 6027              JZ      ?C0180
0034 14                DEC     A
0035 6031              JZ      ?C0183
0037 2403              ADD     A,#03H
0039 7032              JNZ     ?C0175
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1337
003B         ?C0176:
                                           ; SOURCE LINE # 1338
003B 0500        E     INC     Y_Timer_ip
                                           ; SOURCE LINE # 1340
003D E500        E     MOV     A,Y_Timer_ip
003F 640E              XRL     A,#0EH
0041 702A              JNZ     ?C0175
                                           ; SOURCE LINE # 1341
0043 750003      E     MOV     Y_Mot_State,#03H
                                           ; SOURCE LINE # 1343
0046 8025              SJMP    ?C0175
                                           ; SOURCE LINE # 1345
0048         ?C0178:
                                           ; SOURCE LINE # 1346
0048 E500        E     MOV     A,Y_Mot_Run_Len+01H
004A 1500        E     DEC     Y_Mot_Run_Len+01H
004C 7002              JNZ     ?C0293
004E 1500        E     DEC     Y_Mot_Run_Len
0050         ?C0293:
                                           ; SOURCE LINE # 1348
0050 E500        E     MOV     A,Y_Mot_Run_Len+01H
0052 4500        E     ORL     A,Y_Mot_Run_Len
0054 7017              JNZ     ?C0175
                                           ; SOURCE LINE # 1349
0056 750004      E     MOV     Y_Mot_State,#04H
                                           ; SOURCE LINE # 1351
0059 8012              SJMP    ?C0175
                                           ; SOURCE LINE # 1353
005B         ?C0180:
                                           ; SOURCE LINE # 1354
005B E500        E     MOV     A,Y_Timer_ip
005D 7005              JNZ     ?C0181
                                           ; SOURCE LINE # 1355
005F 750005      E     MOV     Y_Mot_State,#05H
0062 8009              SJMP    ?C0175
0064         ?C0181:
                                           ; SOURCE LINE # 1357
0064 1500        E     DEC     Y_Timer_ip
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 69  

                                           ; SOURCE LINE # 1359
0066 8005              SJMP    ?C0175
                                           ; SOURCE LINE # 1361
0068         ?C0183:
                                           ; SOURCE LINE # 1362
0068 750001      E     MOV     Y_Mot_State,#01H
                                           ; SOURCE LINE # 1364
006B C28C              CLR     TR0
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1367
006D         ?C0175:
                                           ; SOURCE LINE # 1369
006D D280              SETB    Y_Mot_CP
                                           ; SOURCE LINE # 1371
006F D006              POP     AR6
0071 D0D0              POP     PSW
0073 D082              POP     DPL
0075 D083              POP     DPH
0077 D0E0              POP     ACC
0079 32                RETI    
             ; FUNCTION Timer0_Int_0 (END)

             ; FUNCTION L?0331 (BEGIN)
0000 C200        R     CLR     ?Y_MOT_Move?BIT
0002 750019      R     MOV     ?Y_MOT_Move?BYTE,#019H
0005 750000      R     MOV     ?Y_MOT_Move?BYTE+01H,#00H
             ; FUNCTION Y_MOT_Move (BEGIN)
                                           ; SOURCE LINE # 1376
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1378
0008 E500        E     MOV     A,Y_Mot_State
000A 6006              JZ      ?C0185
000C 6401              XRL     A,#01H
000E 6002              JZ      ?C0185
                                           ; SOURCE LINE # 1379
0010 C3                CLR     C
0011 22                RET     
0012         ?C0185:
                                           ; SOURCE LINE # 1381
0012 C3                CLR     C
0013 E500        R     MOV     A,Y_Len+01H
0015 941D              SUBB    A,#01DH
0017 E500        R     MOV     A,Y_Len
0019 9400              SUBB    A,#00H
001B 5002              JNC     ?C0187
                                           ; SOURCE LINE # 1382
001D C3                CLR     C
001E 22                RET     
001F         ?C0187:
                                           ; SOURCE LINE # 1384
001F D2A7              SETB    Y_Mot_EN
                                           ; SOURCE LINE # 1385
0021 750001      E     MOV     Y_Mot_State,#01H
                                           ; SOURCE LINE # 1387
0024 7F02              MOV     R7,#02H
0026 7E00              MOV     R6,#00H
0028 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1389
002B A200        R     MOV     C,Y_Dir
002D 9281              MOV     Y_Mot_Dir,C
                                           ; SOURCE LINE # 1391
002F E500        R     MOV     A,Y_Len+01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 70  

0031 24E2              ADD     A,#0E2H
0033 F500        E     MOV     Y_Mot_Run_Len+01H,A
0035 E500        R     MOV     A,Y_Len
0037 34FF              ADDC    A,#0FFH
0039 F500        E     MOV     Y_Mot_Run_Len,A
                                           ; SOURCE LINE # 1393
003B E4                CLR     A
003C F500        E     MOV     Y_Timer_ip,A
                                           ; SOURCE LINE # 1394
003E 900000      R     MOV     DPTR,#Y_Mot_Time
0041 93                MOVC    A,@A+DPTR
0042 FE                MOV     R6,A
0043 7401              MOV     A,#01H
0045 93                MOVC    A,@A+DPTR
0046 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 1395
0048 EE                MOV     A,R6
0049 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 1397
004B D28C              SETB    TR0
                                           ; SOURCE LINE # 1399
004D 750002      E     MOV     Y_Mot_State,#02H
                                           ; SOURCE LINE # 1401
0050 D3                SETB    C
                                           ; SOURCE LINE # 1402
0051         ?C0186:
0051 22                RET     
             ; FUNCTION Y_MOT_Move (END)

             ; FUNCTION Y_MOT_Stop (BEGIN)
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1407
0000 E500        E     MOV     A,Y_Mot_State
0002 6007              JZ      ?C0190
0004 6401              XRL     A,#01H
0006 6003              JZ      ?C0190
0008         ?C0188:
                                           ; SOURCE LINE # 1410
0008 750004      E     MOV     Y_Mot_State,#04H
                                           ; SOURCE LINE # 1411
000B         ?C0190:
000B 22                RET     
             ; FUNCTION Y_MOT_Stop (END)

             ; FUNCTION Y_MOT_Reset (BEGIN)
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1419
0000 120000      R     LCALL   L?0331
0003         ?C0191:
                                           ; SOURCE LINE # 1421
0003 E500        E     MOV     A,Y_Mot_State
0005 B401FB            CJNE    A,#01H,?C0191
0008         ?C0192:
                                           ; SOURCE LINE # 1423
0008 7F14              MOV     R7,#014H
000A 7E00              MOV     R6,#00H
000C 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1425
000F E4                CLR     A
0010 F500        R     MOV     iAAAA,A
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 71  

0012         ?C0193:
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
0012 D200        R     SETB    ?Y_MOT_Move?BIT
0014 7500FA      R     MOV     ?Y_MOT_Move?BYTE,#0FAH
0017 750000      R     MOV     ?Y_MOT_Move?BYTE+01H,#00H
001A 120000      R     LCALL   Y_MOT_Move
001D         ?C0196:
                                           ; SOURCE LINE # 1429
001D E500        E     MOV     A,Y_Mot_State
001F 6401              XRL     A,#01H
0021 601C              JZ      ?C0195
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1431
0023 30A6F7            JNB     Y_Mot_Pos,?C0196
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1433
0026 750004      E     MOV     Y_Mot_State,#04H
0029         ?C0199:
                                           ; SOURCE LINE # 1435
0029 E500        E     MOV     A,Y_Mot_State
002B B401FB            CJNE    A,#01H,?C0199
002E         ?C0200:
                                           ; SOURCE LINE # 1437
002E 7F14              MOV     R7,#014H
0030 7E00              MOV     R6,#00H
0032 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1439
0035 120000      R     LCALL   L?0331
0038         ?C0201:
                                           ; SOURCE LINE # 1441
0038 E500        E     MOV     A,Y_Mot_State
003A B401FB            CJNE    A,#01H,?C0201
003D         ?C0202:
                                           ; SOURCE LINE # 1443
003D D3                SETB    C
003E 22                RET     
                                           ; SOURCE LINE # 1444
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
003F         ?C0195:
003F 0500        R     INC     iAAAA
0041 E500        R     MOV     A,iAAAA
0043 C3                CLR     C
0044 9402              SUBB    A,#02H
0046 40CA              JC      ?C0193
0048         ?C0194:
                                           ; SOURCE LINE # 1448
0048 C2A7              CLR     Y_Mot_EN
                                           ; SOURCE LINE # 1449
004A E4                CLR     A
004B F500        E     MOV     Y_Mot_State,A
                                           ; SOURCE LINE # 1451
004D C3                CLR     C
                                           ; SOURCE LINE # 1452
004E         ?C0203:
004E 22                RET     
             ; FUNCTION Y_MOT_Reset (END)

             ; FUNCTION CPU_FPGA_Int (BEGIN)
                                           ; SOURCE LINE # 1458
                                           ; SOURCE LINE # 1459
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 72  

                                           ; SOURCE LINE # 1460
0000 D2A1              SETB    Laser_EN
                                           ; SOURCE LINE # 1462
0002 E4                CLR     A
0003 F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
0005 FB                MOV     R3,A
0006 FD                MOV     R5,A
0007 7F0A              MOV     R7,#0AH
0009 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 1463
000C E4                CLR     A
000D F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
000F FB                MOV     R3,A
0010 7D01              MOV     R5,#01H
0012 7F01              MOV     R7,#01H
0014 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 1464
0017 E4                CLR     A
0018 F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
001A FB                MOV     R3,A
001B 7D20              MOV     R5,#020H
001D 7F0E              MOV     R7,#0EH
001F 120000      R     LCALL   _FPGA_Write
                                           ; SOURCE LINE # 1465
0022 E4                CLR     A
0023 F500        R     MOV     ?_FPGA_Write?BYTE+03H,A
0025 FB                MOV     R3,A
0026 7DFF              MOV     R5,#0FFH
0028 7F0F              MOV     R7,#0FH
002A 020000      R     LJMP    _FPGA_Write
             ; FUNCTION CPU_FPGA_Int (END)

             ; FUNCTION _FPGA_Write (BEGIN)
                                           ; SOURCE LINE # 1469
;---- Variable 'FPGA_Com' assigned to Register 'R7' ----
;---- Variable 'FPGA_data_2' assigned to Register 'R3' ----
;---- Variable 'FPGA_data_1' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
0000 908000            MOV     DPTR,#FPGA_Port
0003 E500        R     MOV     A,FPGA_data_3
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1473
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1474
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1476
000C D2A0              SETB    FPGA_Set
                                           ; SOURCE LINE # 1477
000E C2A0              CLR     FPGA_Set
                                           ; SOURCE LINE # 1478
0010 22                RET     
             ; FUNCTION _FPGA_Write (END)

             ; FUNCTION L?0327 (BEGIN)
0000 53B1FB            ANL     IOE,#0FBH
0003 7F06              MOV     R7,#06H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 73  

0005         L?0328:
0005 120000      R     LCALL   _Delay_us
0008 43B104            ORL     IOE,#04H
000B 7F0C              MOV     R7,#0CH
             ; FUNCTION _Delay_us (BEGIN)
                                           ; SOURCE LINE # 1598
;---- Variable 'T_us' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1599
000D         ?C0206:
                                           ; SOURCE LINE # 1600
000D AE07              MOV     R6,AR7
000F 1F                DEC     R7
0010 EE                MOV     A,R6
0011 70FA              JNZ     ?C0206
0013         ?C0207:
                                           ; SOURCE LINE # 1601
0013         ?C0208:
0013 22                RET     
             ; FUNCTION _Delay_us (END)

             ; FUNCTION ADJ_Start (BEGIN)
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1611
0000 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1612
0003 43B104            ORL     IOE,#04H
                                           ; SOURCE LINE # 1613
0006 7F0E              MOV     R7,#0EH
0008 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1615
000B 53B1F7            ANL     IOE,#0F7H
                                           ; SOURCE LINE # 1616
000E 7F0A              MOV     R7,#0AH
0010 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1618
0013 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1619
0016 22                RET     
             ; FUNCTION ADJ_Start (END)

             ; FUNCTION ADJ_Stop (BEGIN)
                                           ; SOURCE LINE # 1622
                                           ; SOURCE LINE # 1623
                                           ; SOURCE LINE # 1625
0000 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1626
0003 53B1F7            ANL     IOE,#0F7H
                                           ; SOURCE LINE # 1627
0006 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 1629
                                           ; SOURCE LINE # 1630
0008 120000      R     LCALL   L?0328
                                           ; SOURCE LINE # 1632
000B 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1633
000E 22                RET     
             ; FUNCTION ADJ_Stop (END)

             ; FUNCTION ADJ_Ack (BEGIN)
                                           ; SOURCE LINE # 1636
                                           ; SOURCE LINE # 1637
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 74  

                                           ; SOURCE LINE # 1639
0000 53B1F7            ANL     IOE,#0F7H
                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1643
                                           ; SOURCE LINE # 1644
0003 120000      R     LCALL   L?0327
                                           ; SOURCE LINE # 1646
0006 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1647
0009 7F04              MOV     R7,#04H
000B 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1649
000E 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1650
0011 7F04              MOV     R7,#04H
0013 020000      R     LJMP    _Delay_us
             ; FUNCTION ADJ_Ack (END)

             ; FUNCTION ADJ_NoAck (BEGIN)
                                           ; SOURCE LINE # 1655
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1657
0000 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
0003 120000      R     LCALL   L?0327
                                           ; SOURCE LINE # 1664
0006 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1665
0009 7F04              MOV     R7,#04H
000B 020000      R     LJMP    _Delay_us
             ; FUNCTION ADJ_NoAck (END)

             ; FUNCTION L?0329 (BEGIN)
0000 120000      R     LCALL   ADJ_Start
0003 7FA0              MOV     R7,#0A0H
0005 120000      R     LCALL   _ADJ_Send
0008 AF02              MOV     R7,AR2
000A 120000      R     LCALL   _ADJ_Send
000D AF03              MOV     R7,AR3
             ; FUNCTION _ADJ_Send (BEGIN)
                                           ; SOURCE LINE # 1670
;---- Variable 'Sendbyte' assigned to Register 'R5' ----
000F AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1674
;---- Variable 'iAAAA' assigned to Register 'R4' ----
0011 7C08              MOV     R4,#08H
0013         ?C0213:
                                           ; SOURCE LINE # 1675
                                           ; SOURCE LINE # 1676
0013 7F06              MOV     R7,#06H
0015 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1677
0018 ED                MOV     A,R5
0019 25E0              ADD     A,ACC
001B FD                MOV     R5,A
                                           ; SOURCE LINE # 1679
001C 30D705            JNB     CY,?C0216
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 75  

                                           ; SOURCE LINE # 1680
001F 43B108            ORL     IOE,#08H
0022 8003              SJMP    ?C0217
0024         ?C0216:
                                           ; SOURCE LINE # 1682
0024 53B1F7            ANL     IOE,#0F7H
0027         ?C0217:
                                           ; SOURCE LINE # 1684
0027 7F04              MOV     R7,#04H
0029 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1686
002C 43B104            ORL     IOE,#04H
                                           ; SOURCE LINE # 1687
002F 7F0A              MOV     R7,#0AH
0031 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1689
0034 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1690
0037 7F04              MOV     R7,#04H
0039 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1691
003C DCD5              DJNZ    R4,?C0213
003E         ?C0214:
                                           ; SOURCE LINE # 1693
003E 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1694
0041 75B4FD            MOV     OEC,#0FDH
                                           ; SOURCE LINE # 1695
0044 7F06              MOV     R7,#06H
0046 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1697
0049 43B104            ORL     IOE,#04H
                                           ; SOURCE LINE # 1698
004C 7F0A              MOV     R7,#0AH
004E 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1700
0051 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1701
0054 75B4FF            MOV     OEC,#0FFH
                                           ; SOURCE LINE # 1702
0057 22                RET     
             ; FUNCTION _ADJ_Send (END)

             ; FUNCTION ADJ_Rec (BEGIN)
                                           ; SOURCE LINE # 1705
;---- Variable 'R_Data' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1706
                                           ; SOURCE LINE # 1709
0000 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 1710
0003 75B4FD            MOV     OEC,#0FDH
                                           ; SOURCE LINE # 1712
;---- Variable 'iAAAA' assigned to Register 'R4' ----
0006 7C08              MOV     R4,#08H
0008         ?C0219:
                                           ; SOURCE LINE # 1713
0008 AF04              MOV     R7,AR4
000A 1C                DEC     R4
000B EF                MOV     A,R7
000C 601D              JZ      ?C0220
                                           ; SOURCE LINE # 1714
                                           ; SOURCE LINE # 1715
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 76  

000E 7F08              MOV     R7,#08H
0010 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1716
0013 43B104            ORL     IOE,#04H
                                           ; SOURCE LINE # 1717
0016 ED                MOV     A,R5
0017 25E0              ADD     A,ACC
0019 4408              ORL     A,#08H
001B FD                MOV     R5,A
                                           ; SOURCE LINE # 1719
001C 7F08              MOV     R7,#08H
001E 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1721
0021 53B1FB            ANL     IOE,#0FBH
                                           ; SOURCE LINE # 1722
0024 7F08              MOV     R7,#08H
0026 120000      R     LCALL   _Delay_us
                                           ; SOURCE LINE # 1723
0029 80DD              SJMP    ?C0219
002B         ?C0220:
                                           ; SOURCE LINE # 1725
002B 75B4FF            MOV     OEC,#0FFH
                                           ; SOURCE LINE # 1726
002E AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1727
0030         ?C0221:
0030 22                RET     
             ; FUNCTION ADJ_Rec (END)

             ; FUNCTION _ADJ_Write (BEGIN)
                                           ; SOURCE LINE # 1730
;---- Variable 'RAM_adr' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'RAM_data' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 1731
                                           ; SOURCE LINE # 1732
                                           ; SOURCE LINE # 1734
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1738
0006 120000      R     LCALL   L?0329
                                           ; SOURCE LINE # 1740
0009 AF01              MOV     R7,AR1
000B 120000      R     LCALL   _ADJ_Send
                                           ; SOURCE LINE # 1742
000E 120000      R     LCALL   ADJ_Stop
                                           ; SOURCE LINE # 1744
0011 7F05              MOV     R7,#05H
0013 7E00              MOV     R6,#00H
0015 020000      E     LJMP    _EZUSB_Delay
             ; FUNCTION _ADJ_Write (END)

             ; FUNCTION _ADJ_Read (BEGIN)
                                           ; SOURCE LINE # 1747
;---- Variable 'RAM_adr' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 1748
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1755
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 77  

                                           ; SOURCE LINE # 1757
0004 120000      R     LCALL   L?0329
                                           ; SOURCE LINE # 1759
0007 120000      R     LCALL   ADJ_Start
                                           ; SOURCE LINE # 1761
000A 7FA1              MOV     R7,#0A1H
000C 120000      R     LCALL   _ADJ_Send
                                           ; SOURCE LINE # 1763
000F 120000      R     LCALL   ADJ_Rec
;---- Variable 'RAM_data' assigned to Register 'R5' ----
0012 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1765
0014 120000      R     LCALL   ADJ_NoAck
                                           ; SOURCE LINE # 1767
0017 120000      R     LCALL   ADJ_Stop
                                           ; SOURCE LINE # 1769
001A AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1770
001C         ?C0223:
001C 22                RET     
             ; FUNCTION _ADJ_Read (END)

             ; FUNCTION _EEPROMWriteByte (BEGIN)
                                           ; SOURCE LINE # 1832
;---- Variable 'addr' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'value' assigned to Register 'R4' ----
0004 AC05              MOV     R4,AR5
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1834
;---- Variable 'i' assigned to Register 'R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
                                           ; SOURCE LINE # 1837
0008 30000F      E     JNB     DB_Addr,?C0224
                                           ; SOURCE LINE # 1838
000B 7E00              MOV     R6,#00H
000D 0D                INC     R5
000E EE                MOV     A,R6
000F 2400        R     ADD     A,#LOW ee_str
0011 F582              MOV     DPL,A
0013 E4                CLR     A
0014 3400        R     ADDC    A,#HIGH ee_str
0016 F583              MOV     DPH,A
0018 EA                MOV     A,R2
0019 F0                MOVX    @DPTR,A
001A         ?C0224:
                                           ; SOURCE LINE # 1840
001A AE05              MOV     R6,AR5
001C 0D                INC     R5
001D 7400        R     MOV     A,#LOW ee_str
001F 2E                ADD     A,R6
0020 F582              MOV     DPL,A
0022 E4                CLR     A
0023 3400        R     ADDC    A,#HIGH ee_str
0025 F583              MOV     DPH,A
0027 EB                MOV     A,R3
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1841
0029 AF05              MOV     R7,AR5
002B 0D                INC     R5
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 78  

002C 7400        R     MOV     A,#LOW ee_str
002E 2F                ADD     A,R7
002F F582              MOV     DPL,A
0031 E4                CLR     A
0032 3400        R     ADDC    A,#HIGH ee_str
0034 F583              MOV     DPH,A
0036 EC                MOV     A,R4
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1843
0038 7A00        R     MOV     R2,#HIGH ee_str
003A 7B00        R     MOV     R3,#LOW ee_str
003C AF00        E     MOV     R7,I2C_Addr
003E 120000      E     LCALL   _EZUSB_WriteI2C
                                           ; SOURCE LINE # 1844
0041 AF00        E     MOV     R7,I2C_Addr
0043 020000      E     LJMP    _EZUSB_WaitForEEPROMWrite
             ; FUNCTION _EEPROMWriteByte (END)

             ; FUNCTION _EEPROMWrite (BEGIN)
                                           ; SOURCE LINE # 1847
0000 8E00        R     MOV     addr,R6
0002 8F00        R     MOV     addr+01H,R7
0004 8D00        R     MOV     length,R5
0006 8A00        R     MOV     buf,R2
0008 8B00        R     MOV     buf+01H,R3
                                           ; SOURCE LINE # 1848
                                           ; SOURCE LINE # 1851
000A 7F01              MOV     R7,#01H
000C 7E00              MOV     R6,#00H
000E 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 1853
0011 E4                CLR     A
0012 F500        R     MOV     i,A
0014         ?C0226:
0014 E500        R     MOV     A,i
0016 C3                CLR     C
0017 9500        R     SUBB    A,length
0019 5020              JNC     ?C0229
                                           ; SOURCE LINE # 1854
001B 0500        R     INC     addr+01H
001D E500        R     MOV     A,addr+01H
001F AE00        R     MOV     R6,addr
0021 7002              JNZ     ?C0294
0023 0500        R     INC     addr
0025         ?C0294:
0025 14                DEC     A
0026 FF                MOV     R7,A
0027 E500        R     MOV     A,buf+01H
0029 2500        R     ADD     A,i
002B F582              MOV     DPL,A
002D E4                CLR     A
002E 3500        R     ADDC    A,buf
0030 F583              MOV     DPH,A
0032 E0                MOVX    A,@DPTR
0033 FD                MOV     R5,A
0034 120000      R     LCALL   _EEPROMWriteByte
0037 0500        R     INC     i
0039 80D9              SJMP    ?C0226
                                           ; SOURCE LINE # 1856
003B         ?C0229:
003B 22                RET     
             ; FUNCTION _EEPROMWrite (END)
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 79  


             ; FUNCTION _EEPROMRead (BEGIN)
                                           ; SOURCE LINE # 1868
0000 8E00        R     MOV     addr,R6
0002 8F00        R     MOV     addr+01H,R7
0004 8D00        R     MOV     length,R5
0006 8A00        R     MOV     buf,R2
0008 8B00        R     MOV     buf+01H,R3
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
;---- Variable 'i' assigned to Register 'R5' ----
000A E4                CLR     A
000B FD                MOV     R5,A
                                           ; SOURCE LINE # 1871
000C F500        R     MOV     j,A
                                           ; SOURCE LINE # 1874
000E 300012      E     JNB     DB_Addr,?C0230
                                           ; SOURCE LINE # 1875
0011 E500        R     MOV     A,addr
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 0D                INC     R5
0017 EE                MOV     A,R6
0018 2400        R     ADD     A,#LOW ee_str
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ee_str
001F F583              MOV     DPH,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
0023         ?C0230:
                                           ; SOURCE LINE # 1877
0023 AE05              MOV     R6,AR5
0025 0D                INC     R5
0026 7400        R     MOV     A,#LOW ee_str
0028 2E                ADD     A,R6
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH ee_str
002E F583              MOV     DPH,A
0030 E500        R     MOV     A,addr+01H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1879
0033 7A00        R     MOV     R2,#HIGH ee_str
0035 7B00        R     MOV     R3,#LOW ee_str
0037 AF00        E     MOV     R7,I2C_Addr
0039 120000      E     LCALL   _EZUSB_WriteI2C
                                           ; SOURCE LINE # 1884
003C AB00        R     MOV     R3,buf+01H
003E AA00        R     MOV     R2,buf
0040 AD00        R     MOV     R5,length
0042 AF00        E     MOV     R7,I2C_Addr
0044 020000      E     LJMP    _EZUSB_ReadI2C
             ; FUNCTION _EEPROMRead (END)

             ; FUNCTION ISR_Sudav (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1905
0006 D200        E     SETB    GotSUD
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 80  

                                           ; SOURCE LINE # 1906
0008 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1907
000B 900000      E     MOV     DPTR,#USBIRQ
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1908
0011 D082              POP     DPL
0013 D083              POP     DPH
0015 D0E0              POP     ACC
0017 32                RETI    
             ; FUNCTION ISR_Sudav (END)

             ; FUNCTION ISR_Sutok (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1913
0006 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1914
0009 900000      E     MOV     DPTR,#USBIRQ
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1915
000F D082              POP     DPL
0011 D083              POP     DPH
0013 D0E0              POP     ACC
0015 32                RETI    
             ; FUNCTION ISR_Sutok (END)

             ; FUNCTION ISR_Sof (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1917
                                           ; SOURCE LINE # 1919
0006 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1920
0009 900000      E     MOV     DPTR,#USBIRQ
000C 7402              MOV     A,#02H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1921
000F D082              POP     DPL
0011 D083              POP     DPH
0013 D0E0              POP     ACC
0015 32                RETI    
             ; FUNCTION ISR_Sof (END)

             ; FUNCTION ISR_Ures (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1923
                                           ; SOURCE LINE # 1925
0006 900000      E     MOV     DPTR,#USBCS
0009 E0                MOVX    A,@DPTR
000A 30E70E            JNB     ACC.7,?C0235
                                           ; SOURCE LINE # 1926
                                           ; SOURCE LINE # 1927
000D 850000      E     MOV     pConfigDscr,pHighSpeedConfigDscr
0010 850000      E     MOV     pConfigDscr+01H,pHighSpeedConfigDscr+01H
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 81  

                                           ; SOURCE LINE # 1928
0013 850000      E     MOV     pOtherConfigDscr,pFullSpeedConfigDscr
0016 850000      E     MOV     pOtherConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1929
0019 800C              SJMP    ?C0236
001B         ?C0235:
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
001B 850000      E     MOV     pConfigDscr,pFullSpeedConfigDscr
001E 850000      E     MOV     pConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1933
0021 850000      E     MOV     pOtherConfigDscr,pHighSpeedConfigDscr
0024 850000      E     MOV     pOtherConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1934
0027         ?C0236:
                                           ; SOURCE LINE # 1936
0027 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1937
002A 900000      E     MOV     DPTR,#USBIRQ
002D 7410              MOV     A,#010H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1938
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 D0E0              POP     ACC
0036 32                RETI    
             ; FUNCTION ISR_Ures (END)

             ; FUNCTION ISR_Susp (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1940
                                           ; SOURCE LINE # 1942
0006 D200        E     SETB    Sleep
                                           ; SOURCE LINE # 1943
0008 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1944
000B 900000      E     MOV     DPTR,#USBIRQ
000E 7408              MOV     A,#08H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1945
0011 D082              POP     DPL
0013 D083              POP     DPH
0015 D0E0              POP     ACC
0017 32                RETI    
             ; FUNCTION ISR_Susp (END)

             ; FUNCTION ISR_Highspeed (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1949
0006 900000      E     MOV     DPTR,#USBCS
0009 E0                MOVX    A,@DPTR
000A 30E70E            JNB     ACC.7,?C0239
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1951
000D 850000      E     MOV     pConfigDscr,pHighSpeedConfigDscr
0010 850000      E     MOV     pConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1952
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 82  

0013 850000      E     MOV     pOtherConfigDscr,pFullSpeedConfigDscr
0016 850000      E     MOV     pOtherConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1953
0019 800C              SJMP    ?C0240
001B         ?C0239:
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1956
001B 850000      E     MOV     pConfigDscr,pFullSpeedConfigDscr
001E 850000      E     MOV     pConfigDscr+01H,pFullSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1957
0021 850000      E     MOV     pOtherConfigDscr,pHighSpeedConfigDscr
0024 850000      E     MOV     pOtherConfigDscr+01H,pHighSpeedConfigDscr+01H
                                           ; SOURCE LINE # 1958
0027         ?C0240:
                                           ; SOURCE LINE # 1960
0027 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1961
002A 900000      E     MOV     DPTR,#USBIRQ
002D 7420              MOV     A,#020H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1962
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 D0E0              POP     ACC
0036 32                RETI    
             ; FUNCTION ISR_Highspeed (END)

             ; FUNCTION ISR_Ep0ack (BEGIN)
                                           ; SOURCE LINE # 1965
                                           ; SOURCE LINE # 1967
0000 32                RETI    
             ; FUNCTION ISR_Ep0ack (END)

             ; FUNCTION ISR_Stub (BEGIN)
                                           ; SOURCE LINE # 1968
                                           ; SOURCE LINE # 1970
0000 32                RETI    
             ; FUNCTION ISR_Stub (END)

             ; FUNCTION ISR_Ep0in (BEGIN)
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1973
0000 32                RETI    
             ; FUNCTION ISR_Ep0in (END)

             ; FUNCTION ISR_Ep0out (BEGIN)
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1976
0000 32                RETI    
             ; FUNCTION ISR_Ep0out (END)

             ; FUNCTION ISR_Ep1in (BEGIN)
                                           ; SOURCE LINE # 1977
                                           ; SOURCE LINE # 1979
0000 32                RETI    
             ; FUNCTION ISR_Ep1in (END)

             ; FUNCTION ISR_Ep1out (BEGIN)
                                           ; SOURCE LINE # 1980
                                           ; SOURCE LINE # 1982
0000 32                RETI    
             ; FUNCTION ISR_Ep1out (END)
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 83  


             ; FUNCTION ISR_Ep2inout (BEGIN)
                                           ; SOURCE LINE # 1983
                                           ; SOURCE LINE # 1985
0000 32                RETI    
             ; FUNCTION ISR_Ep2inout (END)

             ; FUNCTION ISR_Ep4inout (BEGIN)
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1988
0000 32                RETI    
             ; FUNCTION ISR_Ep4inout (END)

             ; FUNCTION ISR_Ep6inout (BEGIN)
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1991
0000 32                RETI    
             ; FUNCTION ISR_Ep6inout (END)

             ; FUNCTION ISR_Ep8inout (BEGIN)
                                           ; SOURCE LINE # 1992
                                           ; SOURCE LINE # 1994
0000 32                RETI    
             ; FUNCTION ISR_Ep8inout (END)

             ; FUNCTION ISR_Ibn (BEGIN)
                                           ; SOURCE LINE # 1995
                                           ; SOURCE LINE # 1997
0000 32                RETI    
             ; FUNCTION ISR_Ibn (END)

             ; FUNCTION ISR_Ep0pingnak (BEGIN)
                                           ; SOURCE LINE # 1998
                                           ; SOURCE LINE # 2000
0000 32                RETI    
             ; FUNCTION ISR_Ep0pingnak (END)

             ; FUNCTION ISR_Ep1pingnak (BEGIN)
                                           ; SOURCE LINE # 2001
                                           ; SOURCE LINE # 2003
0000 32                RETI    
             ; FUNCTION ISR_Ep1pingnak (END)

             ; FUNCTION ISR_Ep2pingnak (BEGIN)
                                           ; SOURCE LINE # 2004
                                           ; SOURCE LINE # 2006
0000 32                RETI    
             ; FUNCTION ISR_Ep2pingnak (END)

             ; FUNCTION ISR_Ep4pingnak (BEGIN)
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2009
0000 32                RETI    
             ; FUNCTION ISR_Ep4pingnak (END)

             ; FUNCTION ISR_Ep6pingnak (BEGIN)
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2012
0000 32                RETI    
             ; FUNCTION ISR_Ep6pingnak (END)

             ; FUNCTION ISR_Ep8pingnak (BEGIN)
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 84  

                                           ; SOURCE LINE # 2013
                                           ; SOURCE LINE # 2015
0000 32                RETI    
             ; FUNCTION ISR_Ep8pingnak (END)

             ; FUNCTION ISR_Errorlimit (BEGIN)
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2018
0000 32                RETI    
             ; FUNCTION ISR_Errorlimit (END)

             ; FUNCTION ISR_Ep2piderror (BEGIN)
                                           ; SOURCE LINE # 2019
                                           ; SOURCE LINE # 2021
0000 32                RETI    
             ; FUNCTION ISR_Ep2piderror (END)

             ; FUNCTION ISR_Ep4piderror (BEGIN)
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2024
0000 32                RETI    
             ; FUNCTION ISR_Ep4piderror (END)

             ; FUNCTION ISR_Ep6piderror (BEGIN)
                                           ; SOURCE LINE # 2025
                                           ; SOURCE LINE # 2027
0000 32                RETI    
             ; FUNCTION ISR_Ep6piderror (END)

             ; FUNCTION ISR_Ep8piderror (BEGIN)
                                           ; SOURCE LINE # 2028
                                           ; SOURCE LINE # 2030
0000 32                RETI    
             ; FUNCTION ISR_Ep8piderror (END)

             ; FUNCTION ISR_Ep2pflag (BEGIN)
                                           ; SOURCE LINE # 2031
                                           ; SOURCE LINE # 2033
0000 32                RETI    
             ; FUNCTION ISR_Ep2pflag (END)

             ; FUNCTION ISR_Ep4pflag (BEGIN)
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2036
0000 32                RETI    
             ; FUNCTION ISR_Ep4pflag (END)

             ; FUNCTION ISR_Ep6pflag (BEGIN)
                                           ; SOURCE LINE # 2037
                                           ; SOURCE LINE # 2039
0000 32                RETI    
             ; FUNCTION ISR_Ep6pflag (END)

             ; FUNCTION ISR_Ep8pflag (BEGIN)
                                           ; SOURCE LINE # 2040
                                           ; SOURCE LINE # 2042
0000 32                RETI    
             ; FUNCTION ISR_Ep8pflag (END)

             ; FUNCTION ISR_Ep2eflag (BEGIN)
                                           ; SOURCE LINE # 2043
                                           ; SOURCE LINE # 2045
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 85  

0000 32                RETI    
             ; FUNCTION ISR_Ep2eflag (END)

             ; FUNCTION ISR_Ep4eflag (BEGIN)
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2048
0000 32                RETI    
             ; FUNCTION ISR_Ep4eflag (END)

             ; FUNCTION ISR_Ep6eflag (BEGIN)
                                           ; SOURCE LINE # 2049
                                           ; SOURCE LINE # 2051
0000 32                RETI    
             ; FUNCTION ISR_Ep6eflag (END)

             ; FUNCTION ISR_Ep8eflag (BEGIN)
                                           ; SOURCE LINE # 2052
                                           ; SOURCE LINE # 2054
0000 32                RETI    
             ; FUNCTION ISR_Ep8eflag (END)

             ; FUNCTION ISR_Ep2fflag (BEGIN)
                                           ; SOURCE LINE # 2055
                                           ; SOURCE LINE # 2057
0000 32                RETI    
             ; FUNCTION ISR_Ep2fflag (END)

             ; FUNCTION ISR_Ep4fflag (BEGIN)
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2060
0000 32                RETI    
             ; FUNCTION ISR_Ep4fflag (END)

             ; FUNCTION ISR_Ep6fflag (BEGIN)
                                           ; SOURCE LINE # 2061
                                           ; SOURCE LINE # 2063
0000 32                RETI    
             ; FUNCTION ISR_Ep6fflag (END)

             ; FUNCTION ISR_Ep8fflag (BEGIN)
                                           ; SOURCE LINE # 2064
                                           ; SOURCE LINE # 2066
0000 32                RETI    
             ; FUNCTION ISR_Ep8fflag (END)

             ; FUNCTION ISR_GpifComplete (BEGIN)
                                           ; SOURCE LINE # 2068
                                           ; SOURCE LINE # 2070
0000 32                RETI    
             ; FUNCTION ISR_GpifComplete (END)

             ; FUNCTION ISR_GpifWaveform (BEGIN)
                                           ; SOURCE LINE # 2071
                                           ; SOURCE LINE # 2073
0000 32                RETI    
             ; FUNCTION ISR_GpifWaveform (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3426    ----
   CONSTANT SIZE    =   1014    ----
C51 COMPILER V9.05   SUB                                                                   05/17/2018 16:27:01 PAGE 86  

   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      31
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
