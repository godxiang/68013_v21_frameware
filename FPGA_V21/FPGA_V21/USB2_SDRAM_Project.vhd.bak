LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY USB2_SDRAM_Project IS
PORT
(		
	CLK50M : in std_logic;
	--camera--
	IIC_CLK : out std_logic;
	IIC_DATA : inout std_logic;
	XCLK : out std_logic;
	PCLK : in std_logic;
	HREF : in std_logic;
	VSYNC : in std_logic;
	DATAIN : in std_logic_vector(7 downto 0);
	--mcu--
	SLCS : out std_logic;
	SLRD : out std_logic;
	SLWR : out std_logic;
	SLOE : out std_logic;
	PKTEND: out std_logic;
	FLAGA : in std_logic;
	IFCLK : out std_logic;
	FIFOADR : out std_logic_vector(1 downto 0);
	DATAOUT : out std_logic_vector(7 downto 0);
	--sdram0--
	CLK0 : out std_logic;
	CKE0 : out std_logic;
	CSn0 : out std_logic;
	RASn0 : out std_logic;
	CASn0 : out std_logic;
	WEn0 : out std_logic;
	DQM0 : out std_logic;
	BA0 : out std_logic_vector(1 downto 0);
	A0 : out std_logic_vector(12 downto 0);	
	DQ0 : inout std_logic_vector(7 downto 0);
	--sdram1--
	CLK1 : out std_logic;
	CKE1 : out std_logic;
	CSn1 : out std_logic;
	RASn1 : out std_logic;
	CASn1 : out std_logic;
	WEn1 : out std_logic;
	DQM1 : out std_logic;
	BA1 : out std_logic_vector(1 downto 0);
	A1 : out std_logic_vector(12 downto 0);	
	DQ1 : inout std_logic_vector(7 downto 0)
);
END USB2_SDRAM_Project;

ARCHITECTURE RTL OF USB2_SDRAM_Project IS
component CLKGen IS
PORT
(
	RESETn : in std_logic;		
	CLK50M : in std_logic;
	CLK108M : out std_logic;
	CLK72M : out std_logic;
	CLK18M : out std_logic;
	LOCKED : out std_logic
);
end component;

component Camera is
port
(
	RESETn : in std_logic;
	CLK : in std_logic;
	XCLK : out std_logic;
	IIC_CLK : out std_logic;
	IIC_DATA : inout std_logic;
	PCLK : in std_logic;
	HREF : in std_logic;
	VSYNC : in std_logic;
	WRITECAMERAFIFO : out std_logic		
);
end component;

component SDRAM_Controller is
port
(
	RESETn : in std_logic;
	CLOCK : in std_logic;	
	WR : in std_logic_vector(1 downto 0);
	CameraFIFOFull : in std_logic;
	MCUFIFOEmpty : in std_logic;
	ReadCameraFIFO : out std_logic;
	WriteMCUFIFO : out std_logic;
	ReadCameraFIFOData : in std_logic_vector(7 downto 0);
	WriteMCUFIFOData : out std_logic_vector(7 downto 0);	
	Full : out std_logic;
	Empty : out std_logic;
	CSn : out std_logic;	
	CLK : out std_logic;
	CKE : out std_logic;
	RASn : out std_logic;
	CASn : out std_logic;
	WEn : out std_logic;
	DQM : out std_logic;
	BA : out std_logic_vector(1 downto 0);
	A : out std_logic_vector(12 downto 0);	
	DQ : inout std_logic_vector(7 downto 0)	
);
end component;

component FIFO_8Bit_2K IS
PORT
(
	RESETn : in std_logic;		
	WCLK : in std_logic;
	RCLK : in std_logic;
	WEN : in std_logic;
	REN : in std_logic;
	DIN : in std_logic_vector(7 downto 0);
	DOUT : out std_logic_vector(7 downto 0);
	HALFFULL : out std_logic;
	HALFEMPTY : out std_logic;
	FULL : out std_logic	
);
end component;

component Controller IS
PORT
(
	RESETn : in std_logic;		
	CLK108M : in std_logic;
	CLK72M : in std_logic;
	SDRAMFULL : in std_logic_vector(1 downto 0);
	SDRAMEMPTY : in std_logic_vector(1 downto 0);
	WR : out std_logic_vector(3 downto 0);
	FLAGA : in std_logic;
	SLWR : out std_logic;
	IFCLK : out std_logic;
	FIFOADR : out std_logic_vector(1 downto 0);	
	MCUFIFOFULL : in std_logic;
	READMCUFIFO : out std_logic
);
end component;

signal resetn_t : std_logic := '0';
signal clk108m_t, clk72m_t, clk18m_t : std_logic := '0';
signal lock_t : std_logic := '0';
signal writecamerafifo_t : std_logic := '0';
signal adcdata_t : std_logic_vector(7 downto 0) := ( others => '0' );
signal camerafifofull_t : std_logic := '0';
signal writeadcfifo_t : std_logic := '0';
signal wr_t : std_logic_vector(3 downto 0) := "0000";
signal readadcfifo_t, readadcfifo_t1, readcamerafifo_t2 : std_logic := '0';
signal readmcufifo_t : std_logic := '0';
signal writemcufifo_t, writemcufifo_t1, writemcufifo_t2 : std_logic := '0';
signal readcamerafifodata_t, readcamerafifodata_t1, readcamerafifodata_t2 : std_logic_vector(7 downto 0) := ( others => '0' );
signal camerafifohalffull_t, camerafifohalffull_t1, camerafifohalffull_t2 : std_logic := '0';
signal writemcufifodata_t, writemcufifodata_t1, writemcufifodata_t2 : std_logic_vector(7 downto 0) := ( others => '0' );
signal mcufifohalffull_t, mcufifohalffull_t1, mcufifohalffull_t2 : std_logic := '0';
signal full_t1, full_t2 : std_logic := '0';
signal empty_t1, empty_t2 : std_logic := '0';

begin

	SLCS <= '0';
	SLRD <= '1';	
	SLOE <= '0';
	PKTEND <= '1';
	
	resetn_t <= '1' when lock_t = '1' else '0';
	
U0:CLKGen
PORT MAP
(
	RESETn => '0',		
	CLK50M => CLK50M,
	CLK108M => clk108m_t,
	CLK72M => clk72m_t,
	CLK18M => clk18m_t,
	LOCKED => lock_t
);

U1:Camera
PORT MAP
(
	RESETn => resetn_t,
	CLK => CLK50M,
	XCLK => XCLK,
	IIC_CLK => IIC_CLK,
	IIC_DATA => IIC_DATA,	
	PCLK => PCLK,
	HREF => HREF,
	VSYNC => VSYNC,
	WRITECAMERAFIFO => writecamerafifo_t
);

U2:FIFO_8Bit_2K		--camera fifo--
PORT MAP
(
	RESETn => resetn_t,	
	WCLK => PCLK,
	RCLK => clk108m_t,
	WEN => writecamerafifo_t,
	REN => readadcfifo_t,
	DIN => DATAIN,
	DOUT => readcamerafifodata_t,
	HALFFULL => camerafifohalffull_t,
	FULL => camerafifofull_t	
);

readadcfifo_t <= readadcfifo_t1 when ( wr_t = "0100" or wr_t = "0110" ) else
                 readcamerafifo_t2 when ( wr_t = "1001" ) else '0';            
writemcufifo_t <= writemcufifo_t1 when ( wr_t = "1001" ) else
                  writemcufifo_t2 when ( wr_t = "0100" or wr_t = "0110" ) else '0';
readcamerafifodata_t1 <= readcamerafifodata_t when ( wr_t = "0100" or wr_t = "0110" ) else ( others => '0');
readcamerafifodata_t2 <= readcamerafifodata_t when ( wr_t = "1001" ) else ( others => '0');               
camerafifohalffull_t1 <= camerafifohalffull_t when ( wr_t = "0100" or wr_t = "0110" ) else '0';
camerafifohalffull_t2 <= camerafifohalffull_t when ( wr_t = "1001" ) else '0';
writemcufifodata_t <= writemcufifodata_t1 when ( wr_t = "1001" ) else
                      writemcufifodata_t2 when ( wr_t = "0100" or wr_t = "0110" ) else ( others => '0');
mcufifohalffull_t1 <= mcufifohalffull_t when ( wr_t = "1001" ) else '0';
mcufifohalffull_t2 <= mcufifohalffull_t when ( wr_t = "0100" or wr_t = "0110" ) else '0';

U3:FIFO_8Bit_2K		--mcu fifo--
PORT MAP
(
	RESETn => resetn_t,		
	WCLK => not clk108m_t,
	RCLK => not clk72m_t,
	WEN => writemcufifo_t,
	REN => readmcufifo_t,
	DIN => writemcufifodata_t,
	DOUT(7 downto 0) => DATAOUT,
	HALFFULL => mcufifohalffull_t
);

U4: SDRAM_Controller		--controller 1--
port map
(
	RESETn => resetn_t,
	CLOCK => clk108m_t,	
	WR => wr_t(3 downto 2),
	CameraFIFOFull => camerafifohalffull_t1,
	MCUFIFOEmpty => mcufifohalffull_t1,
	ReadCameraFIFO => readadcfifo_t1,
	WriteMCUFIFO => writemcufifo_t1,
	ReadCameraFIFOData => readcamerafifodata_t1,
	WriteMCUFIFOData => writemcufifodata_t1,	
	Full => full_t1,
	Empty => empty_t1,
	CSn => CSn0,	
	CLK => CLK0,
	CKE => CKE0,
	RASn => RASn0,
	CASn => CASn0,
	WEn => WEn0,
	DQM => DQM0,
	BA => BA0,
	A => A0,	
	DQ => DQ0	
);

U5: SDRAM_Controller		--controller 2--
port map
(
	RESETn => resetn_t,
	CLOCK => clk108m_t,	
	WR => wr_t(1 downto 0),
	CameraFIFOFull => camerafifohalffull_t2,
	MCUFIFOEmpty => mcufifohalffull_t2,
	ReadCameraFIFO => readcamerafifo_t2,
	WriteMCUFIFO => writemcufifo_t2,
	ReadCameraFIFOData => readcamerafifodata_t2,
	WriteMCUFIFOData => writemcufifodata_t2,	
	Full => full_t2,
	Empty => empty_t2,
	CSn => CSn1,	
	CLK => CLK1,
	CKE => CKE1,
	RASn => RASn1,
	CASn => CASn1,
	WEn => WEn1,
	DQM => DQM1,
	BA => BA1,
	A => A1,
	DQ => DQ1	
);

U6:Controller
PORT MAP
(
	RESETn => resetn_t,
	CLK108M => clk108m_t,
	CLK72M => clk72m_t,
	SDRAMFULL => ( full_t1 & full_t2 ),
	SDRAMEMPTY => ( empty_t1 & empty_t2 ),
	WR => wr_t,
	FLAGA => FLAGA,
	SLWR => SLWR,
	IFCLK =>IFCLK,
	FIFOADR => FIFOADR,
	MCUFIFOFULL => mcufifohalffull_t,
	READMCUFIFO => readmcufifo_t
);

END RTL;