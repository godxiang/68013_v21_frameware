-- Copyright (C) 1991-2011 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "06/02/2018 02:42:37"
                                                            
-- Vhdl Test Bench template for design  :  USB2_SDRAM_Project
-- 
-- Simulation tool : ModelSim (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY USB2_SDRAM_Project_vhd_tst IS
END USB2_SDRAM_Project_vhd_tst;
ARCHITECTURE USB2_SDRAM_Project_arch OF USB2_SDRAM_Project_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL A0 : STD_LOGIC_VECTOR(12 DOWNTO 0);
SIGNAL A1 : STD_LOGIC_VECTOR(12 DOWNTO 0);
SIGNAL BA0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
SIGNAL BA1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
SIGNAL CASn0 : STD_LOGIC;
SIGNAL CASn1 : STD_LOGIC;
SIGNAL Check : STD_LOGIC;
SIGNAL CKE0 : STD_LOGIC;
SIGNAL CKE1 : STD_LOGIC;
SIGNAL CLK0 : STD_LOGIC;
SIGNAL CLK1 : STD_LOGIC;
SIGNAL CLK48M : STD_LOGIC;
SIGNAL CPU_Data : STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL CPU_RD : STD_LOGIC;
SIGNAL CPU_Set : STD_LOGIC;
SIGNAL CPU_WR : STD_LOGIC;
SIGNAL CSn0 : STD_LOGIC;
SIGNAL CSn1 : STD_LOGIC;
SIGNAL DATAIN : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL DQ0 : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL DQ1 : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL Encode_A : STD_LOGIC;
SIGNAL Encode_B : STD_LOGIC;
SIGNAL FLAGB : STD_LOGIC;
SIGNAL FLAGC : STD_LOGIC;
SIGNAL IFCLK : STD_LOGIC;
SIGNAL Laser_Clk : STD_LOGIC;
SIGNAL Laser_Data : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL Laser_En : STD_LOGIC;
SIGNAL Laser_On : STD_LOGIC;
SIGNAL Laser_ST : STD_LOGIC;
SIGNAL LDQM0 : STD_LOGIC;
SIGNAL LDQM1 : STD_LOGIC;
SIGNAL RASn0 : STD_LOGIC;
SIGNAL RASn1 : STD_LOGIC;
SIGNAL RESETn : STD_LOGIC;
SIGNAL SLRD : STD_LOGIC;
SIGNAL SLWR : STD_LOGIC;
SIGNAL UDQM0 : STD_LOGIC;
SIGNAL UDQM1 : STD_LOGIC;
SIGNAL WEn0 : STD_LOGIC;
SIGNAL WEn1 : STD_LOGIC;
COMPONENT USB2_SDRAM_Project
	PORT (
	A0 : OUT STD_LOGIC_VECTOR(12 DOWNTO 0);
	A1 : OUT STD_LOGIC_VECTOR(12 DOWNTO 0);
	BA0 : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
	BA1 : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
	CASn0 : OUT STD_LOGIC;
	CASn1 : OUT STD_LOGIC;
	Check : OUT STD_LOGIC;
	CKE0 : OUT STD_LOGIC;
	CKE1 : OUT STD_LOGIC;
	CLK0 : OUT STD_LOGIC;
	CLK1 : OUT STD_LOGIC;
	CLK48M : IN STD_LOGIC;
	CPU_Data : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0);
	CPU_RD : IN STD_LOGIC;
	CPU_Set : IN STD_LOGIC;
	CPU_WR : IN STD_LOGIC;
	CSn0 : OUT STD_LOGIC;
	CSn1 : OUT STD_LOGIC;
	DATAIN : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
	DQ0 : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
	DQ1 : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
	Encode_A : IN STD_LOGIC;
	Encode_B : IN STD_LOGIC;
	FLAGB : IN STD_LOGIC;
	FLAGC : IN STD_LOGIC;
	IFCLK : OUT STD_LOGIC;
	Laser_Clk : OUT STD_LOGIC;
	Laser_Data : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
	Laser_En : OUT STD_LOGIC;
	Laser_On : IN STD_LOGIC;
	Laser_ST : OUT STD_LOGIC;
	LDQM0 : OUT STD_LOGIC;
	LDQM1 : OUT STD_LOGIC;
	RASn0 : OUT STD_LOGIC;
	RASn1 : OUT STD_LOGIC;
	RESETn : IN STD_LOGIC;
	SLRD : OUT STD_LOGIC;
	SLWR : OUT STD_LOGIC;
	UDQM0 : OUT STD_LOGIC;
	UDQM1 : OUT STD_LOGIC;
	WEn0 : OUT STD_LOGIC;
	WEn1 : OUT STD_LOGIC
	);
END COMPONENT;
BEGIN
	i1 : USB2_SDRAM_Project
	PORT MAP (
-- list connections between master ports and signals
	A0 => A0,
	A1 => A1,
	BA0 => BA0,
	BA1 => BA1,
	CASn0 => CASn0,
	CASn1 => CASn1,
	Check => Check,
	CKE0 => CKE0,
	CKE1 => CKE1,
	CLK0 => CLK0,
	CLK1 => CLK1,
	CLK48M => CLK48M,
	CPU_Data => CPU_Data,
	CPU_RD => CPU_RD,
	CPU_Set => CPU_Set,
	CPU_WR => CPU_WR,
	CSn0 => CSn0,
	CSn1 => CSn1,
	DATAIN => DATAIN,
	DQ0 => DQ0,
	DQ1 => DQ1,
	Encode_A => Encode_A,
	Encode_B => Encode_B,
	FLAGB => FLAGB,
	FLAGC => FLAGC,
	IFCLK => IFCLK,
	Laser_Clk => Laser_Clk,
	Laser_Data => Laser_Data,
	Laser_En => Laser_En,
	Laser_On => Laser_On,
	Laser_ST => Laser_ST,
	LDQM0 => LDQM0,
	LDQM1 => LDQM1,
	RASn0 => RASn0,
	RASn1 => RASn1,
	RESETn => RESETn,
	SLRD => SLRD,
	SLWR => SLWR,
	UDQM0 => UDQM0,
	UDQM1 => UDQM1,
	WEn0 => WEn0,
	WEn1 => WEn1
	);
init : PROCESS                                               
-- variable declarations                                     
BEGIN                                                        
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
always : PROCESS                                              
-- optional sensitivity list                                  
-- (        )                                                 
-- variable declarations                                      
BEGIN                                                         
        -- code executes for every event on sensitivity list  
WAIT;                                                        
END PROCESS always;                                          
END USB2_SDRAM_Project_arch;
